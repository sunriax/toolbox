
ToolboxLoader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000140c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000140c  000014c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800072  00800072  000014d2  2**0
                  ALLOC
  3 .eeprom       0000008f  00810000  00810000  000014d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001561  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001594  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000238  00000000  00000000  000015d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000036ac  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001095  00000000  00000000  00004eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000166d  00000000  00000000  00005f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000664  00000000  00000000  000075b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000076a  00000000  00000000  00007c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002696  00000000  00000000  00008386  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001e8  00000000  00000000  0000aa1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "_lib/spi.h"

int main(void)
{
	// System Initialisierung
	system_init();
      92:	0e 94 3b 07 	call	0xe76	; 0xe76 <system_init>

	// Programmer aufruf
	getmode();
      96:	0e 94 89 06 	call	0xd12	; 0xd12 <getmode>
	
	// Endlosschleife
	while (1)
	{
		asm volatile("nop");
      9a:	00 00       	nop
      9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x8>

0000009e <rom_block>:

//	+---------------------------------------------------------------+
//	|					EEPROM Block lesen							|
//	+---------------------------------------------------------------+
void rom_block(unsigned char eeADDRESS[], unsigned char buffer[], unsigned char size)
{	
      9e:	9c 01       	movw	r18, r24
      a0:	cb 01       	movw	r24, r22
	eeprom_read_block (buffer, eeADDRESS, size);	// EEPROM Block lesen
      a2:	50 e0       	ldi	r21, 0x00	; 0
      a4:	b9 01       	movw	r22, r18
      a6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <eeprom_read_block>
      aa:	08 95       	ret

000000ac <i2c_start>:
	// Daten aus EEPROM lesen
	i2c_start();
	i2c_transmit(deviceaddr | I2C_READ);
	*data = i2c_receive(NACK);
	i2c_stop();
}
      ac:	84 ea       	ldi	r24, 0xA4	; 164
      ae:	86 bf       	out	0x36, r24	; 54
      b0:	06 b6       	in	r0, 0x36	; 54
      b2:	07 fe       	sbrs	r0, 7
      b4:	fd cf       	rjmp	.-6      	; 0xb0 <i2c_start+0x4>
      b6:	08 95       	ret

000000b8 <i2c_transmit>:
      b8:	83 b9       	out	0x03, r24	; 3
      ba:	84 e8       	ldi	r24, 0x84	; 132
      bc:	86 bf       	out	0x36, r24	; 54
      be:	06 b6       	in	r0, 0x36	; 54
      c0:	07 fe       	sbrs	r0, 7
      c2:	fd cf       	rjmp	.-6      	; 0xbe <i2c_transmit+0x6>
      c4:	08 95       	ret

000000c6 <i2c_receive>:
      c6:	81 11       	cpse	r24, r1
      c8:	03 c0       	rjmp	.+6      	; 0xd0 <i2c_receive+0xa>
      ca:	84 e8       	ldi	r24, 0x84	; 132
      cc:	86 bf       	out	0x36, r24	; 54
      ce:	02 c0       	rjmp	.+4      	; 0xd4 <i2c_receive+0xe>
      d0:	84 ec       	ldi	r24, 0xC4	; 196
      d2:	86 bf       	out	0x36, r24	; 54
      d4:	06 b6       	in	r0, 0x36	; 54
      d6:	07 fe       	sbrs	r0, 7
      d8:	fd cf       	rjmp	.-6      	; 0xd4 <i2c_receive+0xe>
      da:	83 b1       	in	r24, 0x03	; 3
      dc:	08 95       	ret

000000de <i2c_eeprom_write_byte>:
      de:	1f 93       	push	r17
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	18 2f       	mov	r17, r24
      e6:	d6 2f       	mov	r29, r22
      e8:	c4 2f       	mov	r28, r20
      ea:	0e 94 56 00 	call	0xac	; 0xac <i2c_start>
      ee:	81 2f       	mov	r24, r17
      f0:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_transmit>
      f4:	8d 2f       	mov	r24, r29
      f6:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_transmit>
      fa:	8c 2f       	mov	r24, r28
      fc:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_transmit>
     100:	d4 e9       	ldi	r29, 0x94	; 148
     102:	d6 bf       	out	0x36, r29	; 54
     104:	87 e9       	ldi	r24, 0x97	; 151
     106:	9a e3       	ldi	r25, 0x3A	; 58
     108:	01 97       	sbiw	r24, 0x01	; 1
     10a:	f1 f7       	brne	.-4      	; 0x108 <i2c_eeprom_write_byte+0x2a>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <i2c_eeprom_write_byte+0x30>
     10e:	00 00       	nop
     110:	0e 94 56 00 	call	0xac	; 0xac <i2c_start>
     114:	81 2f       	mov	r24, r17
     116:	81 60       	ori	r24, 0x01	; 1
     118:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_transmit>
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	0e 94 63 00 	call	0xc6	; 0xc6 <i2c_receive>
     122:	d6 bf       	out	0x36, r29	; 54
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	c8 13       	cpse	r28, r24
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	89 2f       	mov	r24, r25
     12c:	81 95       	neg	r24
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	1f 91       	pop	r17
     134:	08 95       	ret

00000136 <i2c_eeprom_read_block>:

//	+---------------------------------------------------------------+
//	|					I²C EEPROM Block lesen						|
//	+---------------------------------------------------------------+
void i2c_eeprom_read_block(unsigned char deviceaddr, unsigned char wordaddr, unsigned char *data, unsigned char blocksize)
{
     136:	2f 92       	push	r2
     138:	3f 92       	push	r3
     13a:	4f 92       	push	r4
     13c:	5f 92       	push	r5
     13e:	6f 92       	push	r6
     140:	7f 92       	push	r7
     142:	8f 92       	push	r8
     144:	9f 92       	push	r9
     146:	af 92       	push	r10
     148:	bf 92       	push	r11
     14a:	cf 92       	push	r12
     14c:	df 92       	push	r13
     14e:	ef 92       	push	r14
     150:	ff 92       	push	r15
     152:	0f 93       	push	r16
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	29 97       	sbiw	r28, 0x09	; 9
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
     16a:	89 83       	std	Y+1, r24	; 0x01
     16c:	6a 83       	std	Y+2, r22	; 0x02
     16e:	3a 01       	movw	r6, r20
     170:	2b 83       	std	Y+3, r18	; 0x03
		// Dummy Write
		i2c_start();
     172:	0e 94 56 00 	call	0xac	; 0xac <i2c_start>
		i2c_transmit(deviceaddr | I2C_WRITE);
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_transmit>
		i2c_transmit(wordaddr);
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_transmit>
		
		// EEPROM Lesen initiieren
		i2c_start();
     182:	0e 94 56 00 	call	0xac	; 0xac <i2c_start>
		i2c_transmit(deviceaddr | I2C_READ);
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	81 60       	ori	r24, 0x01	; 1
     18a:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_transmit>
		
		// Datenblock aus EEPROM lesen
		for(unsigned char i=0; i < blocksize; i++)
     18e:	2b 81       	ldd	r18, Y+3	; 0x03
     190:	22 23       	and	r18, r18
     192:	09 f4       	brne	.+2      	; 0x196 <i2c_eeprom_read_block+0x60>
     194:	5a c0       	rjmp	.+180    	; 0x24a <i2c_eeprom_read_block+0x114>
     196:	82 2f       	mov	r24, r18
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	31 96       	adiw	r30, 0x01	; 1
     1a0:	fd 83       	std	Y+5, r31	; 0x05
     1a2:	ec 83       	std	Y+4, r30	; 0x04
     1a4:	f1 e0       	ldi	r31, 0x01	; 1
     1a6:	19 86       	std	Y+9, r1	; 0x09
     1a8:	19 82       	std	Y+1, r1	; 0x01
     1aa:	1a 82       	std	Y+2, r1	; 0x02
     1ac:	51 2c       	mov	r5, r1
     1ae:	21 2c       	mov	r2, r1
     1b0:	31 2c       	mov	r3, r1
     1b2:	41 2c       	mov	r4, r1
     1b4:	81 2c       	mov	r8, r1
     1b6:	91 2c       	mov	r9, r1
		{
			// Überprüfen ob Datensatz durchlaufen
			if((blocksize - 1) >= i)
     1b8:	82 2f       	mov	r24, r18
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	9c 01       	movw	r18, r24
     1be:	21 50       	subi	r18, 0x01	; 1
     1c0:	31 09       	sbc	r19, r1
     1c2:	3f 83       	std	Y+7, r19	; 0x07
     1c4:	2e 83       	std	Y+6, r18	; 0x06
     1c6:	f8 87       	std	Y+8, r31	; 0x08
     1c8:	8e 81       	ldd	r24, Y+6	; 0x06
     1ca:	9f 81       	ldd	r25, Y+7	; 0x07
     1cc:	88 15       	cp	r24, r8
     1ce:	99 05       	cpc	r25, r9
     1d0:	34 f0       	brlt	.+12     	; 0x1de <i2c_eeprom_read_block+0xa8>
				*data = i2c_receive(NACK);		// Daten Empfangen ohne Quittierung
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	0e 94 63 00 	call	0xc6	; 0xc6 <i2c_receive>
     1d8:	f3 01       	movw	r30, r6
     1da:	80 83       	st	Z, r24
     1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <i2c_eeprom_read_block+0xb2>
			else
				*data = i2c_receive(ACK);		// Daten Empfangen mit Quittierung
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 63 00 	call	0xc6	; 0xc6 <i2c_receive>
     1e4:	f3 01       	movw	r30, r6
     1e6:	80 83       	st	Z, r24
				
			data++;
     1e8:	ff ef       	ldi	r31, 0xFF	; 255
     1ea:	6f 1a       	sub	r6, r31
     1ec:	7f 0a       	sbc	r7, r31
			
			percent((i+1), blocksize);
     1ee:	ab 80       	ldd	r10, Y+3	; 0x03
     1f0:	b1 2c       	mov	r11, r1
     1f2:	c1 2c       	mov	r12, r1
     1f4:	d1 2c       	mov	r13, r1
     1f6:	e1 2c       	mov	r14, r1
     1f8:	f1 2c       	mov	r15, r1
     1fa:	00 e0       	ldi	r16, 0x00	; 0
     1fc:	10 e0       	ldi	r17, 0x00	; 0
     1fe:	28 85       	ldd	r18, Y+8	; 0x08
     200:	39 85       	ldd	r19, Y+9	; 0x09
     202:	49 81       	ldd	r20, Y+1	; 0x01
     204:	5a 81       	ldd	r21, Y+2	; 0x02
     206:	65 2d       	mov	r22, r5
     208:	72 2d       	mov	r23, r2
     20a:	84 2d       	mov	r24, r4
     20c:	93 2d       	mov	r25, r3
     20e:	0e 94 c4 07 	call	0xf88	; 0xf88 <percent>
     212:	2f ef       	ldi	r18, 0xFF	; 255
     214:	82 1a       	sub	r8, r18
     216:	92 0a       	sbc	r9, r18
     218:	28 85       	ldd	r18, Y+8	; 0x08
     21a:	39 85       	ldd	r19, Y+9	; 0x09
     21c:	49 81       	ldd	r20, Y+1	; 0x01
     21e:	5a 81       	ldd	r21, Y+2	; 0x02
     220:	65 2d       	mov	r22, r5
     222:	72 2d       	mov	r23, r2
     224:	84 2d       	mov	r24, r4
     226:	93 2d       	mov	r25, r3
     228:	a1 e0       	ldi	r26, 0x01	; 1
     22a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__adddi3_s8>
     22e:	28 87       	std	Y+8, r18	; 0x08
     230:	39 87       	std	Y+9, r19	; 0x09
     232:	49 83       	std	Y+1, r20	; 0x01
     234:	5a 83       	std	Y+2, r21	; 0x02
     236:	56 2e       	mov	r5, r22
     238:	27 2e       	mov	r2, r23
     23a:	48 2e       	mov	r4, r24
     23c:	39 2e       	mov	r3, r25
		// EEPROM Lesen initiieren
		i2c_start();
		i2c_transmit(deviceaddr | I2C_READ);
		
		// Datenblock aus EEPROM lesen
		for(unsigned char i=0; i < blocksize; i++)
     23e:	8c 81       	ldd	r24, Y+4	; 0x04
     240:	9d 81       	ldd	r25, Y+5	; 0x05
     242:	88 16       	cp	r8, r24
     244:	99 06       	cpc	r9, r25
     246:	09 f0       	breq	.+2      	; 0x24a <i2c_eeprom_read_block+0x114>
     248:	bf cf       	rjmp	.-130    	; 0x1c8 <i2c_eeprom_read_block+0x92>
//	+---------------------------------------------------------------+
//	|					I²C STOP Kommando							|
//	+---------------------------------------------------------------+
void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     24a:	84 e9       	ldi	r24, 0x94	; 148
     24c:	86 bf       	out	0x36, r24	; 54
			
			percent((i+1), blocksize);
		}
		
		i2c_stop();
}
     24e:	29 96       	adiw	r28, 0x09	; 9
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	ff 90       	pop	r15
     264:	ef 90       	pop	r14
     266:	df 90       	pop	r13
     268:	cf 90       	pop	r12
     26a:	bf 90       	pop	r11
     26c:	af 90       	pop	r10
     26e:	9f 90       	pop	r9
     270:	8f 90       	pop	r8
     272:	7f 90       	pop	r7
     274:	6f 90       	pop	r6
     276:	5f 90       	pop	r5
     278:	4f 90       	pop	r4
     27a:	3f 90       	pop	r3
     27c:	2f 90       	pop	r2
     27e:	08 95       	ret

00000280 <i2c_eeprom_write_block>:

//	+---------------------------------------------------------------+
//	|					I²C EEPROM Block schreiben					|
//	+---------------------------------------------------------------+
unsigned char i2c_eeprom_write_block(unsigned char deviceaddr, unsigned char wordaddr, unsigned char data[], unsigned char blocksize)
{
     280:	5f 92       	push	r5
     282:	6f 92       	push	r6
     284:	7f 92       	push	r7
     286:	8f 92       	push	r8
     288:	9f 92       	push	r9
     28a:	af 92       	push	r10
     28c:	bf 92       	push	r11
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	68 2e       	mov	r6, r24
     2a4:	56 2e       	mov	r5, r22
     2a6:	7a 01       	movw	r14, r20
     2a8:	72 2e       	mov	r7, r18
		if(read[j] != data[j])
			return 0x00;
	}
	
	return 0xFF;
}
     2aa:	ad b6       	in	r10, 0x3d	; 61
     2ac:	be b6       	in	r11, 0x3e	; 62
//	+---------------------------------------------------------------+
//	|					I²C EEPROM Block schreiben					|
//	+---------------------------------------------------------------+
unsigned char i2c_eeprom_write_block(unsigned char deviceaddr, unsigned char wordaddr, unsigned char data[], unsigned char blocksize)
{
	unsigned char read[blocksize];
     2ae:	82 2e       	mov	r8, r18
     2b0:	91 2c       	mov	r9, r1
     2b2:	8d b7       	in	r24, 0x3d	; 61
     2b4:	9e b7       	in	r25, 0x3e	; 62
     2b6:	88 19       	sub	r24, r8
     2b8:	99 09       	sbc	r25, r9
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	9e bf       	out	0x3e, r25	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	8d bf       	out	0x3d, r24	; 61
     2c4:	ed b7       	in	r30, 0x3d	; 61
     2c6:	fe b7       	in	r31, 0x3e	; 62
     2c8:	31 96       	adiw	r30, 0x01	; 1
     2ca:	6f 01       	movw	r12, r30
	
	// Array in EEPROM schreiben
	i2c_start();
     2cc:	0e 94 56 00 	call	0xac	; 0xac <i2c_start>
	i2c_transmit(deviceaddr | I2C_WRITE);
     2d0:	86 2d       	mov	r24, r6
     2d2:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_transmit>
	i2c_transmit(wordaddr);
     2d6:	85 2d       	mov	r24, r5
     2d8:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_transmit>
	
	for(unsigned i=0; i < blocksize; i++)
     2dc:	81 14       	cp	r8, r1
     2de:	91 04       	cpc	r9, r1
     2e0:	59 f0       	breq	.+22     	; 0x2f8 <i2c_eeprom_write_block+0x78>
     2e2:	87 01       	movw	r16, r14
     2e4:	8e 0c       	add	r8, r14
     2e6:	9f 1c       	adc	r9, r15
		i2c_transmit(data[i]);
     2e8:	f8 01       	movw	r30, r16
     2ea:	81 91       	ld	r24, Z+
     2ec:	8f 01       	movw	r16, r30
     2ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_transmit>
	// Array in EEPROM schreiben
	i2c_start();
	i2c_transmit(deviceaddr | I2C_WRITE);
	i2c_transmit(wordaddr);
	
	for(unsigned i=0; i < blocksize; i++)
     2f2:	08 15       	cp	r16, r8
     2f4:	19 05       	cpc	r17, r9
     2f6:	c1 f7       	brne	.-16     	; 0x2e8 <i2c_eeprom_write_block+0x68>
//	+---------------------------------------------------------------+
//	|					I²C STOP Kommando							|
//	+---------------------------------------------------------------+
void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     2f8:	84 e9       	ldi	r24, 0x94	; 148
     2fa:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fc:	87 e9       	ldi	r24, 0x97	; 151
     2fe:	9a e3       	ldi	r25, 0x3A	; 58
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <i2c_eeprom_write_block+0x80>
     304:	00 c0       	rjmp	.+0      	; 0x306 <i2c_eeprom_write_block+0x86>
     306:	00 00       	nop
	
	// Wartezeit bis Daten in EEPROM gespeichert
	_delay_ms(I2C_EEPROM_WRITE);
	
	// Array aus EEPROM lesen
	i2c_eeprom_read_block(deviceaddr, wordaddr, &read[0], blocksize);
     308:	27 2d       	mov	r18, r7
     30a:	a6 01       	movw	r20, r12
     30c:	65 2d       	mov	r22, r5
     30e:	86 2d       	mov	r24, r6
     310:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_eeprom_read_block>
	// oder
	// i2c_eeprom_read_block(deviceaddr, wordaddr, read, blocksize);
	
	for(unsigned char j=0; j < blocksize; j++)
     314:	77 20       	and	r7, r7
     316:	d1 f0       	breq	.+52     	; 0x34c <i2c_eeprom_write_block+0xcc>
	{
		if(read[j] != data[j])
     318:	f6 01       	movw	r30, r12
     31a:	90 81       	ld	r25, Z
     31c:	f7 01       	movw	r30, r14
     31e:	80 81       	ld	r24, Z
     320:	98 13       	cpse	r25, r24
     322:	16 c0       	rjmp	.+44     	; 0x350 <i2c_eeprom_write_block+0xd0>
     324:	f6 01       	movw	r30, r12
     326:	31 96       	adiw	r30, 0x01	; 1
     328:	d7 01       	movw	r26, r14
     32a:	11 96       	adiw	r26, 0x01	; 1
     32c:	7a 94       	dec	r7
     32e:	87 2d       	mov	r24, r7
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	c8 0e       	add	r12, r24
     336:	d9 1e       	adc	r13, r25
     338:	04 c0       	rjmp	.+8      	; 0x342 <i2c_eeprom_write_block+0xc2>
     33a:	91 91       	ld	r25, Z+
     33c:	8d 91       	ld	r24, X+
     33e:	98 13       	cpse	r25, r24
     340:	09 c0       	rjmp	.+18     	; 0x354 <i2c_eeprom_write_block+0xd4>
	// Array aus EEPROM lesen
	i2c_eeprom_read_block(deviceaddr, wordaddr, &read[0], blocksize);
	// oder
	// i2c_eeprom_read_block(deviceaddr, wordaddr, read, blocksize);
	
	for(unsigned char j=0; j < blocksize; j++)
     342:	ec 15       	cp	r30, r12
     344:	fd 05       	cpc	r31, r13
     346:	c9 f7       	brne	.-14     	; 0x33a <i2c_eeprom_write_block+0xba>
	{
		if(read[j] != data[j])
			return 0x00;
	}
	
	return 0xFF;
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	05 c0       	rjmp	.+10     	; 0x356 <i2c_eeprom_write_block+0xd6>
     34c:	8f ef       	ldi	r24, 0xFF	; 255
     34e:	03 c0       	rjmp	.+6      	; 0x356 <i2c_eeprom_write_block+0xd6>
	// i2c_eeprom_read_block(deviceaddr, wordaddr, read, blocksize);
	
	for(unsigned char j=0; j < blocksize; j++)
	{
		if(read[j] != data[j])
			return 0x00;
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	01 c0       	rjmp	.+2      	; 0x356 <i2c_eeprom_write_block+0xd6>
     354:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return 0xFF;
}
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	be be       	out	0x3e, r11	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	ad be       	out	0x3d, r10	; 61
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	cf 90       	pop	r12
     370:	bf 90       	pop	r11
     372:	af 90       	pop	r10
     374:	9f 90       	pop	r9
     376:	8f 90       	pop	r8
     378:	7f 90       	pop	r7
     37a:	6f 90       	pop	r6
     37c:	5f 90       	pop	r5
     37e:	08 95       	ret

00000380 <lcd_zToLCD>:
*************************************************************/
{
	//char D=0;

	//LCD_PORT = 1<< EN;
	PORTA|=1<< EN;
     380:	dc 9a       	sbi	0x1b, 4	; 27
     382:	e7 e5       	ldi	r30, 0x57	; 87
     384:	f2 e0       	ldi	r31, 0x02	; 2
     386:	31 97       	sbiw	r30, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <lcd_zToLCD+0x6>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <lcd_zToLCD+0xc>
     38c:	00 00       	nop

	_delay_ms(WAIT_0);	

	PORTA&=~ (1<<RS);
     38e:	de 98       	cbi	0x1b, 6	; 27
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
     390:	98 b3       	in	r25, 0x18	; 24
     392:	9b 71       	andi	r25, 0x1B	; 27
     394:	98 bb       	out	0x18, r25	; 24
	
	if (dataD & 0x01) PORTB|=1<<DB4;;
     396:	80 fd       	sbrc	r24, 0
     398:	c2 9a       	sbi	0x18, 2	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
     39a:	81 fd       	sbrc	r24, 1
     39c:	c5 9a       	sbi	0x18, 5	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
     39e:	82 fd       	sbrc	r24, 2
     3a0:	c6 9a       	sbi	0x18, 6	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
     3a2:	83 fd       	sbrc	r24, 3
     3a4:	c7 9a       	sbi	0x18, 7	; 24
	if (dataD & 0x10) PORTA|=1<<RS; 
     3a6:	84 fd       	sbrc	r24, 4
     3a8:	de 9a       	sbi	0x1b, 6	; 27

	//LCD_PORT &= ~(1<< EN);
	PORTA &= ~(1<< EN);
     3aa:	dc 98       	cbi	0x1b, 4	; 27
     3ac:	87 e5       	ldi	r24, 0x57	; 87
     3ae:	92 e0       	ldi	r25, 0x02	; 2
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <lcd_zToLCD+0x30>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <lcd_zToLCD+0x36>
     3b6:	00 00       	nop
     3b8:	08 95       	ret

000003ba <lcd_home>:
     3ba:	8f e5       	ldi	r24, 0x5F	; 95
     3bc:	9a ee       	ldi	r25, 0xEA	; 234
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_home+0x4>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <lcd_home+0xa>
     3c4:	00 00       	nop
setzt den Adresszaehler des DD-RAM auf Adresse 0. Der Inhalt des DD-RAMS
bleibt unveraendert. Der Cursor wird auf die erste Position der ersten
Zeile gesetzt.
*************************************************************/
{
	_delay_ms(WAIT_2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
     3cc:	8f e5       	ldi	r24, 0x5F	; 95
     3ce:	9a ee       	ldi	r25, 0xEA	; 234
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <lcd_home+0x16>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <lcd_home+0x1c>
     3d6:	00 00       	nop
	_delay_ms(WAIT_2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
     3de:	08 95       	ret

000003e0 <lcd_init>:
*************************************************************/
{
	//LCD_DDR |= 1<<RS | 1<<RW | 1<<EN | 1<<VEE | 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
	//LCD_DDR |= 1<<RS | 1<<EN | 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;

	DDRA|= 1<<RS | 1<<EN ;
     3e0:	8a b3       	in	r24, 0x1a	; 26
     3e2:	80 65       	ori	r24, 0x50	; 80
     3e4:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
     3e6:	87 b3       	in	r24, 0x17	; 23
     3e8:	84 6e       	ori	r24, 0xE4	; 228
     3ea:	87 bb       	out	0x17, r24	; 23
     3ec:	8f e5       	ldi	r24, 0x5F	; 95
     3ee:	9a ee       	ldi	r25, 0xEA	; 234
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <lcd_init+0x10>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <lcd_init+0x16>
     3f6:	00 00       	nop

	_delay_ms(20);
	lcd_zToLCD(0x03);       // Function Set A
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
     3fe:	8f e2       	ldi	r24, 0x2F	; 47
     400:	95 e7       	ldi	r25, 0x75	; 117
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	00 00       	nop
	_delay_ms(10);
	lcd_zToLCD(0x43);       // Function Set B
     40a:	83 e4       	ldi	r24, 0x43	; 67
     40c:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
     410:	87 eb       	ldi	r24, 0xB7	; 183
     412:	9b e0       	ldi	r25, 0x0B	; 11
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
	_delay_ms(1);	
	lcd_zToLCD(0x03);       // Function Set C
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>

	lcd_zToLCD(0x02);       // Function Set D
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
	lcd_zToLCD(0x08);       // Funktion Set Low Byte
     42e:	88 e0       	ldi	r24, 0x08	; 8
     430:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On High Byte
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On Low Byte	
     43a:	8c e0       	ldi	r24, 0x0C	; 12
     43c:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
     458:	87 eb       	ldi	r24, 0xB7	; 183
     45a:	9b e0       	ldi	r25, 0x0B	; 11
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     460:	00 c0       	rjmp	.+0      	; 0x462 <__stack+0x3>
     462:	00 00       	nop
	_delay_ms(1);

	lcd_home();
     464:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_home>
	init_printf(NULL,my_putc);
     468:	6b e3       	ldi	r22, 0x3B	; 59
     46a:	72 e0       	ldi	r23, 0x02	; 2
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 7d 04 	call	0x8fa	; 0x8fa <init_printf>
     474:	08 95       	ret

00000476 <my_putc>:
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void my_putc ( void* p, char c)
{
     476:	cf 93       	push	r28
     478:	c6 2f       	mov	r28, r22
	//unsigned char Zeichen;
	char Zeichen;
	
	Zeichen = c;
	Zeichen>>=4;
     47a:	86 2f       	mov	r24, r22
     47c:	82 95       	swap	r24
     47e:	8f 70       	andi	r24, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     480:	e7 e5       	ldi	r30, 0x57	; 87
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	31 97       	sbiw	r30, 0x01	; 1
     486:	f1 f7       	brne	.-4      	; 0x484 <my_putc+0xe>
     488:	00 c0       	rjmp	.+0      	; 0x48a <my_putc+0x14>
     48a:	00 00       	nop
	Zeichen|=0x10;
	_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
     48c:	80 61       	ori	r24, 0x10	; 16
     48e:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
     492:	8c 2f       	mov	r24, r28
     494:	8f 70       	andi	r24, 0x0F	; 15
     496:	e7 e5       	ldi	r30, 0x57	; 87
     498:	f2 e0       	ldi	r31, 0x02	; 2
     49a:	31 97       	sbiw	r30, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <my_putc+0x24>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <my_putc+0x2a>
     4a0:	00 00       	nop
	Zeichen|=0x10;
	_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
     4a2:	80 61       	ori	r24, 0x10	; 16
     4a4:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
*****************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
     4ac:	cf 93       	push	r28
     4ae:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
     4b0:	81 11       	cpse	r24, r1
     4b2:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			//Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
     4b4:	8c 2f       	mov	r24, r28
     4b6:	82 95       	swap	r24
     4b8:	8f 70       	andi	r24, 0x0F	; 15
     4ba:	e7 e5       	ldi	r30, 0x57	; 87
     4bc:	f2 e0       	ldi	r31, 0x02	; 2
     4be:	31 97       	sbiw	r30, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <lcd_pos+0x12>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <lcd_pos+0x18>
     4c4:	00 00       	nop
	Zeichen|=0x08;		
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
     4c6:	88 60       	ori	r24, 0x08	; 8
     4c8:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
     4cc:	87 e5       	ldi	r24, 0x57	; 87
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <lcd_pos+0x24>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <lcd_pos+0x2a>
     4d6:	00 00       	nop
	Zeichen=Pos;
	Zeichen&=0x0F;	
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
     4d8:	8c 2f       	mov	r24, r28
     4da:	8f 70       	andi	r24, 0x0F	; 15
     4dc:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_zToLCD>
}
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret

000004e4 <ui2a>:
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     4e4:	8f 92       	push	r8
     4e6:	9f 92       	push	r9
     4e8:	af 92       	push	r10
     4ea:	bf 92       	push	r11
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ec 01       	movw	r28, r24
     4fe:	8b 01       	movw	r16, r22
     500:	5a 01       	movw	r10, r20
     502:	79 01       	movw	r14, r18
     504:	86 17       	cp	r24, r22
     506:	97 07       	cpc	r25, r23
     508:	a0 f0       	brcs	.+40     	; 0x532 <ui2a+0x4e>
     50a:	e1 e0       	ldi	r30, 0x01	; 1
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	cf 01       	movw	r24, r30
     510:	80 9f       	mul	r24, r16
     512:	f0 01       	movw	r30, r0
     514:	81 9f       	mul	r24, r17
     516:	f0 0d       	add	r31, r0
     518:	90 9f       	mul	r25, r16
     51a:	f0 0d       	add	r31, r0
     51c:	11 24       	eor	r1, r1
     51e:	ce 01       	movw	r24, r28
     520:	bf 01       	movw	r22, r30
     522:	0e 94 46 09 	call	0x128c	; 0x128c <__udivmodhi4>
     526:	60 17       	cp	r22, r16
     528:	71 07       	cpc	r23, r17
     52a:	88 f7       	brcc	.-30     	; 0x50e <ui2a+0x2a>
     52c:	30 97       	sbiw	r30, 0x00	; 0
     52e:	19 f4       	brne	.+6      	; 0x536 <ui2a+0x52>
     530:	37 c0       	rjmp	.+110    	; 0x5a0 <ui2a+0xbc>
     532:	e1 e0       	ldi	r30, 0x01	; 1
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	c1 2c       	mov	r12, r1
     538:	d1 2c       	mov	r13, r1
     53a:	01 c0       	rjmp	.+2      	; 0x53e <ui2a+0x5a>
     53c:	7a 01       	movw	r14, r20
     53e:	ce 01       	movw	r24, r28
     540:	bf 01       	movw	r22, r30
     542:	0e 94 46 09 	call	0x128c	; 0x128c <__udivmodhi4>
     546:	36 2f       	mov	r19, r22
     548:	26 2f       	mov	r18, r22
     54a:	86 2e       	mov	r8, r22
     54c:	97 2e       	mov	r9, r23
     54e:	c8 2f       	mov	r28, r24
     550:	d9 2f       	mov	r29, r25
     552:	cf 01       	movw	r24, r30
     554:	b8 01       	movw	r22, r16
     556:	0e 94 46 09 	call	0x128c	; 0x128c <__udivmodhi4>
     55a:	fb 01       	movw	r30, r22
     55c:	c1 14       	cp	r12, r1
     55e:	d1 04       	cpc	r13, r1
     560:	39 f4       	brne	.+14     	; 0x570 <ui2a+0x8c>
     562:	18 14       	cp	r1, r8
     564:	19 04       	cpc	r1, r9
     566:	24 f0       	brlt	.+8      	; 0x570 <ui2a+0x8c>
     568:	30 97       	sbiw	r30, 0x00	; 0
     56a:	11 f1       	breq	.+68     	; 0x5b0 <ui2a+0xcc>
     56c:	a7 01       	movw	r20, r14
     56e:	e6 cf       	rjmp	.-52     	; 0x53c <ui2a+0x58>
     570:	a7 01       	movw	r20, r14
     572:	4f 5f       	subi	r20, 0xFF	; 255
     574:	5f 4f       	sbci	r21, 0xFF	; 255
     576:	9a e0       	ldi	r25, 0x0A	; 10
     578:	89 16       	cp	r8, r25
     57a:	91 04       	cpc	r9, r1
     57c:	2c f0       	brlt	.+10     	; 0x588 <ui2a+0xa4>
     57e:	a1 14       	cp	r10, r1
     580:	b1 04       	cpc	r11, r1
     582:	21 f4       	brne	.+8      	; 0x58c <ui2a+0xa8>
     584:	87 e5       	ldi	r24, 0x57	; 87
     586:	03 c0       	rjmp	.+6      	; 0x58e <ui2a+0xaa>
     588:	80 e3       	ldi	r24, 0x30	; 48
     58a:	01 c0       	rjmp	.+2      	; 0x58e <ui2a+0xaa>
     58c:	87 e3       	ldi	r24, 0x37	; 55
     58e:	38 0f       	add	r19, r24
     590:	d7 01       	movw	r26, r14
     592:	3c 93       	st	X, r19
     594:	bf ef       	ldi	r27, 0xFF	; 255
     596:	cb 1a       	sub	r12, r27
     598:	db 0a       	sbc	r13, r27
     59a:	30 97       	sbiw	r30, 0x00	; 0
     59c:	79 f6       	brne	.-98     	; 0x53c <ui2a+0x58>
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <ui2a+0xbe>
     5a0:	a7 01       	movw	r20, r14
     5a2:	fa 01       	movw	r30, r20
     5a4:	10 82       	st	Z, r1
     5a6:	0c c0       	rjmp	.+24     	; 0x5c0 <ui2a+0xdc>
     5a8:	20 5d       	subi	r18, 0xD0	; 208
     5aa:	d7 01       	movw	r26, r14
     5ac:	2c 93       	st	X, r18
     5ae:	f9 cf       	rjmp	.-14     	; 0x5a2 <ui2a+0xbe>
     5b0:	a7 01       	movw	r20, r14
     5b2:	4f 5f       	subi	r20, 0xFF	; 255
     5b4:	5f 4f       	sbci	r21, 0xFF	; 255
     5b6:	ba e0       	ldi	r27, 0x0A	; 10
     5b8:	8b 16       	cp	r8, r27
     5ba:	91 04       	cpc	r9, r1
     5bc:	ac f3       	brlt	.-22     	; 0x5a8 <ui2a+0xc4>
     5be:	df cf       	rjmp	.-66     	; 0x57e <ui2a+0x9a>
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ff 90       	pop	r15
     5ca:	ef 90       	pop	r14
     5cc:	df 90       	pop	r13
     5ce:	cf 90       	pop	r12
     5d0:	bf 90       	pop	r11
     5d2:	af 90       	pop	r10
     5d4:	9f 90       	pop	r9
     5d6:	8f 90       	pop	r8
     5d8:	08 95       	ret

000005da <putchw>:
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	6c 01       	movw	r12, r24
     5f2:	5b 01       	movw	r10, r22
     5f4:	21 11       	cpse	r18, r1
     5f6:	04 c0       	rjmp	.+8      	; 0x600 <putchw+0x26>
     5f8:	68 94       	set
     5fa:	99 24       	eor	r9, r9
     5fc:	95 f8       	bld	r9, 5
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <putchw+0x2e>
     600:	0f 2e       	mov	r0, r31
     602:	f0 e3       	ldi	r31, 0x30	; 48
     604:	9f 2e       	mov	r9, r31
     606:	f0 2d       	mov	r31, r0
     608:	78 01       	movw	r14, r16
     60a:	8f ef       	ldi	r24, 0xFF	; 255
     60c:	e8 1a       	sub	r14, r24
     60e:	f8 0a       	sbc	r15, r24
     610:	f8 01       	movw	r30, r16
     612:	60 81       	ld	r22, Z
     614:	66 23       	and	r22, r22
     616:	49 f1       	breq	.+82     	; 0x66a <putchw+0x90>
     618:	14 16       	cp	r1, r20
     61a:	15 06       	cpc	r1, r21
     61c:	64 f5       	brge	.+88     	; 0x676 <putchw+0x9c>
     61e:	f7 01       	movw	r30, r14
     620:	ca 01       	movw	r24, r20
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	21 91       	ld	r18, Z+
     626:	22 23       	and	r18, r18
     628:	d1 f0       	breq	.+52     	; 0x65e <putchw+0x84>
     62a:	ac 01       	movw	r20, r24
     62c:	89 2b       	or	r24, r25
     62e:	c1 f7       	brne	.-16     	; 0x620 <putchw+0x46>
     630:	22 c0       	rjmp	.+68     	; 0x676 <putchw+0x9c>
     632:	69 2d       	mov	r22, r9
     634:	c6 01       	movw	r24, r12
     636:	f5 01       	movw	r30, r10
     638:	09 95       	icall
     63a:	21 97       	sbiw	r28, 0x01	; 1
     63c:	ce 01       	movw	r24, r28
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	18 16       	cp	r1, r24
     642:	19 06       	cpc	r1, r25
     644:	b4 f3       	brlt	.-20     	; 0x632 <putchw+0x58>
     646:	f8 01       	movw	r30, r16
     648:	60 81       	ld	r22, Z
     64a:	66 23       	and	r22, r22
     64c:	b9 f0       	breq	.+46     	; 0x67c <putchw+0xa2>
     64e:	e7 01       	movw	r28, r14
     650:	c6 01       	movw	r24, r12
     652:	f5 01       	movw	r30, r10
     654:	09 95       	icall
     656:	69 91       	ld	r22, Y+
     658:	61 11       	cpse	r22, r1
     65a:	fa cf       	rjmp	.-12     	; 0x650 <putchw+0x76>
     65c:	0f c0       	rjmp	.+30     	; 0x67c <putchw+0xa2>
     65e:	ea 01       	movw	r28, r20
     660:	22 97       	sbiw	r28, 0x02	; 2
     662:	18 16       	cp	r1, r24
     664:	19 06       	cpc	r1, r25
     666:	2c f3       	brlt	.-54     	; 0x632 <putchw+0x58>
     668:	f2 cf       	rjmp	.-28     	; 0x64e <putchw+0x74>
     66a:	ea 01       	movw	r28, r20
     66c:	21 97       	sbiw	r28, 0x01	; 1
     66e:	14 16       	cp	r1, r20
     670:	15 06       	cpc	r1, r21
     672:	fc f2       	brlt	.-66     	; 0x632 <putchw+0x58>
     674:	03 c0       	rjmp	.+6      	; 0x67c <putchw+0xa2>
     676:	f8 01       	movw	r30, r16
     678:	60 81       	ld	r22, Z
     67a:	e9 cf       	rjmp	.-46     	; 0x64e <putchw+0x74>
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	08 95       	ret

00000694 <tfp_format>:
	while ((ch= *bf++))
		putf(putp,ch);
	}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
	{
     694:	2f 92       	push	r2
     696:	3f 92       	push	r3
     698:	4f 92       	push	r4
     69a:	5f 92       	push	r5
     69c:	6f 92       	push	r6
     69e:	7f 92       	push	r7
     6a0:	8f 92       	push	r8
     6a2:	9f 92       	push	r9
     6a4:	af 92       	push	r10
     6a6:	bf 92       	push	r11
     6a8:	cf 92       	push	r12
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	60 97       	sbiw	r28, 0x10	; 16
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	4c 01       	movw	r8, r24
     6ca:	5b 01       	movw	r10, r22
     6cc:	6a 01       	movw	r12, r20
     6ce:	89 01       	movw	r16, r18
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     6d0:	21 2c       	mov	r2, r1
     6d2:	9e 01       	movw	r18, r28
     6d4:	2f 5f       	subi	r18, 0xFF	; 255
     6d6:	3f 4f       	sbci	r19, 0xFF	; 255
     6d8:	3e 87       	std	Y+14, r19	; 0x0e
     6da:	2d 87       	std	Y+13, r18	; 0x0d
     6dc:	51 2c       	mov	r5, r1
     6de:	31 2c       	mov	r3, r1

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
     6e0:	ce 01       	movw	r24, r28
     6e2:	02 96       	adiw	r24, 0x02	; 2
     6e4:	98 8b       	std	Y+16, r25	; 0x10
     6e6:	8f 87       	std	Y+15, r24	; 0x0f
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     6e8:	eb c0       	rjmp	.+470    	; 0x8c0 <tfp_format+0x22c>
		if (ch!='%') 
     6ea:	65 32       	cpi	r22, 0x25	; 37
     6ec:	39 f0       	breq	.+14     	; 0x6fc <tfp_format+0x68>
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     6ee:	9f ef       	ldi	r25, 0xFF	; 255
     6f0:	c9 1a       	sub	r12, r25
     6f2:	d9 0a       	sbc	r13, r25
		if (ch!='%') 
			putf(putp,ch);
     6f4:	c4 01       	movw	r24, r8
     6f6:	f5 01       	movw	r30, r10
     6f8:	09 95       	icall
     6fa:	e2 c0       	rjmp	.+452    	; 0x8c0 <tfp_format+0x22c>
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
     6fc:	f6 01       	movw	r30, r12
     6fe:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
     700:	80 33       	cpi	r24, 0x30	; 48
     702:	29 f0       	breq	.+10     	; 0x70e <tfp_format+0x7a>
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
     704:	f2 e0       	ldi	r31, 0x02	; 2
     706:	cf 0e       	add	r12, r31
     708:	d1 1c       	adc	r13, r1

	while ((ch=*(fmt++))) {
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
     70a:	41 2c       	mov	r4, r1
     70c:	08 c0       	rjmp	.+16     	; 0x71e <tfp_format+0x8a>
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
     70e:	f6 01       	movw	r30, r12
     710:	82 81       	ldd	r24, Z+2	; 0x02
     712:	96 01       	movw	r18, r12
     714:	2d 5f       	subi	r18, 0xFD	; 253
     716:	3f 4f       	sbci	r19, 0xFF	; 255
     718:	69 01       	movw	r12, r18
				lz=1;
     71a:	44 24       	eor	r4, r4
     71c:	43 94       	inc	r4
				}
			if (ch>='0' && ch<='9') {
     71e:	90 ed       	ldi	r25, 0xD0	; 208
     720:	98 0f       	add	r25, r24
     722:	9a 30       	cpi	r25, 0x0A	; 10
     724:	a0 f5       	brcc	.+104    	; 0x78e <tfp_format+0xfa>
     726:	a6 01       	movw	r20, r12
     728:	e5 2c       	mov	r14, r5
     72a:	f3 2c       	mov	r15, r3
     72c:	11 c0       	rjmp	.+34     	; 0x750 <tfp_format+0xbc>
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
     72e:	c7 01       	movw	r24, r14
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	ee 0c       	add	r14, r14
     736:	ff 1c       	adc	r15, r15
     738:	ee 0c       	add	r14, r14
     73a:	ff 1c       	adc	r15, r15
     73c:	ee 0c       	add	r14, r14
     73e:	ff 1c       	adc	r15, r15
     740:	e8 0e       	add	r14, r24
     742:	f9 1e       	adc	r15, r25
     744:	e2 0e       	add	r14, r18
     746:	f3 1e       	adc	r15, r19
		ch=*p++;
     748:	f6 01       	movw	r30, r12
     74a:	80 81       	ld	r24, Z
     74c:	4f 5f       	subi	r20, 0xFF	; 255
     74e:	5f 4f       	sbci	r21, 0xFF	; 255
     750:	6a 01       	movw	r12, r20
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
     752:	90 ed       	ldi	r25, 0xD0	; 208
     754:	98 0f       	add	r25, r24
     756:	9a 30       	cpi	r25, 0x0A	; 10
     758:	28 f4       	brcc	.+10     	; 0x764 <tfp_format+0xd0>
		return ch-'0';
     75a:	28 2f       	mov	r18, r24
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	20 53       	subi	r18, 0x30	; 48
     760:	31 09       	sbc	r19, r1
     762:	11 c0       	rjmp	.+34     	; 0x786 <tfp_format+0xf2>
	else if (ch>='a' && ch<='f')
     764:	9f e9       	ldi	r25, 0x9F	; 159
     766:	98 0f       	add	r25, r24
     768:	96 30       	cpi	r25, 0x06	; 6
     76a:	28 f4       	brcc	.+10     	; 0x776 <tfp_format+0xe2>
		return ch-'a'+10;
     76c:	28 2f       	mov	r18, r24
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	27 55       	subi	r18, 0x57	; 87
     772:	31 09       	sbc	r19, r1
     774:	08 c0       	rjmp	.+16     	; 0x786 <tfp_format+0xf2>
	else if (ch>='A' && ch<='F')
     776:	9f eb       	ldi	r25, 0xBF	; 191
     778:	98 0f       	add	r25, r24
     77a:	96 30       	cpi	r25, 0x06	; 6
     77c:	50 f4       	brcc	.+20     	; 0x792 <tfp_format+0xfe>
		return ch-'A'+10;
     77e:	28 2f       	mov	r18, r24
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	27 53       	subi	r18, 0x37	; 55
     784:	31 09       	sbc	r19, r1
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
     786:	2b 30       	cpi	r18, 0x0B	; 11
     788:	31 05       	cpc	r19, r1
     78a:	88 f2       	brcs	.-94     	; 0x72e <tfp_format+0x9a>
     78c:	02 c0       	rjmp	.+4      	; 0x792 <tfp_format+0xfe>
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
     78e:	e5 2c       	mov	r14, r5
     790:	f3 2c       	mov	r15, r3
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
     792:	83 36       	cpi	r24, 0x63	; 99
     794:	09 f4       	brne	.+2      	; 0x798 <tfp_format+0x104>
     796:	76 c0       	rjmp	.+236    	; 0x884 <tfp_format+0x1f0>
     798:	50 f4       	brcc	.+20     	; 0x7ae <tfp_format+0x11a>
     79a:	85 32       	cpi	r24, 0x25	; 37
     79c:	09 f4       	brne	.+2      	; 0x7a0 <tfp_format+0x10c>
     79e:	8c c0       	rjmp	.+280    	; 0x8b8 <tfp_format+0x224>
     7a0:	88 35       	cpi	r24, 0x58	; 88
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <tfp_format+0x112>
     7a4:	50 c0       	rjmp	.+160    	; 0x846 <tfp_format+0x1b2>
     7a6:	88 23       	and	r24, r24
     7a8:	09 f4       	brne	.+2      	; 0x7ac <tfp_format+0x118>
     7aa:	8e c0       	rjmp	.+284    	; 0x8c8 <tfp_format+0x234>
     7ac:	89 c0       	rjmp	.+274    	; 0x8c0 <tfp_format+0x22c>
     7ae:	83 37       	cpi	r24, 0x73	; 115
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <tfp_format+0x120>
     7b2:	73 c0       	rjmp	.+230    	; 0x89a <tfp_format+0x206>
     7b4:	18 f4       	brcc	.+6      	; 0x7bc <tfp_format+0x128>
     7b6:	84 36       	cpi	r24, 0x64	; 100
     7b8:	11 f1       	breq	.+68     	; 0x7fe <tfp_format+0x16a>
     7ba:	82 c0       	rjmp	.+260    	; 0x8c0 <tfp_format+0x22c>
     7bc:	85 37       	cpi	r24, 0x75	; 117
     7be:	21 f0       	breq	.+8      	; 0x7c8 <tfp_format+0x134>
     7c0:	88 37       	cpi	r24, 0x78	; 120
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <tfp_format+0x132>
     7c4:	40 c0       	rjmp	.+128    	; 0x846 <tfp_format+0x1b2>
     7c6:	7c c0       	rjmp	.+248    	; 0x8c0 <tfp_format+0x22c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
     7c8:	38 01       	movw	r6, r16
     7ca:	f2 e0       	ldi	r31, 0x02	; 2
     7cc:	6f 0e       	add	r6, r31
     7ce:	71 1c       	adc	r7, r1
     7d0:	9e 01       	movw	r18, r28
     7d2:	2f 5f       	subi	r18, 0xFF	; 255
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	45 2d       	mov	r20, r5
     7d8:	53 2d       	mov	r21, r3
     7da:	6a e0       	ldi	r22, 0x0A	; 10
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	f8 01       	movw	r30, r16
     7e0:	80 81       	ld	r24, Z
     7e2:	91 81       	ldd	r25, Z+1	; 0x01
     7e4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <ui2a>
					putchw(putp,putf,w,lz,bf);
     7e8:	8e 01       	movw	r16, r28
     7ea:	0f 5f       	subi	r16, 0xFF	; 255
     7ec:	1f 4f       	sbci	r17, 0xFF	; 255
     7ee:	24 2d       	mov	r18, r4
     7f0:	a7 01       	movw	r20, r14
     7f2:	b5 01       	movw	r22, r10
     7f4:	c4 01       	movw	r24, r8
     7f6:	0e 94 ed 02 	call	0x5da	; 0x5da <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
     7fa:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
     7fc:	61 c0       	rjmp	.+194    	; 0x8c0 <tfp_format+0x22c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
     7fe:	38 01       	movw	r6, r16
     800:	f2 e0       	ldi	r31, 0x02	; 2
     802:	6f 0e       	add	r6, r31
     804:	71 1c       	adc	r7, r1
     806:	f8 01       	movw	r30, r16
     808:	80 81       	ld	r24, Z
     80a:	91 81       	ldd	r25, Z+1	; 0x01
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
     80c:	99 23       	and	r25, r25
     80e:	44 f4       	brge	.+16     	; 0x820 <tfp_format+0x18c>
		num=-num;
     810:	91 95       	neg	r25
     812:	81 95       	neg	r24
     814:	91 09       	sbc	r25, r1
		*bf++ = '-';
     816:	fd e2       	ldi	r31, 0x2D	; 45
     818:	f9 83       	std	Y+1, r31	; 0x01
     81a:	2f 85       	ldd	r18, Y+15	; 0x0f
     81c:	38 89       	ldd	r19, Y+16	; 0x10
     81e:	02 c0       	rjmp	.+4      	; 0x824 <tfp_format+0x190>
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
     820:	2d 85       	ldd	r18, Y+13	; 0x0d
     822:	3e 85       	ldd	r19, Y+14	; 0x0e
		num=-num;
		*bf++ = '-';
		}
	ui2a(num,10,0,bf);
     824:	45 2d       	mov	r20, r5
     826:	53 2d       	mov	r21, r3
     828:	6a e0       	ldi	r22, 0x0A	; 10
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <ui2a>
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
     830:	8e 01       	movw	r16, r28
     832:	0f 5f       	subi	r16, 0xFF	; 255
     834:	1f 4f       	sbci	r17, 0xFF	; 255
     836:	24 2d       	mov	r18, r4
     838:	a7 01       	movw	r20, r14
     83a:	b5 01       	movw	r22, r10
     83c:	c4 01       	movw	r24, r8
     83e:	0e 94 ed 02 	call	0x5da	; 0x5da <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
     842:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
     844:	3d c0       	rjmp	.+122    	; 0x8c0 <tfp_format+0x22c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     846:	38 01       	movw	r6, r16
     848:	22 e0       	ldi	r18, 0x02	; 2
     84a:	62 0e       	add	r6, r18
     84c:	71 1c       	adc	r7, r1
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	52 2d       	mov	r21, r2
     852:	88 35       	cpi	r24, 0x58	; 88
     854:	11 f0       	breq	.+4      	; 0x85a <tfp_format+0x1c6>
     856:	45 2d       	mov	r20, r5
     858:	53 2d       	mov	r21, r3
     85a:	9e 01       	movw	r18, r28
     85c:	2f 5f       	subi	r18, 0xFF	; 255
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	60 e1       	ldi	r22, 0x10	; 16
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	f8 01       	movw	r30, r16
     866:	80 81       	ld	r24, Z
     868:	91 81       	ldd	r25, Z+1	; 0x01
     86a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <ui2a>
					putchw(putp,putf,w,lz,bf);
     86e:	8e 01       	movw	r16, r28
     870:	0f 5f       	subi	r16, 0xFF	; 255
     872:	1f 4f       	sbci	r17, 0xFF	; 255
     874:	24 2d       	mov	r18, r4
     876:	a7 01       	movw	r20, r14
     878:	b5 01       	movw	r22, r10
     87a:	c4 01       	movw	r24, r8
     87c:	0e 94 ed 02 	call	0x5da	; 0x5da <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     880:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
     882:	1e c0       	rjmp	.+60     	; 0x8c0 <tfp_format+0x22c>
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
     884:	78 01       	movw	r14, r16
     886:	f2 e0       	ldi	r31, 0x02	; 2
     888:	ef 0e       	add	r14, r31
     88a:	f1 1c       	adc	r15, r1
     88c:	f8 01       	movw	r30, r16
     88e:	60 81       	ld	r22, Z
     890:	c4 01       	movw	r24, r8
     892:	f5 01       	movw	r30, r10
     894:	09 95       	icall
     896:	87 01       	movw	r16, r14
					break;
     898:	13 c0       	rjmp	.+38     	; 0x8c0 <tfp_format+0x22c>
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
     89a:	38 01       	movw	r6, r16
     89c:	f2 e0       	ldi	r31, 0x02	; 2
     89e:	6f 0e       	add	r6, r31
     8a0:	71 1c       	adc	r7, r1
     8a2:	f8 01       	movw	r30, r16
     8a4:	00 81       	ld	r16, Z
     8a6:	11 81       	ldd	r17, Z+1	; 0x01
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	a7 01       	movw	r20, r14
     8ac:	b5 01       	movw	r22, r10
     8ae:	c4 01       	movw	r24, r8
     8b0:	0e 94 ed 02 	call	0x5da	; 0x5da <putchw>
     8b4:	83 01       	movw	r16, r6
					break;
     8b6:	04 c0       	rjmp	.+8      	; 0x8c0 <tfp_format+0x22c>
				case '%' :
					putf(putp,ch);
     8b8:	65 e2       	ldi	r22, 0x25	; 37
     8ba:	c4 01       	movw	r24, r8
     8bc:	f5 01       	movw	r30, r10
     8be:	09 95       	icall
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     8c0:	f6 01       	movw	r30, r12
     8c2:	60 81       	ld	r22, Z
     8c4:	61 11       	cpse	r22, r1
     8c6:	11 cf       	rjmp	.-478    	; 0x6ea <tfp_format+0x56>
					break;
				}
			}
		}
	abort:;
	}
     8c8:	60 96       	adiw	r28, 0x10	; 16
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	cf 90       	pop	r12
     8e4:	bf 90       	pop	r11
     8e6:	af 90       	pop	r10
     8e8:	9f 90       	pop	r9
     8ea:	8f 90       	pop	r8
     8ec:	7f 90       	pop	r7
     8ee:	6f 90       	pop	r6
     8f0:	5f 90       	pop	r5
     8f2:	4f 90       	pop	r4
     8f4:	3f 90       	pop	r3
     8f6:	2f 90       	pop	r2
     8f8:	08 95       	ret

000008fa <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
     8fa:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <stdout_putf+0x1>
     8fe:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <stdout_putf>
	stdout_putp=putp;
     902:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
     906:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
     90a:	08 95       	ret

0000090c <tfp_printf>:
	}

void tfp_printf(char *fmt, ...)
	{
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	9e 01       	movw	r18, r28
     916:	2b 5f       	subi	r18, 0xFB	; 251
     918:	3f 4f       	sbci	r19, 0xFF	; 255
     91a:	f9 01       	movw	r30, r18
     91c:	41 91       	ld	r20, Z+
     91e:	51 91       	ld	r21, Z+
     920:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     922:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <stdout_putf>
     926:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <stdout_putf+0x1>
     92a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
     92e:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
     932:	0e 94 4a 03 	call	0x694	; 0x694 <tfp_format>
	va_end(va);
	}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <promer>:

//	+---------------------------------------------------------------+
//	|					EEPROM Konfiguration						|
//	+---------------------------------------------------------------+
void promer(unsigned char buffer[])
{
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	ce 51       	subi	r28, 0x1E	; 30
     946:	d1 40       	sbci	r29, 0x01	; 1
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
     952:	8c 01       	movw	r16, r24
	unsigned char fail = 0;
	
	unsigned char modus = 0;
	unsigned char loop = 0;

	display(buffer, 0, 1);			// Daten ([PROM]) auf Display ausgeben
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 61 06 	call	0xcc2	; 0xcc2 <display>
	uart_setstring(buffer, 1);		// Daten ([PROM]) auf Konsole ausgeben
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	c8 01       	movw	r24, r16
     960:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
						{
							rom_block(eeFAIL, mem, sizeof(eeFAIL));			// [FAIL] Kommando von EEPROM in lokalen Speicher laden
							uart_setstring(mem, 1);							// [FAIL] Kommando über UART senden
							
							loop = 0;										// Loop Variable Rücksetzten
							OUTPUT = 0x02;									// Fehler in Kommandosequenz anzeigen
     964:	68 94       	set
     966:	99 24       	eor	r9, r9
     968:	91 f8       	bld	r9, 1
						{
							rom_block(eeFAIL, mem, sizeof(eeFAIL));			// [FAIL] Kommando von EEPROM in lokalen Speicher laden
							uart_setstring(mem, 1);							// [FAIL] Kommando über UART senden
				
							loop = 0;										// Loop Variable Rücksetzten
							OUTPUT = 0x04;									// Fehler in Kommandosequenz anzeigen
     96a:	68 94       	set
     96c:	aa 24       	eor	r10, r10
     96e:	a2 f8       	bld	r10, 2
						{
							rom_block(eeFAIL, mem, sizeof(eeFAIL));			// [FAIL] Kommando von EEPROM in lokalen Speicher laden
							uart_setstring(mem, 1);							// [FAIL] Kommando über UART senden
														
							loop = 0;										// Loop Variable Rücksetzten
							OUTPUT = 0x08;									// Fehler in Kommandosequenz anzeigen
     970:	68 94       	set
     972:	88 24       	eor	r8, r8
     974:	83 f8       	bld	r8, 3
							{
								rom_block(eeFAIL, mem, sizeof(eeFAIL));		// [FAIL] Kommando von EEPROM in lokalen Speicher laden
								uart_setstring(mem, 1);						// [FAIL] Kommando über UART senden
								
								loop = 0;									// Loop Variable Rücksetzten
								OUTPUT = 0x05;								// Fehler in Kommandosequenz anzeigen
     976:	0f 2e       	mov	r0, r31
     978:	f5 e0       	ldi	r31, 0x05	; 5
     97a:	7f 2e       	mov	r7, r31
     97c:	f0 2d       	mov	r31, r0
     97e:	28 c1       	rjmp	.+592    	; 0xbd0 <promer+0x294>
			case 1	:	rom_block(eeSETADDR, mem, sizeof(eeSETADDR));		// [ADDR] Kommando von EEPROM in lokalen Speicher laden
						uart_getcmd(cmd);									// Warten bis Kommando über UART empfangen
			
						// Überprüfen ob empfangene Daten gleich dem erwarteten Kommando
						if(!memcmp(cmd, mem, sizeof(eeSETADDR) - 1))	{
							rom_block(eeGETADDR, mem, sizeof(eeGETADDR));	// {ADDR} Kommando von EEPROM in lokalen Speicher laden
     980:	47 e0       	ldi	r20, 0x07	; 7
     982:	be 01       	movw	r22, r28
     984:	65 5f       	subi	r22, 0xF5	; 245
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	8a e2       	ldi	r24, 0x2A	; 42
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
							uart_setstring(mem, 1);							// {ADDR} Kommando über UART senden
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	ce 01       	movw	r24, r28
     994:	0b 96       	adiw	r24, 0x0b	; 11
     996:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
				
							uart_getarg(arg);								// Warten bis Argument über UART empfangen
     99a:	ce 01       	movw	r24, r28
     99c:	45 96       	adiw	r24, 0x15	; 21
     99e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <uart_getarg>
							addr = arg[0];									// Aus empfangenem Argument Adresse extrahieren
     9a2:	cd 88       	ldd	r12, Y+21	; 0x15
							OUTPUT = 0x02;									// Fehler in Kommandosequenz anzeigen
						}
			break;
			
			// Wortadresseabfrage (7 Bit Adresse)
			case 2	:	rom_block(eeSETWORD, mem, sizeof(eeSETWORD));		// [WORD] Kommando von EEPROM in lokalen Speicher laden
     9a4:	47 e0       	ldi	r20, 0x07	; 7
     9a6:	be 01       	movw	r22, r28
     9a8:	65 5f       	subi	r22, 0xF5	; 245
     9aa:	7f 4f       	sbci	r23, 0xFF	; 255
     9ac:	83 e2       	ldi	r24, 0x23	; 35
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
						uart_getcmd(cmd);									// Warten bis Kommando über UART empfangen
     9b4:	ce 01       	movw	r24, r28
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_getcmd>
			
						// Überprüfen ob empfangene Daten gleich dem erwarteten Kommando
						if(!memcmp(cmd, mem, sizeof(eeSETWORD) - 1))	{
     9bc:	46 e0       	ldi	r20, 0x06	; 6
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	be 01       	movw	r22, r28
     9c2:	65 5f       	subi	r22, 0xF5	; 245
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
     9c6:	ce 01       	movw	r24, r28
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	0e 94 e7 09 	call	0x13ce	; 0x13ce <memcmp>
     9ce:	89 2b       	or	r24, r25
     9d0:	81 f0       	breq	.+32     	; 0x9f2 <promer+0xb6>
     9d2:	3a c0       	rjmp	.+116    	; 0xa48 <promer+0x10c>
							
							loop++;											// Loop Variable inkrementieren
						}
						else
						{
							rom_block(eeFAIL, mem, sizeof(eeFAIL));			// [FAIL] Kommando von EEPROM in lokalen Speicher laden
     9d4:	47 e0       	ldi	r20, 0x07	; 7
     9d6:	be 01       	movw	r22, r28
     9d8:	65 5f       	subi	r22, 0xF5	; 245
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	86 e4       	ldi	r24, 0x46	; 70
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
							uart_setstring(mem, 1);							// [FAIL] Kommando über UART senden
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	ce 01       	movw	r24, r28
     9e8:	0b 96       	adiw	r24, 0x0b	; 11
     9ea:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
							
							loop = 0;										// Loop Variable Rücksetzten
							OUTPUT = 0x02;									// Fehler in Kommandosequenz anzeigen
     9ee:	95 ba       	out	0x15, r9	; 21
     9f0:	ef c0       	rjmp	.+478    	; 0xbd0 <promer+0x294>
			case 2	:	rom_block(eeSETWORD, mem, sizeof(eeSETWORD));		// [WORD] Kommando von EEPROM in lokalen Speicher laden
						uart_getcmd(cmd);									// Warten bis Kommando über UART empfangen
			
						// Überprüfen ob empfangene Daten gleich dem erwarteten Kommando
						if(!memcmp(cmd, mem, sizeof(eeSETWORD) - 1))	{
							rom_block(eeGETWORD, mem, sizeof(eeGETWORD));	// {WORD} Kommando von EEPROM in lokalen Speicher laden
     9f2:	47 e0       	ldi	r20, 0x07	; 7
     9f4:	be 01       	movw	r22, r28
     9f6:	65 5f       	subi	r22, 0xF5	; 245
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	8c e1       	ldi	r24, 0x1C	; 28
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
							uart_setstring(mem, 1);							// {WORD} Kommando über UART senden
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	ce 01       	movw	r24, r28
     a06:	0b 96       	adiw	r24, 0x0b	; 11
     a08:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
				
							uart_getarg(arg);								// Warten bis Argument über UART empfangen
     a0c:	ce 01       	movw	r24, r28
     a0e:	45 96       	adiw	r24, 0x15	; 21
     a10:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <uart_getarg>
							word = arg[0];									// Aus empfangenem Argument Wortadresse extrahieren
     a14:	dd 88       	ldd	r13, Y+21	; 0x15
							OUTPUT = 0x04;									// Fehler in Kommandosequenz anzeigen
						}
			break;
			
			// Modusabfrage (Lesen/Schreiben)
			case 3	:	rom_block(eeREAD, mem, sizeof(eeREAD));				// [READ] Kommando von EEPROM in lokalen Speicher laden
     a16:	47 e0       	ldi	r20, 0x07	; 7
     a18:	be 01       	movw	r22, r28
     a1a:	65 5f       	subi	r22, 0xF5	; 245
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	85 e1       	ldi	r24, 0x15	; 21
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
						uart_getcmd(cmd);									// Warten bis Kommando über UART empfangen
     a26:	ce 01       	movw	r24, r28
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_getcmd>
			
						// Überprüfen ob empfangene Daten gleich dem erwarteten Kommando
						if(!memcmp(cmd, mem, sizeof(eeREAD) - 1))	{
     a2e:	46 e0       	ldi	r20, 0x06	; 6
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	be 01       	movw	r22, r28
     a34:	65 5f       	subi	r22, 0xF5	; 245
     a36:	7f 4f       	sbci	r23, 0xFF	; 255
     a38:	ce 01       	movw	r24, r28
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <memcmp>
     a40:	89 2b       	or	r24, r25
     a42:	09 f4       	brne	.+2      	; 0xa46 <promer+0x10a>
     a44:	28 c1       	rjmp	.+592    	; 0xc96 <promer+0x35a>
     a46:	0f c0       	rjmp	.+30     	; 0xa66 <promer+0x12a>
				
							loop++;											// Loop Variable inkrementieren
						}
						else
						{
							rom_block(eeFAIL, mem, sizeof(eeFAIL));			// [FAIL] Kommando von EEPROM in lokalen Speicher laden
     a48:	47 e0       	ldi	r20, 0x07	; 7
     a4a:	be 01       	movw	r22, r28
     a4c:	65 5f       	subi	r22, 0xF5	; 245
     a4e:	7f 4f       	sbci	r23, 0xFF	; 255
     a50:	86 e4       	ldi	r24, 0x46	; 70
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
							uart_setstring(mem, 1);							// [FAIL] Kommando über UART senden
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	ce 01       	movw	r24, r28
     a5c:	0b 96       	adiw	r24, 0x0b	; 11
     a5e:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
				
							loop = 0;										// Loop Variable Rücksetzten
							OUTPUT = 0x04;									// Fehler in Kommandosequenz anzeigen
     a62:	a5 ba       	out	0x15, r10	; 21
     a64:	b5 c0       	rjmp	.+362    	; 0xbd0 <promer+0x294>
							modus = 10;										// EEPROM Lesemodus aktiv			
							loop++;											// Loop Variable inkrementieren
						}
						else
						{
							rom_block(eeWRITE, mem, sizeof(eeWRITE));		// [SAVE] Kommando von EEPROM in lokalen Speicher laden
     a66:	47 e0       	ldi	r20, 0x07	; 7
     a68:	be 01       	movw	r22, r28
     a6a:	65 5f       	subi	r22, 0xF5	; 245
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	8e e0       	ldi	r24, 0x0E	; 14
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
							
							if(!memcmp(cmd, mem, sizeof(eeREAD) - 1))	{
     a76:	46 e0       	ldi	r20, 0x06	; 6
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	be 01       	movw	r22, r28
     a7c:	65 5f       	subi	r22, 0xF5	; 245
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	ce 01       	movw	r24, r28
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	0e 94 e7 09 	call	0x13ce	; 0x13ce <memcmp>
     a88:	89 2b       	or	r24, r25
     a8a:	09 f4       	brne	.+2      	; 0xa8e <promer+0x152>
     a8c:	ef c0       	rjmp	.+478    	; 0xc6c <promer+0x330>
								modus = 20;									// EEPROM Schreibmodus aktiv
								loop++;										// Loop Variable inkrementieren
							}
							else
							{
								rom_block(eeFAIL, mem, sizeof(eeFAIL));		// [FAIL] Kommando von EEPROM in lokalen Speicher laden
     a8e:	47 e0       	ldi	r20, 0x07	; 7
     a90:	be 01       	movw	r22, r28
     a92:	65 5f       	subi	r22, 0xF5	; 245
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	86 e4       	ldi	r24, 0x46	; 70
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
								uart_setstring(mem, 1);						// [FAIL] Kommando über UART senden
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	ce 01       	movw	r24, r28
     aa2:	0b 96       	adiw	r24, 0x0b	; 11
     aa4:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
								
								loop = 0;									// Loop Variable Rücksetzten
								OUTPUT = 0x05;								// Fehler in Kommandosequenz anzeigen
     aa8:	75 ba       	out	0x15, r7	; 21
     aaa:	92 c0       	rjmp	.+292    	; 0xbd0 <promer+0x294>
						if(datasize > 0)
						{
							// Überprüfen ob Lesemodus aktiv
							if(modus == 10)
							{
								rom_block(eeSETDATA, mem, sizeof(eeSETDATA));	// [XSET] Kommando von EEPROM in lokalen Speicher laden
     aac:	47 e0       	ldi	r20, 0x07	; 7
     aae:	be 01       	movw	r22, r28
     ab0:	65 5f       	subi	r22, 0xF5	; 245
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	8f e3       	ldi	r24, 0x3F	; 63
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
								uart_setstring(mem, 1);							// [XSET] Kommando über UART Senden
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	ce 01       	movw	r24, r28
     ac0:	0b 96       	adiw	r24, 0x0b	; 11
     ac2:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
								
								// Überprüfen ob Datenwort = 1 Byte
								if(datasize == 1)
     ac6:	11 30       	cpi	r17, 0x01	; 1
     ac8:	21 f4       	brne	.+8      	; 0xad2 <promer+0x196>
								{
									//i2c_eeprom_read_byte(addr, word, &data[0]);	// Byte aus EEPROM lesen
									uart_setchar(data[0]);							// Byte über UART senden	
     aca:	8f 8d       	ldd	r24, Y+31	; 0x1f
     acc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <promer+0x1a0>
								}
								else
								{
									//i2c_eeprom_read_block(addr, word, &data[0], datasize);	// Block aus EEPROM lesen
									uart_setstring(&data[0], 1);								// Block über UART senden
     ad2:	61 e0       	ldi	r22, 0x01	; 1
     ad4:	ce 01       	movw	r24, r28
     ad6:	4f 96       	adiw	r24, 0x1f	; 31
     ad8:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
								}
								
								rom_block(eeDONE, mem, sizeof(eeDONE));			// [DONE] Kommando von EEPROM in lokalen Speicher laden
     adc:	47 e0       	ldi	r20, 0x07	; 7
     ade:	be 01       	movw	r22, r28
     ae0:	65 5f       	subi	r22, 0xF5	; 245
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255
     ae4:	8d e4       	ldi	r24, 0x4D	; 77
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
								uart_setstring(mem, 1);							// [DONE] Kommando über UART Senden
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	ce 01       	movw	r24, r28
     af0:	0b 96       	adiw	r24, 0x0b	; 11
     af2:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
								uart_setstring(mem, 1);							// [DONE] Kommando über UART Senden
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	ce 01       	movw	r24, r28
     afa:	0b 96       	adiw	r24, 0x0b	; 11
     afc:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
     b00:	67 c0       	rjmp	.+206    	; 0xbd0 <promer+0x294>
							}
							// Überprüfen ob Schreibmodus aktiv
							else if(modus == 20)
							{
								rom_block(eeGETDATA, mem, sizeof(eeGETDATA));	// {XGET} Kommando von EEPROM in lokalen Speicher laden
     b02:	47 e0       	ldi	r20, 0x07	; 7
     b04:	be 01       	movw	r22, r28
     b06:	65 5f       	subi	r22, 0xF5	; 245
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	88 e3       	ldi	r24, 0x38	; 56
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
								uart_setstring(mem, 1);							// {XGET} Kommando über UART Senden
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	ce 01       	movw	r24, r28
     b16:	0b 96       	adiw	r24, 0x0b	; 11
     b18:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
								
								// Überprüfen ob Datenwort = 1 Byte
								if(datasize == 1)
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	b8 12       	cpse	r11, r24
     b20:	0b c0       	rjmp	.+22     	; 0xb38 <promer+0x1fc>
								{
									uart_fetchchar(&data[0]);							// Byte über UART empfangen
     b22:	ce 01       	movw	r24, r28
     b24:	4f 96       	adiw	r24, 0x1f	; 31
     b26:	0e 94 c9 08 	call	0x1192	; 0x1192 <uart_fetchchar>
									fail = i2c_eeprom_write_byte(addr, word, data[0]);	// Byte in EEPROM schreiben
     b2a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     b2c:	6d 2d       	mov	r22, r13
     b2e:	8c 2d       	mov	r24, r12
     b30:	0e 94 6f 00 	call	0xde	; 0xde <i2c_eeprom_write_byte>
     b34:	18 2f       	mov	r17, r24
     b36:	1d c0       	rjmp	.+58     	; 0xb72 <promer+0x236>
     b38:	8e 01       	movw	r16, r28
     b3a:	01 5e       	subi	r16, 0xE1	; 225
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
     b3e:	ee 24       	eor	r14, r14
     b40:	ea 94       	dec	r14
     b42:	eb 0c       	add	r14, r11
     b44:	f1 2c       	mov	r15, r1
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	e8 1a       	sub	r14, r24
     b4a:	f8 0a       	sbc	r15, r24
     b4c:	e0 0e       	add	r14, r16
     b4e:	f1 1e       	adc	r15, r17
								}
								else
								{
									for(unsigned char i=0; i < datasize; i++)
										uart_fetchchar(&data[i]);
     b50:	c8 01       	movw	r24, r16
     b52:	0e 94 c9 08 	call	0x1192	; 0x1192 <uart_fetchchar>
     b56:	0f 5f       	subi	r16, 0xFF	; 255
     b58:	1f 4f       	sbci	r17, 0xFF	; 255
									uart_fetchchar(&data[0]);							// Byte über UART empfangen
									fail = i2c_eeprom_write_byte(addr, word, data[0]);	// Byte in EEPROM schreiben
								}
								else
								{
									for(unsigned char i=0; i < datasize; i++)
     b5a:	e0 16       	cp	r14, r16
     b5c:	f1 06       	cpc	r15, r17
     b5e:	c1 f7       	brne	.-16     	; 0xb50 <promer+0x214>
										uart_fetchchar(&data[i]);
									
									fail = i2c_eeprom_write_block(addr, word, &data[0], datasize);
     b60:	2b 2d       	mov	r18, r11
     b62:	ae 01       	movw	r20, r28
     b64:	41 5e       	subi	r20, 0xE1	; 225
     b66:	5f 4f       	sbci	r21, 0xFF	; 255
     b68:	6d 2d       	mov	r22, r13
     b6a:	8c 2d       	mov	r24, r12
     b6c:	0e 94 40 01 	call	0x280	; 0x280 <i2c_eeprom_write_block>
     b70:	18 2f       	mov	r17, r24
								}
									i2c_eeprom_read_block(addr, word, &data[0], datasize);
     b72:	2b 2d       	mov	r18, r11
     b74:	ae 01       	movw	r20, r28
     b76:	41 5e       	subi	r20, 0xE1	; 225
     b78:	5f 4f       	sbci	r21, 0xFF	; 255
     b7a:	6d 2d       	mov	r22, r13
     b7c:	8c 2d       	mov	r24, r12
     b7e:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_eeprom_read_block>
								
								if(fail == 0xFF)
     b82:	1f 3f       	cpi	r17, 0xFF	; 255
     b84:	49 f4       	brne	.+18     	; 0xb98 <promer+0x25c>
									rom_block(eeDONE, mem, sizeof(eeDONE));		// [DONE] Kommando von EEPROM in lokalen Speicher laden
     b86:	47 e0       	ldi	r20, 0x07	; 7
     b88:	be 01       	movw	r22, r28
     b8a:	65 5f       	subi	r22, 0xF5	; 245
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
     b8e:	8d e4       	ldi	r24, 0x4D	; 77
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
     b96:	08 c0       	rjmp	.+16     	; 0xba8 <promer+0x26c>
								else
									rom_block(eeFAIL, mem, sizeof(eeFAIL));		// [FAIL] Kommando von EEPROM in lokalen Speicher laden
     b98:	47 e0       	ldi	r20, 0x07	; 7
     b9a:	be 01       	movw	r22, r28
     b9c:	65 5f       	subi	r22, 0xF5	; 245
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	86 e4       	ldi	r24, 0x46	; 70
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
								uart_setstring(mem, 1);							// [DONE]/[FAIL] Kommando über UART Senden
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	ce 01       	movw	r24, r28
     bac:	0b 96       	adiw	r24, 0x0b	; 11
     bae:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
     bb2:	0e c0       	rjmp	.+28     	; 0xbd0 <promer+0x294>
							}
							
						}
						else
						{
							rom_block(eeFAIL, mem, sizeof(eeFAIL));			// [FAIL] Kommando von EEPROM in lokalen Speicher laden
     bb4:	47 e0       	ldi	r20, 0x07	; 7
     bb6:	be 01       	movw	r22, r28
     bb8:	65 5f       	subi	r22, 0xF5	; 245
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	86 e4       	ldi	r24, 0x46	; 70
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
							uart_setstring(mem, 1);							// [FAIL] Kommando über UART senden
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	ce 01       	movw	r24, r28
     bc8:	0b 96       	adiw	r24, 0x0b	; 11
     bca:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
														
							loop = 0;										// Loop Variable Rücksetzten
							OUTPUT = 0x08;									// Fehler in Kommandosequenz anzeigen
     bce:	85 ba       	out	0x15, r8	; 21
						datasize = 0;
						
			break;
			
			// Initialisierungsfall (Startbedingung)
			default	:	OUTPUT = 0x00;									// Ausgabe PORTC (LEDs) auf LOW
     bd0:	15 ba       	out	0x15, r1	; 21
						rom_block(eeMODE0, mem, sizeof(eeMODE0));		// [PROM] Kommando von EEPROM in lokalen Speicher laden
     bd2:	47 e0       	ldi	r20, 0x07	; 7
     bd4:	be 01       	movw	r22, r28
     bd6:	65 5f       	subi	r22, 0xF5	; 245
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	82 e6       	ldi	r24, 0x62	; 98
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
						uart_getcmd(cmd);								// Warten bis Kommando über UART empfangen
     be2:	ce 01       	movw	r24, r28
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_getcmd>
						
						// Überprüfen ob empfangene Daten gleich dem erwarteten Kommando
						if(!memcmp(cmd, mem, sizeof(eeMODE0) - 1))	{
     bea:	46 e0       	ldi	r20, 0x06	; 6
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	be 01       	movw	r22, r28
     bf0:	65 5f       	subi	r22, 0xF5	; 245
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	ce 01       	movw	r24, r28
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <memcmp>
     bfc:	89 2b       	or	r24, r25
     bfe:	31 f5       	brne	.+76     	; 0xc4c <promer+0x310>
							rom_block(eeDONE, mem, sizeof(eeDONE));		// [DONE] Kommando von EEPROM in lokalen Speicher laden
     c00:	47 e0       	ldi	r20, 0x07	; 7
     c02:	be 01       	movw	r22, r28
     c04:	65 5f       	subi	r22, 0xF5	; 245
     c06:	7f 4f       	sbci	r23, 0xFF	; 255
     c08:	8d e4       	ldi	r24, 0x4D	; 77
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
							uart_setstring(mem, 1);						// [DONE] Kommando über UART senden
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	ce 01       	movw	r24, r28
     c14:	0b 96       	adiw	r24, 0x0b	; 11
     c16:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
	while(1)
	{	
		switch(loop)
		{	
			// Adressabfrage (7 Bit Adresse)
			case 1	:	rom_block(eeSETADDR, mem, sizeof(eeSETADDR));		// [ADDR] Kommando von EEPROM in lokalen Speicher laden
     c1a:	47 e0       	ldi	r20, 0x07	; 7
     c1c:	be 01       	movw	r22, r28
     c1e:	65 5f       	subi	r22, 0xF5	; 245
     c20:	7f 4f       	sbci	r23, 0xFF	; 255
     c22:	81 e3       	ldi	r24, 0x31	; 49
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
						uart_getcmd(cmd);									// Warten bis Kommando über UART empfangen
     c2a:	ce 01       	movw	r24, r28
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	0e 94 0e 09 	call	0x121c	; 0x121c <uart_getcmd>
			
						// Überprüfen ob empfangene Daten gleich dem erwarteten Kommando
						if(!memcmp(cmd, mem, sizeof(eeSETADDR) - 1))	{
     c32:	46 e0       	ldi	r20, 0x06	; 6
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	be 01       	movw	r22, r28
     c38:	65 5f       	subi	r22, 0xF5	; 245
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	0e 94 e7 09 	call	0x13ce	; 0x13ce <memcmp>
     c44:	89 2b       	or	r24, r25
     c46:	09 f4       	brne	.+2      	; 0xc4a <promer+0x30e>
     c48:	9b ce       	rjmp	.-714    	; 0x980 <promer+0x44>
     c4a:	c4 ce       	rjmp	.-632    	; 0x9d4 <promer+0x98>
							loop++;										// Loop Variable inkrementieren
						}
						// Falsches kommando empfangen
						else
						{
							rom_block(eeFAIL, mem, sizeof(eeFAIL));		// [FAIL] Kommando von EEPROM in lokalen Speicher laden
     c4c:	47 e0       	ldi	r20, 0x07	; 7
     c4e:	be 01       	movw	r22, r28
     c50:	65 5f       	subi	r22, 0xF5	; 245
     c52:	7f 4f       	sbci	r23, 0xFF	; 255
     c54:	86 e4       	ldi	r24, 0x46	; 70
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
							uart_setstring(mem, 1);						// [FAIL] Kommando über UART senden
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	ce 01       	movw	r24, r28
     c60:	0b 96       	adiw	r24, 0x0b	; 11
     c62:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
							
							loop = 0;									// Loop Variable Rücksetzten
							OUTPUT = 0x01;								// Fehler in Kommandosequenz anzeigen
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	85 bb       	out	0x15, r24	; 21
     c6a:	b2 cf       	rjmp	.-156    	; 0xbd0 <promer+0x294>
							}
						}
			break;
			
			// Abfrage der Datengröße
			case 4	:	rom_block(eeSIZE, mem, sizeof(eeSIZE));				// {SIZE} Kommando von EEPROM in lokalen Speicher laden
     c6c:	47 e0       	ldi	r20, 0x07	; 7
     c6e:	be 01       	movw	r22, r28
     c70:	65 5f       	subi	r22, 0xF5	; 245
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
						uart_setstring(mem, 1);								// {SIZE} Kommando über UART Senden
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	ce 01       	movw	r24, r28
     c80:	0b 96       	adiw	r24, 0x0b	; 11
     c82:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
						uart_getarg(arg);									// {.} Größe (max. 1 Byte empfangen 0-255)
     c86:	ce 01       	movw	r24, r28
     c88:	45 96       	adiw	r24, 0x15	; 21
     c8a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <uart_getarg>
			
						datasize = arg[0];									// Datengröße abspeichern
     c8e:	bd 88       	ldd	r11, Y+21	; 0x15
			
						// Überprüfen ob Datengröße > 0
						if(datasize > 0)
     c90:	b1 10       	cpse	r11, r1
     c92:	37 cf       	rjmp	.-402    	; 0xb02 <promer+0x1c6>
     c94:	8f cf       	rjmp	.-226    	; 0xbb4 <promer+0x278>
							}
						}
			break;
			
			// Abfrage der Datengröße
			case 4	:	rom_block(eeSIZE, mem, sizeof(eeSIZE));				// {SIZE} Kommando von EEPROM in lokalen Speicher laden
     c96:	47 e0       	ldi	r20, 0x07	; 7
     c98:	be 01       	movw	r22, r28
     c9a:	65 5f       	subi	r22, 0xF5	; 245
     c9c:	7f 4f       	sbci	r23, 0xFF	; 255
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
						uart_setstring(mem, 1);								// {SIZE} Kommando über UART Senden
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	ce 01       	movw	r24, r28
     caa:	0b 96       	adiw	r24, 0x0b	; 11
     cac:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
						uart_getarg(arg);									// {.} Größe (max. 1 Byte empfangen 0-255)
     cb0:	ce 01       	movw	r24, r28
     cb2:	45 96       	adiw	r24, 0x15	; 21
     cb4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <uart_getarg>
			
						datasize = arg[0];									// Datengröße abspeichern
     cb8:	1d 89       	ldd	r17, Y+21	; 0x15
			
						// Überprüfen ob Datengröße > 0
						if(datasize > 0)
     cba:	11 23       	and	r17, r17
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <promer+0x384>
     cbe:	7a cf       	rjmp	.-268    	; 0xbb4 <promer+0x278>
     cc0:	f5 ce       	rjmp	.-534    	; 0xaac <promer+0x170>

00000cc2 <display>:

//	+---------------------------------------------------------------+
//	|					Programmier Routine							|
//	+---------------------------------------------------------------+
void program(unsigned char transfer, unsigned long long datasize)
{
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	18 2f       	mov	r17, r24
     ccc:	09 2f       	mov	r16, r25
     cce:	d6 2f       	mov	r29, r22
     cd0:	c4 2f       	mov	r28, r20
     cd2:	84 2f       	mov	r24, r20
     cd4:	0e 94 56 02 	call	0x4ac	; 0x4ac <lcd_pos>
     cd8:	80 e6       	ldi	r24, 0x60	; 96
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9f 93       	push	r25
     cde:	8f 93       	push	r24
     ce0:	0e 94 86 04 	call	0x90c	; 0x90c <tfp_printf>
     ce4:	6d 2f       	mov	r22, r29
     ce6:	8c 2f       	mov	r24, r28
     ce8:	0e 94 56 02 	call	0x4ac	; 0x4ac <lcd_pos>
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	8f e6       	ldi	r24, 0x6F	; 111
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	0e 94 86 04 	call	0x90c	; 0x90c <tfp_printf>
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	08 95       	ret

00000d12 <getmode>:
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	2a 97       	sbiw	r28, 0x0a	; 10
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	c8 99       	sbic	0x19, 0	; 25
     d28:	0d c0       	rjmp	.+26     	; 0xd44 <getmode+0x32>
     d2a:	47 e0       	ldi	r20, 0x07	; 7
     d2c:	be 01       	movw	r22, r28
     d2e:	6f 5f       	subi	r22, 0xFF	; 255
     d30:	7f 4f       	sbci	r23, 0xFF	; 255
     d32:	82 e6       	ldi	r24, 0x62	; 98
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	0e 94 9e 04 	call	0x93c	; 0x93c <promer>
     d42:	3f c0       	rjmp	.+126    	; 0xdc2 <getmode+0xb0>
     d44:	c9 99       	sbic	0x19, 1	; 25
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <getmode+0x5e>
     d48:	47 e0       	ldi	r20, 0x07	; 7
     d4a:	be 01       	movw	r22, r28
     d4c:	6f 5f       	subi	r22, 0xFF	; 255
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
     d50:	8b e5       	ldi	r24, 0x5B	; 91
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
     d58:	41 e0       	ldi	r20, 0x01	; 1
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	0e 94 61 06 	call	0xcc2	; 0xcc2 <display>
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	ce 01       	movw	r24, r28
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
     d6e:	ec cf       	rjmp	.-40     	; 0xd48 <getmode+0x36>
     d70:	ca 99       	sbic	0x19, 2	; 25
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <getmode+0x8a>
     d74:	47 e0       	ldi	r20, 0x07	; 7
     d76:	be 01       	movw	r22, r28
     d78:	6f 5f       	subi	r22, 0xFF	; 255
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	84 e5       	ldi	r24, 0x54	; 84
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <display>
     d90:	61 e0       	ldi	r22, 0x01	; 1
     d92:	ce 01       	movw	r24, r28
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
     d9a:	ec cf       	rjmp	.-40     	; 0xd74 <getmode+0x62>
     d9c:	48 e0       	ldi	r20, 0x08	; 8
     d9e:	be 01       	movw	r22, r28
     da0:	6f 5f       	subi	r22, 0xFF	; 255
     da2:	7f 4f       	sbci	r23, 0xFF	; 255
     da4:	89 e6       	ldi	r24, 0x69	; 105
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
     dac:	41 e0       	ldi	r20, 0x01	; 1
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	ce 01       	movw	r24, r28
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <display>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	ce 01       	movw	r24, r28
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
     dc2:	2a 96       	adiw	r28, 0x0a	; 10
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <wait>:
//	+---------------------------------------------------------------+
//	|				Einstellbare Wartefunktion						|
//	+---------------------------------------------------------------+
void wait(unsigned int cycle, unsigned char type)
{
	for(unsigned int i=0; i < cycle; i++)
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	91 f0       	breq	.+36     	; 0xdfc <wait+0x28>
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
		switch(type)
     ddc:	61 30       	cpi	r22, 0x01	; 1
     dde:	19 f4       	brne	.+6      	; 0xde6 <wait+0x12>
     de0:	44 e0       	ldi	r20, 0x04	; 4
     de2:	4a 95       	dec	r20
     de4:	f1 f7       	brne	.-4      	; 0xde2 <wait+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     de6:	e7 eb       	ldi	r30, 0xB7	; 183
     de8:	fb e0       	ldi	r31, 0x0B	; 11
     dea:	31 97       	sbiw	r30, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <wait+0x16>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <wait+0x1c>
     df0:	00 00       	nop
//	+---------------------------------------------------------------+
//	|				Einstellbare Wartefunktion						|
//	+---------------------------------------------------------------+
void wait(unsigned int cycle, unsigned char type)
{
	for(unsigned int i=0; i < cycle; i++)
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
     df6:	82 17       	cp	r24, r18
     df8:	93 07       	cpc	r25, r19
     dfa:	81 f7       	brne	.-32     	; 0xddc <wait+0x8>
     dfc:	08 95       	ret

00000dfe <blink>:

//	+---------------------------------------------------------------+
//	|						Blink Funktion							|
//	+---------------------------------------------------------------+
void blink(volatile unsigned char *port, unsigned char ticks, unsigned int delay)
{
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	8c 01       	movw	r16, r24
     e0c:	d6 2f       	mov	r29, r22
     e0e:	7a 01       	movw	r14, r20
	*port = 0x00;
     e10:	fc 01       	movw	r30, r24
     e12:	10 82       	st	Z, r1

	for(unsigned char i=0; i < ticks; i++)
     e14:	66 23       	and	r22, r22
     e16:	61 f0       	breq	.+24     	; 0xe30 <blink+0x32>
     e18:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*port = ~(*port);
     e1a:	f8 01       	movw	r30, r16
     e1c:	80 81       	ld	r24, Z
     e1e:	80 95       	com	r24
     e20:	80 83       	st	Z, r24
		wait(delay, 0);
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	c7 01       	movw	r24, r14
     e26:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <wait>
//	+---------------------------------------------------------------+
void blink(volatile unsigned char *port, unsigned char ticks, unsigned int delay)
{
	*port = 0x00;

	for(unsigned char i=0; i < ticks; i++)
     e2a:	cf 5f       	subi	r28, 0xFF	; 255
     e2c:	dc 13       	cpse	r29, r28
     e2e:	f5 cf       	rjmp	.-22     	; 0xe1a <blink+0x1c>
	{
		*port = ~(*port);
		wait(delay, 0);
	}
	
	*port = 0x00;
     e30:	f8 01       	movw	r30, r16
     e32:	10 82       	st	Z, r1
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	08 95       	ret

00000e42 <load>:

//	+---------------------------------------------------------------+
//	|					Ladebalken Funktion							|
//	+---------------------------------------------------------------+
void load(volatile unsigned char *port, unsigned char pos, unsigned int delay)
{	
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	ec 01       	movw	r28, r24
		*port |= 0x01 | (*port<<1);
     e48:	98 81       	ld	r25, Y
     e4a:	88 81       	ld	r24, Y
     e4c:	29 2f       	mov	r18, r25
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	22 0f       	add	r18, r18
     e52:	33 1f       	adc	r19, r19
     e54:	21 60       	ori	r18, 0x01	; 1
     e56:	28 2b       	or	r18, r24
     e58:	28 83       	st	Y, r18
		
		if(delay > 0)
     e5a:	41 15       	cp	r20, r1
     e5c:	51 05       	cpc	r21, r1
     e5e:	21 f0       	breq	.+8      	; 0xe68 <load+0x26>
			wait(delay, 0);
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	ca 01       	movw	r24, r20
     e64:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <wait>
			
		if(*port == 0xFF)
     e68:	88 81       	ld	r24, Y
     e6a:	8f 3f       	cpi	r24, 0xFF	; 255
     e6c:	09 f4       	brne	.+2      	; 0xe70 <load+0x2e>
			*port = 0x00;
     e6e:	18 82       	st	Y, r1
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	08 95       	ret

00000e76 <system_init>:

//	+---------------------------------------------------------------+
//	|					System Initialisierung						|
//	+---------------------------------------------------------------+
void system_init()
{
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	2a 97       	sbiw	r28, 0x0a	; 10
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
	unsigned char buffer[10];
	
	DDROUT = HIGH;	// Datenrichtungsregister des Ausgabeports einstellen
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	84 bb       	out	0x14, r24	; 20
	DDRIN = LOW;	// Datenrichtungsregister des Eingabeports einstellen
     e8e:	1a ba       	out	0x1a, r1	; 26
	INPULL = HIGH;	// Pullup Widerstände an Eingabeport aktivieren
     e90:	8b bb       	out	0x1b, r24	; 27
	OUTPUT = LOW;	// Ausgabe Port rücksetzten
     e92:	15 ba       	out	0x15, r1	; 21

	// System aktiv und in STARTPHASE
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     e94:	4a ef       	ldi	r20, 0xFA	; 250
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	85 e3       	ldi	r24, 0x35	; 53
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 21 07 	call	0xe42	; 0xe42 <load>

	// UART Initialisierung
	uart_init(8, 0, 1);			// UART Initialisierung
     ea2:	41 e0       	ldi	r20, 0x01	; 1
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	88 e0       	ldi	r24, 0x08	; 8
     ea8:	0e 94 65 08 	call	0x10ca	; 0x10ca <uart_init>
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     eac:	4a ef       	ldi	r20, 0xFA	; 250
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	85 e3       	ldi	r24, 0x35	; 53
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 21 07 	call	0xe42	; 0xe42 <load>
	rom_block(eeSTART, buffer, sizeof(eeSTART));
     eba:	46 e0       	ldi	r20, 0x06	; 6
     ebc:	be 01       	movw	r22, r28
     ebe:	6f 5f       	subi	r22, 0xFF	; 255
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	81 e7       	ldi	r24, 0x71	; 113
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     eca:	4a ef       	ldi	r20, 0xFA	; 250
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	85 e3       	ldi	r24, 0x35	; 53
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 21 07 	call	0xe42	; 0xe42 <load>
	uart_setstring(buffer, 1);	// Initialisierung auf Konsole ausgeben
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     ee2:	4a ef       	ldi	r20, 0xFA	; 250
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	85 e3       	ldi	r24, 0x35	; 53
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 21 07 	call	0xe42	; 0xe42 <load>

	// LCD Initialisierung
	lcd_init();					// LCD Initialisierung
     ef0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <lcd_init>
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     ef4:	4a ef       	ldi	r20, 0xFA	; 250
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	85 e3       	ldi	r24, 0x35	; 53
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 21 07 	call	0xe42	; 0xe42 <load>
	display(buffer, 0,0);		// Initialisierung auf Display ausgeben
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	ce 01       	movw	r24, r28
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <display>
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     f0e:	4a ef       	ldi	r20, 0xFA	; 250
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	85 e3       	ldi	r24, 0x35	; 53
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 21 07 	call	0xe42	; 0xe42 <load>
	display(buffer, 0,1);		// Initialisierung auf Display ausgeben
	uart_setstring(buffer, 1);	// Initialisierung auf Konsole ausgeben
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
	blink(&OUTPUT, 10, 500);
#else
	blink(&OUTPUT, 10, 100);
     f1c:	44 e6       	ldi	r20, 0x64	; 100
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	6a e0       	ldi	r22, 0x0A	; 10
     f22:	85 e3       	ldi	r24, 0x35	; 53
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 ff 06 	call	0xdfe	; 0xdfe <blink>
#endif

	// UART / LCD Initialisierungs Ausgabe
	rom_block(eeTITLE, buffer, sizeof(eeTITLE));
     f2a:	48 e0       	ldi	r20, 0x08	; 8
     f2c:	be 01       	movw	r22, r28
     f2e:	6f 5f       	subi	r22, 0xFF	; 255
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	87 e8       	ldi	r24, 0x87	; 135
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
	display(buffer, 0,0);								// Daten auf Display ausgeben
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	0e 94 61 06 	call	0xcc2	; 0xcc2 <display>
	uart_setstring(buffer, 1);							// Daten auf Konsole ausgeben
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
	rom_block(eeVERSION, buffer, sizeof(eeVERSION));
     f50:	48 e0       	ldi	r20, 0x08	; 8
     f52:	be 01       	movw	r22, r28
     f54:	6f 5f       	subi	r22, 0xFF	; 255
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	8f e7       	ldi	r24, 0x7F	; 127
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
	display(buffer, 0,1);								// Daten auf Display ausgeben
     f60:	41 e0       	ldi	r20, 0x01	; 1
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	ce 01       	movw	r24, r28
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	0e 94 61 06 	call	0xcc2	; 0xcc2 <display>
	uart_setstring(buffer, 1);							// Daten auf Konsole ausgeben
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	ce 01       	movw	r24, r28
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_setstring>
}
     f76:	2a 96       	adiw	r28, 0x0a	; 10
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <percent>:

//	+---------------------------------------------------------------+
//	|					Display Prozentanzeige						|
//	+---------------------------------------------------------------+
unsigned char percent(unsigned long long number, unsigned long long size)
{
     f88:	2f 92       	push	r2
     f8a:	3f 92       	push	r3
     f8c:	4f 92       	push	r4
     f8e:	5f 92       	push	r5
     f90:	6f 92       	push	r6
     f92:	7f 92       	push	r7
     f94:	8f 92       	push	r8
     f96:	9f 92       	push	r9
     f98:	af 92       	push	r10
     f9a:	bf 92       	push	r11
     f9c:	cf 92       	push	r12
     f9e:	df 92       	push	r13
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	00 d0       	rcall	.+0      	; 0xfae <percent+0x26>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <percent+0x28>
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	2a 2c       	mov	r2, r10
     fb6:	3b 2c       	mov	r3, r11
     fb8:	4c 2c       	mov	r4, r12
     fba:	5d 2c       	mov	r5, r13
     fbc:	6e 2c       	mov	r6, r14
     fbe:	7f 2c       	mov	r7, r15
     fc0:	09 83       	std	Y+1, r16	; 0x01
     fc2:	1a 83       	std	Y+2, r17	; 0x02
	// Ausrechnen der Prozentwerte
	unsigned char percentage = (number * 100UL/size);
     fc4:	02 e0       	ldi	r16, 0x02	; 2
     fc6:	0e 94 b9 09 	call	0x1372	; 0x1372 <__ashldi3>
     fca:	82 2e       	mov	r8, r18
     fcc:	93 2e       	mov	r9, r19
     fce:	4c 83       	std	Y+4, r20	; 0x04
     fd0:	5b 83       	std	Y+3, r21	; 0x03
     fd2:	b6 2f       	mov	r27, r22
     fd4:	a7 2f       	mov	r26, r23
     fd6:	f8 2f       	mov	r31, r24
     fd8:	e9 2f       	mov	r30, r25
     fda:	0e 94 b9 09 	call	0x1372	; 0x1372 <__ashldi3>
     fde:	a2 2e       	mov	r10, r18
     fe0:	b3 2e       	mov	r11, r19
     fe2:	c4 2e       	mov	r12, r20
     fe4:	d5 2e       	mov	r13, r21
     fe6:	e6 2e       	mov	r14, r22
     fe8:	f7 2e       	mov	r15, r23
     fea:	08 2f       	mov	r16, r24
     fec:	19 2f       	mov	r17, r25
     fee:	28 2d       	mov	r18, r8
     ff0:	39 2d       	mov	r19, r9
     ff2:	4c 81       	ldd	r20, Y+4	; 0x04
     ff4:	5b 81       	ldd	r21, Y+3	; 0x03
     ff6:	6b 2f       	mov	r22, r27
     ff8:	7a 2f       	mov	r23, r26
     ffa:	8f 2f       	mov	r24, r31
     ffc:	9e 2f       	mov	r25, r30
     ffe:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__adddi3>
    1002:	82 2e       	mov	r8, r18
    1004:	93 2e       	mov	r9, r19
    1006:	4c 83       	std	Y+4, r20	; 0x04
    1008:	5b 83       	std	Y+3, r21	; 0x03
    100a:	b6 2f       	mov	r27, r22
    100c:	a7 2f       	mov	r26, r23
    100e:	f8 2f       	mov	r31, r24
    1010:	e9 2f       	mov	r30, r25
    1012:	02 e0       	ldi	r16, 0x02	; 2
    1014:	0e 94 b9 09 	call	0x1372	; 0x1372 <__ashldi3>
    1018:	a2 2e       	mov	r10, r18
    101a:	b3 2e       	mov	r11, r19
    101c:	c4 2e       	mov	r12, r20
    101e:	d5 2e       	mov	r13, r21
    1020:	e6 2e       	mov	r14, r22
    1022:	f7 2e       	mov	r15, r23
    1024:	08 2f       	mov	r16, r24
    1026:	19 2f       	mov	r17, r25
    1028:	28 2d       	mov	r18, r8
    102a:	39 2d       	mov	r19, r9
    102c:	4c 81       	ldd	r20, Y+4	; 0x04
    102e:	5b 81       	ldd	r21, Y+3	; 0x03
    1030:	6b 2f       	mov	r22, r27
    1032:	7a 2f       	mov	r23, r26
    1034:	8f 2f       	mov	r24, r31
    1036:	9e 2f       	mov	r25, r30
    1038:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__adddi3>
    103c:	a2 2c       	mov	r10, r2
    103e:	b3 2c       	mov	r11, r3
    1040:	c4 2c       	mov	r12, r4
    1042:	d5 2c       	mov	r13, r5
    1044:	e6 2c       	mov	r14, r6
    1046:	f7 2c       	mov	r15, r7
    1048:	09 81       	ldd	r16, Y+1	; 0x01
    104a:	1a 81       	ldd	r17, Y+2	; 0x02
    104c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__udivdi3>
    1050:	29 83       	std	Y+1, r18	; 0x01
	
	lcd_pos(1, 0);			// Positionszeiger auf Zeile, Spalte
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	0e 94 56 02 	call	0x4ac	; 0x4ac <lcd_pos>
	printf("        ");		// Zeile Leeren
    105a:	80 e6       	ldi	r24, 0x60	; 96
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9f 93       	push	r25
    1060:	8f 93       	push	r24
    1062:	0e 94 86 04 	call	0x90c	; 0x90c <tfp_printf>
	lcd_pos(1, 0);			// Positionszeiger auf Zeile, Spalte
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	0e 94 56 02 	call	0x4ac	; 0x4ac <lcd_pos>
	printf("P=%u%s", percentage, "%");	// String auf Display ausgeben
    106e:	89 e6       	ldi	r24, 0x69	; 105
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9f 93       	push	r25
    1074:	8f 93       	push	r24
    1076:	1f 92       	push	r1
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	8f 93       	push	r24
    107c:	8b e6       	ldi	r24, 0x6B	; 107
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9f 93       	push	r25
    1082:	8f 93       	push	r24
    1084:	0e 94 86 04 	call	0x90c	; 0x90c <tfp_printf>
	
	return percentage;
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
}
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	9f 90       	pop	r9
    10b2:	8f 90       	pop	r8
    10b4:	7f 90       	pop	r7
    10b6:	6f 90       	pop	r6
    10b8:	5f 90       	pop	r5
    10ba:	4f 90       	pop	r4
    10bc:	3f 90       	pop	r3
    10be:	2f 90       	pop	r2
    10c0:	08 95       	ret

000010c2 <uart_setchar>:
	if(UCSRA & (1<<RXC))	{				// Überprüfen ob Daten in Empfangsbuffer
		*dataaddr = UDR;					// Daten auf in Variable der Adresse address schreiben
		return 0xFF;						// Wenn neue Daten vorhanden Status 0xFF
	}
	return 0x00;							// Wenn keine neuen Daten vorhanden Status 0x00
}
    10c2:	5d 9b       	sbis	0x0b, 5	; 11
    10c4:	fe cf       	rjmp	.-4      	; 0x10c2 <uart_setchar>
    10c6:	8c b9       	out	0x0c, r24	; 12
    10c8:	08 95       	ret

000010ca <uart_init>:
    10ca:	92 e0       	ldi	r25, 0x02	; 2
    10cc:	9b b9       	out	0x0b, r25	; 11
    10ce:	10 bc       	out	0x20, r1	; 32
    10d0:	9a e1       	ldi	r25, 0x1A	; 26
    10d2:	99 b9       	out	0x09, r25	; 9
    10d4:	86 33       	cpi	r24, 0x36	; 54
    10d6:	49 f0       	breq	.+18     	; 0x10ea <uart_init+0x20>
    10d8:	18 f4       	brcc	.+6      	; 0x10e0 <uart_init+0x16>
    10da:	85 33       	cpi	r24, 0x35	; 53
    10dc:	71 f0       	breq	.+28     	; 0x10fa <uart_init+0x30>
    10de:	0b c0       	rjmp	.+22     	; 0x10f6 <uart_init+0x2c>
    10e0:	87 33       	cpi	r24, 0x37	; 55
    10e2:	29 f0       	breq	.+10     	; 0x10ee <uart_init+0x24>
    10e4:	89 33       	cpi	r24, 0x39	; 57
    10e6:	29 f0       	breq	.+10     	; 0x10f2 <uart_init+0x28>
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <uart_init+0x2c>
    10ea:	82 e8       	ldi	r24, 0x82	; 130
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <uart_init+0x32>
    10ee:	84 e8       	ldi	r24, 0x84	; 132
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <uart_init+0x32>
    10f2:	86 e8       	ldi	r24, 0x86	; 134
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <uart_init+0x32>
    10f6:	86 e8       	ldi	r24, 0x86	; 134
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <uart_init+0x32>
    10fa:	80 e8       	ldi	r24, 0x80	; 128
    10fc:	8f 7c       	andi	r24, 0xCF	; 207
    10fe:	65 34       	cpi	r22, 0x45	; 69
    1100:	19 f0       	breq	.+6      	; 0x1108 <uart_init+0x3e>
    1102:	6f 34       	cpi	r22, 0x4F	; 79
    1104:	19 f0       	breq	.+6      	; 0x110c <uart_init+0x42>
    1106:	03 c0       	rjmp	.+6      	; 0x110e <uart_init+0x44>
    1108:	80 62       	ori	r24, 0x20	; 32
    110a:	01 c0       	rjmp	.+2      	; 0x110e <uart_init+0x44>
    110c:	80 63       	ori	r24, 0x30	; 48
    110e:	42 33       	cpi	r20, 0x32	; 50
    1110:	11 f4       	brne	.+4      	; 0x1116 <uart_init+0x4c>
    1112:	88 60       	ori	r24, 0x08	; 8
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <uart_init+0x4e>
    1116:	87 7f       	andi	r24, 0xF7	; 247
    1118:	80 bd       	out	0x20, r24	; 32
    111a:	88 e1       	ldi	r24, 0x18	; 24
    111c:	8a b9       	out	0x0a, r24	; 10
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>
    1124:	08 95       	ret

00001126 <uart_setstring>:
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	ec 01       	movw	r28, r24
    112e:	16 2f       	mov	r17, r22
    1130:	88 81       	ld	r24, Y
    1132:	88 23       	and	r24, r24
    1134:	31 f0       	breq	.+12     	; 0x1142 <uart_setstring+0x1c>
    1136:	21 96       	adiw	r28, 0x01	; 1
    1138:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>
    113c:	89 91       	ld	r24, Y+
    113e:	81 11       	cpse	r24, r1
    1140:	fb cf       	rjmp	.-10     	; 0x1138 <uart_setstring+0x12>
    1142:	11 30       	cpi	r17, 0x01	; 1
    1144:	51 f0       	breq	.+20     	; 0x115a <uart_setstring+0x34>
    1146:	28 f0       	brcs	.+10     	; 0x1152 <uart_setstring+0x2c>
    1148:	12 30       	cpi	r17, 0x02	; 2
    114a:	71 f0       	breq	.+28     	; 0x1168 <uart_setstring+0x42>
    114c:	13 30       	cpi	r17, 0x03	; 3
    114e:	81 f0       	breq	.+32     	; 0x1170 <uart_setstring+0x4a>
    1150:	13 c0       	rjmp	.+38     	; 0x1178 <uart_setstring+0x52>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>
    1158:	12 c0       	rjmp	.+36     	; 0x117e <uart_setstring+0x58>
    115a:	8a e0       	ldi	r24, 0x0A	; 10
    115c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>
    1160:	8d e0       	ldi	r24, 0x0D	; 13
    1162:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>
    1166:	0b c0       	rjmp	.+22     	; 0x117e <uart_setstring+0x58>
    1168:	89 e0       	ldi	r24, 0x09	; 9
    116a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>
    116e:	07 c0       	rjmp	.+14     	; 0x117e <uart_setstring+0x58>
    1170:	80 e2       	ldi	r24, 0x20	; 32
    1172:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>
    1176:	03 c0       	rjmp	.+6      	; 0x117e <uart_setstring+0x58>
    1178:	8b e1       	ldi	r24, 0x1B	; 27
    117a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	08 95       	ret

00001186 <uart_getchar>:
    1186:	5f 9b       	sbis	0x0b, 7	; 11
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <uart_getchar+0xa>
    118a:	2c b1       	in	r18, 0x0c	; 12
    118c:	fc 01       	movw	r30, r24
    118e:	20 83       	st	Z, r18
    1190:	08 95       	ret

00001192 <uart_fetchchar>:

//	+---------------------------------------------------------------+
//	|					UART Zeichen abholen						|
//	+---------------------------------------------------------------+
void uart_fetchchar(unsigned char *dataaddr)	{
    1192:	fc 01       	movw	r30, r24
	while(!(UCSRA & (1<<RXC)));				// Warten bis neues Zeichen verfügbar
    1194:	5f 9b       	sbis	0x0b, 7	; 11
    1196:	fe cf       	rjmp	.-4      	; 0x1194 <uart_fetchchar+0x2>
		*dataaddr = UDR;					// Daten auf in Variable der Adresse address schreiben
    1198:	8c b1       	in	r24, 0x0c	; 12
    119a:	80 83       	st	Z, r24
	uart_setchar(*dataaddr);
    119c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>
    11a0:	08 95       	ret

000011a2 <uart_getarg>:

//	+---------------------------------------------------------------+
//	|					UART Argument empfangen						|
//	+---------------------------------------------------------------+
void uart_getarg(unsigned char arg[])
{
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	1f 92       	push	r1
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	6c 01       	movw	r12, r24
	unsigned char data = 0;
    11ba:	19 82       	std	Y+1, r1	; 0x01
	{
		uart_getchar(&data);
		
		if(data == '{')
		{
			arg[loop] = data;	// Empfangenes Zeichen auf Buffer legen
    11bc:	0b e7       	ldi	r16, 0x7B	; 123
	unsigned char cancel = 0x00;
	
	// Loop bis Datensatz beginnt
	while(1)
	{
		uart_getchar(&data);
    11be:	ce 01       	movw	r24, r28
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	0e 94 c3 08 	call	0x1186	; 0x1186 <uart_getchar>
		
		if(data == '{')
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	8b 37       	cpi	r24, 0x7B	; 123
    11ca:	d9 f4       	brne	.+54     	; 0x1202 <uart_getarg+0x60>
		{
			arg[loop] = data;	// Empfangenes Zeichen auf Buffer legen
    11cc:	f6 01       	movw	r30, r12
    11ce:	01 93       	st	Z+, r16
    11d0:	7f 01       	movw	r14, r30
			loop++;					// Arrayzeiger erhöhen
		
			uart_setchar(data);
    11d2:	80 2f       	mov	r24, r16
    11d4:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>
		uart_getchar(&data);
		
		if(data == '{')
		{
			arg[loop] = data;	// Empfangenes Zeichen auf Buffer legen
			loop++;					// Arrayzeiger erhöhen
    11d8:	11 e0       	ldi	r17, 0x01	; 1
		
			uart_setchar(data);
			
			do
			{
				uart_fetchchar(&data);	// Warten bis Zeichen verfügbar
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	0e 94 c9 08 	call	0x1192	; 0x1192 <uart_fetchchar>
				arg[loop] = data;	// Zeichen in Array schreiben
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	f7 01       	movw	r30, r14
    11e6:	81 93       	st	Z+, r24
    11e8:	7f 01       	movw	r14, r30
				loop++;					// Arrayzeiger erhöhen
    11ea:	1f 5f       	subi	r17, 0xFF	; 255
				
				// Überprüfen ob Loop Zähler >= (Arraygröße - 1)
				if(loop >= (unsigned char)(MAXCMDSIZE))
    11ec:	18 30       	cpi	r17, 0x08	; 8
    11ee:	61 f0       	breq	.+24     	; 0x1208 <uart_getarg+0x66>
				{
					cancel = 0xFF;		// Programmabbruchflag aktivieren
					break;				// Schleifenabbruch initiieren
				}
			} while (data != '}');		// Schleife solange durchlaufen bis Endzeichen erreicht
    11f0:	8d 37       	cpi	r24, 0x7D	; 125
    11f2:	99 f7       	brne	.-26     	; 0x11da <uart_getarg+0x38>
		
		// CANCEL
		if(cancel == 0xFF)
			break;
		
		arg[loop] = '\0';	// Array Endstring hinzufügen
    11f4:	f6 01       	movw	r30, r12
    11f6:	e1 0f       	add	r30, r17
    11f8:	f1 1d       	adc	r31, r1
    11fa:	10 82       	st	Z, r1
		
		if(loop > 0)
    11fc:	11 23       	and	r17, r17
    11fe:	f9 f2       	breq	.-66     	; 0x11be <uart_getarg+0x1c>
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <uart_getarg+0x66>
		
		// CANCEL
		if(cancel == 0xFF)
			break;
		
		arg[loop] = '\0';	// Array Endstring hinzufügen
    1202:	f6 01       	movw	r30, r12
    1204:	10 82       	st	Z, r1
    1206:	db cf       	rjmp	.-74     	; 0x11be <uart_getarg+0x1c>
		{
			break;
			arg[loop] = '\0';	// Array Endstring hinzufügen
		}
	}
}
    1208:	0f 90       	pop	r0
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	df 90       	pop	r13
    1218:	cf 90       	pop	r12
    121a:	08 95       	ret

0000121c <uart_getcmd>:

//	+---------------------------------------------------------------+
//	|					UART Kommando empfangen						|
//	+---------------------------------------------------------------+
void uart_getcmd(unsigned char cmd[])
{
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	1f 92       	push	r1
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	c8 2e       	mov	r12, r24
    1234:	d9 2e       	mov	r13, r25
	unsigned char data = 0;
    1236:	19 82       	std	Y+1, r1	; 0x01
		uart_getchar(&data);

		if(data == '[')
		{
			
			cmd[loop] = data;	// Empfangenes Zeichen auf Buffer legen
    1238:	0b e5       	ldi	r16, 0x5B	; 91
	
	// Loop bis Datensatz beginnt
	while(1)
	{
		
		uart_getchar(&data);
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	0e 94 c3 08 	call	0x1186	; 0x1186 <uart_getchar>

		if(data == '[')
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	8b 35       	cpi	r24, 0x5B	; 91
    1246:	c9 f7       	brne	.-14     	; 0x123a <uart_getcmd+0x1e>
		{
			
			cmd[loop] = data;	// Empfangenes Zeichen auf Buffer legen
    1248:	ec 2c       	mov	r14, r12
    124a:	fd 2c       	mov	r15, r13
    124c:	f7 01       	movw	r30, r14
    124e:	01 93       	st	Z+, r16
    1250:	7f 01       	movw	r14, r30
			loop++;				// Arrayzeiger erhöhen
			
			uart_setchar(data);
    1252:	80 2f       	mov	r24, r16
    1254:	0e 94 61 08 	call	0x10c2	; 0x10c2 <uart_setchar>

		if(data == '[')
		{
			
			cmd[loop] = data;	// Empfangenes Zeichen auf Buffer legen
			loop++;				// Arrayzeiger erhöhen
    1258:	11 e0       	ldi	r17, 0x01	; 1
			
			uart_setchar(data);
			
			do
			{
				uart_fetchchar(&data);	// Warten bis Zeichen verfügbar
    125a:	ce 01       	movw	r24, r28
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	0e 94 c9 08 	call	0x1192	; 0x1192 <uart_fetchchar>
				cmd[loop] = data;		// Zeichen in Array schreiben
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	f7 01       	movw	r30, r14
    1266:	81 93       	st	Z+, r24
    1268:	7f 01       	movw	r14, r30
				loop++;					// Arrayzeiger erhöhen
    126a:	1f 5f       	subi	r17, 0xFF	; 255
				
				// Überprüfen ob Loop Zähler >= (Arraygröße - 1)
				if(loop >= (unsigned char)(MAXCMDSIZE))
    126c:	18 30       	cpi	r17, 0x08	; 8
    126e:	21 f0       	breq	.+8      	; 0x1278 <uart_getcmd+0x5c>
				{
					cancel = 0xFF;		// Programmabbruchflag aktivieren
					break;				// Schleifenabbruch initiieren
				}
			} while (data != ']');		// Schleife solange durchlaufen bis Endzeichen erreicht
    1270:	8d 35       	cpi	r24, 0x5D	; 93
    1272:	99 f7       	brne	.-26     	; 0x125a <uart_getcmd+0x3e>
		
		// CANCEL
		if(cancel == 0xFF)
			break;
			
		if(loop > 0)
    1274:	11 23       	and	r17, r17
    1276:	09 f3       	breq	.-62     	; 0x123a <uart_getcmd+0x1e>
		{
			break;
			cmd[loop] = '\0';	// Array Endstring hinzufügen
		}
	}
    1278:	0f 90       	pop	r0
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	ff 90       	pop	r15
    1284:	ef 90       	pop	r14
    1286:	df 90       	pop	r13
    1288:	cf 90       	pop	r12
    128a:	08 95       	ret

0000128c <__udivmodhi4>:
    128c:	aa 1b       	sub	r26, r26
    128e:	bb 1b       	sub	r27, r27
    1290:	51 e1       	ldi	r21, 0x11	; 17
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <__udivmodhi4_ep>

00001294 <__udivmodhi4_loop>:
    1294:	aa 1f       	adc	r26, r26
    1296:	bb 1f       	adc	r27, r27
    1298:	a6 17       	cp	r26, r22
    129a:	b7 07       	cpc	r27, r23
    129c:	10 f0       	brcs	.+4      	; 0x12a2 <__udivmodhi4_ep>
    129e:	a6 1b       	sub	r26, r22
    12a0:	b7 0b       	sbc	r27, r23

000012a2 <__udivmodhi4_ep>:
    12a2:	88 1f       	adc	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	5a 95       	dec	r21
    12a8:	a9 f7       	brne	.-22     	; 0x1294 <__udivmodhi4_loop>
    12aa:	80 95       	com	r24
    12ac:	90 95       	com	r25
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	08 95       	ret

000012b4 <__umoddi3>:
    12b4:	68 94       	set
    12b6:	01 c0       	rjmp	.+2      	; 0x12ba <__udivdi3_umoddi3>

000012b8 <__udivdi3>:
    12b8:	e8 94       	clt

000012ba <__udivdi3_umoddi3>:
    12ba:	8f 92       	push	r8
    12bc:	9f 92       	push	r9
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__udivmod64>
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	9f 90       	pop	r9
    12cc:	8f 90       	pop	r8
    12ce:	08 95       	ret

000012d0 <__udivmod64>:
    12d0:	88 24       	eor	r8, r8
    12d2:	99 24       	eor	r9, r9
    12d4:	f4 01       	movw	r30, r8
    12d6:	e4 01       	movw	r28, r8
    12d8:	b0 e4       	ldi	r27, 0x40	; 64
    12da:	9f 93       	push	r25
    12dc:	aa 27       	eor	r26, r26
    12de:	9a 15       	cp	r25, r10
    12e0:	8b 04       	cpc	r8, r11
    12e2:	9c 04       	cpc	r9, r12
    12e4:	ed 05       	cpc	r30, r13
    12e6:	fe 05       	cpc	r31, r14
    12e8:	cf 05       	cpc	r28, r15
    12ea:	d0 07       	cpc	r29, r16
    12ec:	a1 07       	cpc	r26, r17
    12ee:	98 f4       	brcc	.+38     	; 0x1316 <__udivmod64+0x46>
    12f0:	ad 2f       	mov	r26, r29
    12f2:	dc 2f       	mov	r29, r28
    12f4:	cf 2f       	mov	r28, r31
    12f6:	fe 2f       	mov	r31, r30
    12f8:	e9 2d       	mov	r30, r9
    12fa:	98 2c       	mov	r9, r8
    12fc:	89 2e       	mov	r8, r25
    12fe:	98 2f       	mov	r25, r24
    1300:	87 2f       	mov	r24, r23
    1302:	76 2f       	mov	r23, r22
    1304:	65 2f       	mov	r22, r21
    1306:	54 2f       	mov	r21, r20
    1308:	43 2f       	mov	r20, r19
    130a:	32 2f       	mov	r19, r18
    130c:	22 27       	eor	r18, r18
    130e:	b8 50       	subi	r27, 0x08	; 8
    1310:	31 f7       	brne	.-52     	; 0x12de <__udivmod64+0xe>
    1312:	bf 91       	pop	r27
    1314:	27 c0       	rjmp	.+78     	; 0x1364 <__udivmod64+0x94>
    1316:	1b 2e       	mov	r1, r27
    1318:	bf 91       	pop	r27
    131a:	bb 27       	eor	r27, r27
    131c:	22 0f       	add	r18, r18
    131e:	33 1f       	adc	r19, r19
    1320:	44 1f       	adc	r20, r20
    1322:	55 1f       	adc	r21, r21
    1324:	66 1f       	adc	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	88 1f       	adc	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	88 1c       	adc	r8, r8
    132e:	99 1c       	adc	r9, r9
    1330:	ee 1f       	adc	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	cc 1f       	adc	r28, r28
    1336:	dd 1f       	adc	r29, r29
    1338:	aa 1f       	adc	r26, r26
    133a:	bb 1f       	adc	r27, r27
    133c:	8a 14       	cp	r8, r10
    133e:	9b 04       	cpc	r9, r11
    1340:	ec 05       	cpc	r30, r12
    1342:	fd 05       	cpc	r31, r13
    1344:	ce 05       	cpc	r28, r14
    1346:	df 05       	cpc	r29, r15
    1348:	a0 07       	cpc	r26, r16
    134a:	b1 07       	cpc	r27, r17
    134c:	48 f0       	brcs	.+18     	; 0x1360 <__udivmod64+0x90>
    134e:	8a 18       	sub	r8, r10
    1350:	9b 08       	sbc	r9, r11
    1352:	ec 09       	sbc	r30, r12
    1354:	fd 09       	sbc	r31, r13
    1356:	ce 09       	sbc	r28, r14
    1358:	df 09       	sbc	r29, r15
    135a:	a0 0b       	sbc	r26, r16
    135c:	b1 0b       	sbc	r27, r17
    135e:	21 60       	ori	r18, 0x01	; 1
    1360:	1a 94       	dec	r1
    1362:	e1 f6       	brne	.-72     	; 0x131c <__udivmod64+0x4c>
    1364:	2e f4       	brtc	.+10     	; 0x1370 <__udivmod64+0xa0>
    1366:	94 01       	movw	r18, r8
    1368:	af 01       	movw	r20, r30
    136a:	be 01       	movw	r22, r28
    136c:	cd 01       	movw	r24, r26
    136e:	00 0c       	add	r0, r0
    1370:	08 95       	ret

00001372 <__ashldi3>:
    1372:	0f 93       	push	r16
    1374:	08 30       	cpi	r16, 0x08	; 8
    1376:	90 f0       	brcs	.+36     	; 0x139c <__ashldi3+0x2a>
    1378:	98 2f       	mov	r25, r24
    137a:	87 2f       	mov	r24, r23
    137c:	76 2f       	mov	r23, r22
    137e:	65 2f       	mov	r22, r21
    1380:	54 2f       	mov	r21, r20
    1382:	43 2f       	mov	r20, r19
    1384:	32 2f       	mov	r19, r18
    1386:	22 27       	eor	r18, r18
    1388:	08 50       	subi	r16, 0x08	; 8
    138a:	f4 cf       	rjmp	.-24     	; 0x1374 <__ashldi3+0x2>
    138c:	22 0f       	add	r18, r18
    138e:	33 1f       	adc	r19, r19
    1390:	44 1f       	adc	r20, r20
    1392:	55 1f       	adc	r21, r21
    1394:	66 1f       	adc	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 95       	dec	r16
    139e:	b2 f7       	brpl	.-20     	; 0x138c <__ashldi3+0x1a>
    13a0:	0f 91       	pop	r16
    13a2:	08 95       	ret

000013a4 <__adddi3>:
    13a4:	2a 0d       	add	r18, r10
    13a6:	3b 1d       	adc	r19, r11
    13a8:	4c 1d       	adc	r20, r12
    13aa:	5d 1d       	adc	r21, r13
    13ac:	6e 1d       	adc	r22, r14
    13ae:	7f 1d       	adc	r23, r15
    13b0:	80 1f       	adc	r24, r16
    13b2:	91 1f       	adc	r25, r17
    13b4:	08 95       	ret

000013b6 <__adddi3_s8>:
    13b6:	00 24       	eor	r0, r0
    13b8:	a7 fd       	sbrc	r26, 7
    13ba:	00 94       	com	r0
    13bc:	2a 0f       	add	r18, r26
    13be:	30 1d       	adc	r19, r0
    13c0:	40 1d       	adc	r20, r0
    13c2:	50 1d       	adc	r21, r0
    13c4:	60 1d       	adc	r22, r0
    13c6:	70 1d       	adc	r23, r0
    13c8:	80 1d       	adc	r24, r0
    13ca:	90 1d       	adc	r25, r0
    13cc:	08 95       	ret

000013ce <memcmp>:
    13ce:	fb 01       	movw	r30, r22
    13d0:	dc 01       	movw	r26, r24
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <memcmp+0xe>
    13d4:	8d 91       	ld	r24, X+
    13d6:	01 90       	ld	r0, Z+
    13d8:	80 19       	sub	r24, r0
    13da:	21 f4       	brne	.+8      	; 0x13e4 <memcmp+0x16>
    13dc:	41 50       	subi	r20, 0x01	; 1
    13de:	50 40       	sbci	r21, 0x00	; 0
    13e0:	c8 f7       	brcc	.-14     	; 0x13d4 <memcmp+0x6>
    13e2:	88 1b       	sub	r24, r24
    13e4:	99 0b       	sbc	r25, r25
    13e6:	08 95       	ret

000013e8 <eeprom_read_block>:
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22

000013ec <eeprom_read_blraw>:
    13ec:	fc 01       	movw	r30, r24
    13ee:	e1 99       	sbic	0x1c, 1	; 28
    13f0:	fe cf       	rjmp	.-4      	; 0x13ee <eeprom_read_blraw+0x2>
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <eeprom_read_blraw+0x14>
    13f4:	ff bb       	out	0x1f, r31	; 31
    13f6:	ee bb       	out	0x1e, r30	; 30
    13f8:	e0 9a       	sbi	0x1c, 0	; 28
    13fa:	31 96       	adiw	r30, 0x01	; 1
    13fc:	0d b2       	in	r0, 0x1d	; 29
    13fe:	0d 92       	st	X+, r0
    1400:	41 50       	subi	r20, 0x01	; 1
    1402:	50 40       	sbci	r21, 0x00	; 0
    1404:	b8 f7       	brcc	.-18     	; 0x13f4 <eeprom_read_blraw+0x8>
    1406:	08 95       	ret

00001408 <_exit>:
    1408:	f8 94       	cli

0000140a <__stop_program>:
    140a:	ff cf       	rjmp	.-2      	; 0x140a <__stop_program>
