
ToolboxLoader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000129c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000129c  00001350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800072  00800072  00001362  2**0
                  ALLOC
  3 .eeprom       0000008f  00810000  00810000  00001362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000240  00000000  00000000  00001460  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003434  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010da  00000000  00000000  00004ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015ec  00000000  00000000  00005bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000068c  00000000  00000000  0000719c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000773  00000000  00000000  00007828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002745  00000000  00000000  00007f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000220  00000000  00000000  0000a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "_lib/spi.h"

int main(void)
{
	// System Initialisierung
	system_init();
      92:	0e 94 81 06 	call	0xd02	; 0xd02 <system_init>

	// Programmer aufruf
	getmode();
      96:	0e 94 cf 05 	call	0xb9e	; 0xb9e <getmode>
	
	// Endlosschleife
	while (1)
	{
		asm volatile("nop");
      9a:	00 00       	nop
      9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x8>

0000009e <rom_block>:

//	+---------------------------------------------------------------+
//	|					EEPROM Block lesen							|
//	+---------------------------------------------------------------+
void rom_block(unsigned char eeADDRESS[], unsigned char buffer[], unsigned char size)
{	
      9e:	9c 01       	movw	r18, r24
      a0:	cb 01       	movw	r24, r22
	eeprom_read_block (buffer, eeADDRESS, size);	// EEPROM Block lesen
      a2:	50 e0       	ldi	r21, 0x00	; 0
      a4:	b9 01       	movw	r22, r18
      a6:	0e 94 3c 09 	call	0x1278	; 0x1278 <eeprom_read_block>
      aa:	08 95       	ret

000000ac <i2c_init>:
	
	// Überprüfen ob geschriebene Daten korrekt
	if(read == data)
		return 0xFF;	// Rückgabewert Daten korrekt
	return 0x00;		// Rückgabewert Daten falsch
}
      ac:	11 b8       	out	0x01, r1	; 1
      ae:	87 e0       	ldi	r24, 0x07	; 7
      b0:	80 b9       	out	0x00, r24	; 0
      b2:	08 95       	ret

000000b4 <i2c_start>:
      b4:	84 ea       	ldi	r24, 0xA4	; 164
      b6:	86 bf       	out	0x36, r24	; 54
      b8:	06 b6       	in	r0, 0x36	; 54
      ba:	07 fe       	sbrs	r0, 7
      bc:	fd cf       	rjmp	.-6      	; 0xb8 <i2c_start+0x4>
      be:	08 95       	ret

000000c0 <i2c_transmit>:
      c0:	83 b9       	out	0x03, r24	; 3
      c2:	84 e8       	ldi	r24, 0x84	; 132
      c4:	86 bf       	out	0x36, r24	; 54
      c6:	06 b6       	in	r0, 0x36	; 54
      c8:	07 fe       	sbrs	r0, 7
      ca:	fd cf       	rjmp	.-6      	; 0xc6 <i2c_transmit+0x6>
      cc:	08 95       	ret

000000ce <i2c_receive>:
      ce:	81 11       	cpse	r24, r1
      d0:	03 c0       	rjmp	.+6      	; 0xd8 <i2c_receive+0xa>
      d2:	84 e8       	ldi	r24, 0x84	; 132
      d4:	86 bf       	out	0x36, r24	; 54
      d6:	02 c0       	rjmp	.+4      	; 0xdc <i2c_receive+0xe>
      d8:	84 ec       	ldi	r24, 0xC4	; 196
      da:	86 bf       	out	0x36, r24	; 54
      dc:	06 b6       	in	r0, 0x36	; 54
      de:	07 fe       	sbrs	r0, 7
      e0:	fd cf       	rjmp	.-6      	; 0xdc <i2c_receive+0xe>
      e2:	83 b1       	in	r24, 0x03	; 3
      e4:	08 95       	ret

000000e6 <i2c_eeprom_read_block>:

//	+---------------------------------------------------------------+
//	|					I²C EEPROM Block lesen						|
//	+---------------------------------------------------------------+
void i2c_eeprom_read_block(unsigned char deviceaddr, unsigned char wordaddr, unsigned char *data, unsigned char blocksize)
{
      e6:	2f 92       	push	r2
      e8:	3f 92       	push	r3
      ea:	4f 92       	push	r4
      ec:	5f 92       	push	r5
      ee:	6f 92       	push	r6
      f0:	7f 92       	push	r7
      f2:	8f 92       	push	r8
      f4:	9f 92       	push	r9
      f6:	af 92       	push	r10
      f8:	bf 92       	push	r11
      fa:	cf 92       	push	r12
      fc:	df 92       	push	r13
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
     10e:	29 97       	sbiw	r28, 0x09	; 9
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	de bf       	out	0x3e, r29	; 62
     116:	0f be       	out	0x3f, r0	; 63
     118:	cd bf       	out	0x3d, r28	; 61
     11a:	89 83       	std	Y+1, r24	; 0x01
     11c:	6a 83       	std	Y+2, r22	; 0x02
     11e:	3a 01       	movw	r6, r20
     120:	2b 83       	std	Y+3, r18	; 0x03
		// Dummy Write
		i2c_start();
     122:	0e 94 5a 00 	call	0xb4	; 0xb4 <i2c_start>
		i2c_transmit(deviceaddr | I2C_WRITE);
     126:	89 81       	ldd	r24, Y+1	; 0x01
     128:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_transmit>
		i2c_transmit(wordaddr);
     12c:	8a 81       	ldd	r24, Y+2	; 0x02
     12e:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_transmit>
		
		// EEPROM Lesen initiieren
		i2c_start();
     132:	0e 94 5a 00 	call	0xb4	; 0xb4 <i2c_start>
		i2c_transmit(deviceaddr | I2C_READ);
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	81 60       	ori	r24, 0x01	; 1
     13a:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_transmit>
		
		// Datenblock aus EEPROM lesen
		for(unsigned char i=0; i < blocksize; i++)
     13e:	2b 81       	ldd	r18, Y+3	; 0x03
     140:	22 23       	and	r18, r18
     142:	09 f4       	brne	.+2      	; 0x146 <i2c_eeprom_read_block+0x60>
     144:	5b c0       	rjmp	.+182    	; 0x1fc <i2c_eeprom_read_block+0x116>
     146:	82 2f       	mov	r24, r18
     148:	81 50       	subi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	fc 01       	movw	r30, r24
     14e:	31 96       	adiw	r30, 0x01	; 1
     150:	fd 83       	std	Y+5, r31	; 0x05
     152:	ec 83       	std	Y+4, r30	; 0x04
     154:	f1 e0       	ldi	r31, 0x01	; 1
     156:	19 86       	std	Y+9, r1	; 0x09
     158:	19 82       	std	Y+1, r1	; 0x01
     15a:	1a 82       	std	Y+2, r1	; 0x02
     15c:	51 2c       	mov	r5, r1
     15e:	21 2c       	mov	r2, r1
     160:	31 2c       	mov	r3, r1
     162:	41 2c       	mov	r4, r1
     164:	81 2c       	mov	r8, r1
     166:	91 2c       	mov	r9, r1
		{
			// Überprüfen ob Datensatz durchlaufen
			if((blocksize - 1) >= i)
     168:	82 2f       	mov	r24, r18
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	9c 01       	movw	r18, r24
     16e:	21 50       	subi	r18, 0x01	; 1
     170:	31 09       	sbc	r19, r1
     172:	3f 83       	std	Y+7, r19	; 0x07
     174:	2e 83       	std	Y+6, r18	; 0x06
     176:	f8 87       	std	Y+8, r31	; 0x08
     178:	8e 81       	ldd	r24, Y+6	; 0x06
     17a:	9f 81       	ldd	r25, Y+7	; 0x07
     17c:	88 15       	cp	r24, r8
     17e:	99 05       	cpc	r25, r9
     180:	3c f0       	brlt	.+14     	; 0x190 <i2c_eeprom_read_block+0xaa>
			{
				*data = i2c_receive(NACK);		// Daten Empfangen ohne Quittierung
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 67 00 	call	0xce	; 0xce <i2c_receive>
     188:	f3 01       	movw	r30, r6
     18a:	81 93       	st	Z+, r24
     18c:	3f 01       	movw	r6, r30
     18e:	05 c0       	rjmp	.+10     	; 0x19a <i2c_eeprom_read_block+0xb4>
				data++;
			}
			else
				*data = i2c_receive(ACK);		// Daten Empfangen mit Quittierung
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	0e 94 67 00 	call	0xce	; 0xce <i2c_receive>
     196:	f3 01       	movw	r30, r6
     198:	80 83       	st	Z, r24
				
			data++;
     19a:	ff ef       	ldi	r31, 0xFF	; 255
     19c:	6f 1a       	sub	r6, r31
     19e:	7f 0a       	sbc	r7, r31
			
			percent((i+1), blocksize);
     1a0:	ab 80       	ldd	r10, Y+3	; 0x03
     1a2:	b1 2c       	mov	r11, r1
     1a4:	c1 2c       	mov	r12, r1
     1a6:	d1 2c       	mov	r13, r1
     1a8:	e1 2c       	mov	r14, r1
     1aa:	f1 2c       	mov	r15, r1
     1ac:	00 e0       	ldi	r16, 0x00	; 0
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	28 85       	ldd	r18, Y+8	; 0x08
     1b2:	39 85       	ldd	r19, Y+9	; 0x09
     1b4:	49 81       	ldd	r20, Y+1	; 0x01
     1b6:	5a 81       	ldd	r21, Y+2	; 0x02
     1b8:	65 2d       	mov	r22, r5
     1ba:	72 2d       	mov	r23, r2
     1bc:	84 2d       	mov	r24, r4
     1be:	93 2d       	mov	r25, r3
     1c0:	0e 94 0c 07 	call	0xe18	; 0xe18 <percent>
     1c4:	2f ef       	ldi	r18, 0xFF	; 255
     1c6:	82 1a       	sub	r8, r18
     1c8:	92 0a       	sbc	r9, r18
     1ca:	28 85       	ldd	r18, Y+8	; 0x08
     1cc:	39 85       	ldd	r19, Y+9	; 0x09
     1ce:	49 81       	ldd	r20, Y+1	; 0x01
     1d0:	5a 81       	ldd	r21, Y+2	; 0x02
     1d2:	65 2d       	mov	r22, r5
     1d4:	72 2d       	mov	r23, r2
     1d6:	84 2d       	mov	r24, r4
     1d8:	93 2d       	mov	r25, r3
     1da:	a1 e0       	ldi	r26, 0x01	; 1
     1dc:	0e 94 23 09 	call	0x1246	; 0x1246 <__adddi3_s8>
     1e0:	28 87       	std	Y+8, r18	; 0x08
     1e2:	39 87       	std	Y+9, r19	; 0x09
     1e4:	49 83       	std	Y+1, r20	; 0x01
     1e6:	5a 83       	std	Y+2, r21	; 0x02
     1e8:	56 2e       	mov	r5, r22
     1ea:	27 2e       	mov	r2, r23
     1ec:	48 2e       	mov	r4, r24
     1ee:	39 2e       	mov	r3, r25
		// EEPROM Lesen initiieren
		i2c_start();
		i2c_transmit(deviceaddr | I2C_READ);
		
		// Datenblock aus EEPROM lesen
		for(unsigned char i=0; i < blocksize; i++)
     1f0:	8c 81       	ldd	r24, Y+4	; 0x04
     1f2:	9d 81       	ldd	r25, Y+5	; 0x05
     1f4:	88 16       	cp	r8, r24
     1f6:	99 06       	cpc	r9, r25
     1f8:	09 f0       	breq	.+2      	; 0x1fc <i2c_eeprom_read_block+0x116>
     1fa:	be cf       	rjmp	.-132    	; 0x178 <i2c_eeprom_read_block+0x92>
//	+---------------------------------------------------------------+
//	|					I²C STOP Kommando							|
//	+---------------------------------------------------------------+
void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     1fc:	84 e9       	ldi	r24, 0x94	; 148
     1fe:	86 bf       	out	0x36, r24	; 54
			
			percent((i+1), blocksize);
		}
		
		i2c_stop();
}
     200:	29 96       	adiw	r28, 0x09	; 9
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	df 90       	pop	r13
     21a:	cf 90       	pop	r12
     21c:	bf 90       	pop	r11
     21e:	af 90       	pop	r10
     220:	9f 90       	pop	r9
     222:	8f 90       	pop	r8
     224:	7f 90       	pop	r7
     226:	6f 90       	pop	r6
     228:	5f 90       	pop	r5
     22a:	4f 90       	pop	r4
     22c:	3f 90       	pop	r3
     22e:	2f 90       	pop	r2
     230:	08 95       	ret

00000232 <i2c_eeprom_write_block>:

//	+---------------------------------------------------------------+
//	|					I²C EEPROM Block schreiben					|
//	+---------------------------------------------------------------+
unsigned char i2c_eeprom_write_block(unsigned char deviceaddr, unsigned char wordaddr, unsigned char *data, unsigned char blocksize)
{
     232:	3f 92       	push	r3
     234:	4f 92       	push	r4
     236:	5f 92       	push	r5
     238:	6f 92       	push	r6
     23a:	7f 92       	push	r7
     23c:	8f 92       	push	r8
     23e:	9f 92       	push	r9
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	48 2e       	mov	r4, r24
     25a:	36 2e       	mov	r3, r22
     25c:	7a 01       	movw	r14, r20
     25e:	52 2e       	mov	r5, r18
		if(read[j] != *data)
			return 0x00;
		data++;
	}
	return 0xFF;
}
     260:	8d b6       	in	r8, 0x3d	; 61
     262:	9e b6       	in	r9, 0x3e	; 62
//	+---------------------------------------------------------------+
//	|					I²C EEPROM Block schreiben					|
//	+---------------------------------------------------------------+
unsigned char i2c_eeprom_write_block(unsigned char deviceaddr, unsigned char wordaddr, unsigned char *data, unsigned char blocksize)
{
	unsigned char read[blocksize];
     264:	62 2e       	mov	r6, r18
     266:	71 2c       	mov	r7, r1
     268:	8d b7       	in	r24, 0x3d	; 61
     26a:	9e b7       	in	r25, 0x3e	; 62
     26c:	86 19       	sub	r24, r6
     26e:	97 09       	sbc	r25, r7
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	9e bf       	out	0x3e, r25	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	8d bf       	out	0x3d, r24	; 61
     27a:	ed b7       	in	r30, 0x3d	; 61
     27c:	fe b7       	in	r31, 0x3e	; 62
     27e:	31 96       	adiw	r30, 0x01	; 1
     280:	5f 01       	movw	r10, r30
	
	// Array in EEPROM schreiben
	i2c_start();
     282:	0e 94 5a 00 	call	0xb4	; 0xb4 <i2c_start>
	i2c_transmit(deviceaddr | I2C_WRITE);
     286:	84 2d       	mov	r24, r4
     288:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_transmit>
	i2c_transmit(wordaddr);
     28c:	83 2d       	mov	r24, r3
     28e:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_transmit>
	
	for(unsigned char i=0; i < blocksize; i++)
     292:	55 20       	and	r5, r5
     294:	01 f1       	breq	.+64     	; 0x2d6 <i2c_eeprom_write_block+0xa4>
     296:	cc 24       	eor	r12, r12
     298:	ca 94       	dec	r12
     29a:	c5 0c       	add	r12, r5
     29c:	d1 2c       	mov	r13, r1
     29e:	ff ef       	ldi	r31, 0xFF	; 255
     2a0:	cf 1a       	sub	r12, r31
     2a2:	df 0a       	sbc	r13, r31
     2a4:	87 01       	movw	r16, r14
     2a6:	0c 0d       	add	r16, r12
     2a8:	1d 1d       	adc	r17, r13
	{
		i2c_transmit(*data);
     2aa:	f7 01       	movw	r30, r14
     2ac:	81 91       	ld	r24, Z+
     2ae:	7f 01       	movw	r14, r30
     2b0:	0e 94 60 00 	call	0xc0	; 0xc0 <i2c_transmit>
	// Array in EEPROM schreiben
	i2c_start();
	i2c_transmit(deviceaddr | I2C_WRITE);
	i2c_transmit(wordaddr);
	
	for(unsigned char i=0; i < blocksize; i++)
     2b4:	e0 16       	cp	r14, r16
     2b6:	f1 06       	cpc	r15, r17
     2b8:	c1 f7       	brne	.-16     	; 0x2aa <i2c_eeprom_write_block+0x78>
     2ba:	1d c0       	rjmp	.+58     	; 0x2f6 <i2c_eeprom_write_block+0xc4>
	// oder
	// i2c_eeprom_read_block(deviceaddr, wordaddr, read, blocksize);
	
	for(unsigned char j=0; j < blocksize; j++)
	{
		if(read[j] != *data)
     2bc:	91 91       	ld	r25, Z+
     2be:	8d 91       	ld	r24, X+
     2c0:	98 13       	cpse	r25, r24
     2c2:	05 c0       	rjmp	.+10     	; 0x2ce <i2c_eeprom_write_block+0x9c>
	// Array aus EEPROM lesen
	i2c_eeprom_read_block(deviceaddr, wordaddr, &read[0], blocksize);
	// oder
	// i2c_eeprom_read_block(deviceaddr, wordaddr, read, blocksize);
	
	for(unsigned char j=0; j < blocksize; j++)
     2c4:	ec 15       	cp	r30, r12
     2c6:	fd 05       	cpc	r31, r13
     2c8:	c9 f7       	brne	.-14     	; 0x2bc <i2c_eeprom_write_block+0x8a>
	{
		if(read[j] != *data)
			return 0x00;
		data++;
	}
	return 0xFF;
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	31 c0       	rjmp	.+98     	; 0x330 <i2c_eeprom_write_block+0xfe>
	// i2c_eeprom_read_block(deviceaddr, wordaddr, read, blocksize);
	
	for(unsigned char j=0; j < blocksize; j++)
	{
		if(read[j] != *data)
			return 0x00;
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	2f c0       	rjmp	.+94     	; 0x330 <i2c_eeprom_write_block+0xfe>
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	2d c0       	rjmp	.+90     	; 0x330 <i2c_eeprom_write_block+0xfe>
//	+---------------------------------------------------------------+
//	|					I²C STOP Kommando							|
//	+---------------------------------------------------------------+
void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     2d6:	84 e9       	ldi	r24, 0x94	; 148
     2d8:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2da:	87 e9       	ldi	r24, 0x97	; 151
     2dc:	9a e3       	ldi	r25, 0x3A	; 58
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <i2c_eeprom_write_block+0xac>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <i2c_eeprom_write_block+0xb2>
     2e4:	00 00       	nop
	
	// Wartezeit bis Daten in EEPROM gespeichert
	_delay_ms(I2C_EEPROM_WRITE);
	
	// Array aus EEPROM lesen
	i2c_eeprom_read_block(deviceaddr, wordaddr, &read[0], blocksize);
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	a5 01       	movw	r20, r10
     2ea:	63 2d       	mov	r22, r3
     2ec:	84 2d       	mov	r24, r4
     2ee:	0e 94 73 00 	call	0xe6	; 0xe6 <i2c_eeprom_read_block>
	{
		if(read[j] != *data)
			return 0x00;
		data++;
	}
	return 0xFF;
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	1d c0       	rjmp	.+58     	; 0x330 <i2c_eeprom_write_block+0xfe>
//	+---------------------------------------------------------------+
//	|					I²C STOP Kommando							|
//	+---------------------------------------------------------------+
void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     2f6:	84 e9       	ldi	r24, 0x94	; 148
     2f8:	86 bf       	out	0x36, r24	; 54
		i2c_transmit(*data);
		data++;
	}
	
	i2c_stop();
	data = data - blocksize;
     2fa:	06 19       	sub	r16, r6
     2fc:	17 09       	sbc	r17, r7
     2fe:	e7 e9       	ldi	r30, 0x97	; 151
     300:	fa e3       	ldi	r31, 0x3A	; 58
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <i2c_eeprom_write_block+0xd0>
     306:	00 c0       	rjmp	.+0      	; 0x308 <i2c_eeprom_write_block+0xd6>
     308:	00 00       	nop
	
	// Wartezeit bis Daten in EEPROM gespeichert
	_delay_ms(I2C_EEPROM_WRITE);
	
	// Array aus EEPROM lesen
	i2c_eeprom_read_block(deviceaddr, wordaddr, &read[0], blocksize);
     30a:	25 2d       	mov	r18, r5
     30c:	a5 01       	movw	r20, r10
     30e:	63 2d       	mov	r22, r3
     310:	84 2d       	mov	r24, r4
     312:	0e 94 73 00 	call	0xe6	; 0xe6 <i2c_eeprom_read_block>
	// oder
	// i2c_eeprom_read_block(deviceaddr, wordaddr, read, blocksize);
	
	for(unsigned char j=0; j < blocksize; j++)
	{
		if(read[j] != *data)
     316:	f5 01       	movw	r30, r10
     318:	90 81       	ld	r25, Z
     31a:	f8 01       	movw	r30, r16
     31c:	80 81       	ld	r24, Z
     31e:	98 13       	cpse	r25, r24
     320:	d8 cf       	rjmp	.-80     	; 0x2d2 <i2c_eeprom_write_block+0xa0>
     322:	f5 01       	movw	r30, r10
     324:	31 96       	adiw	r30, 0x01	; 1
     326:	d8 01       	movw	r26, r16
     328:	11 96       	adiw	r26, 0x01	; 1
     32a:	ca 0c       	add	r12, r10
     32c:	db 1c       	adc	r13, r11
     32e:	ca cf       	rjmp	.-108    	; 0x2c4 <i2c_eeprom_write_block+0x92>
			return 0x00;
		data++;
	}
	return 0xFF;
}
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	9e be       	out	0x3e, r9	; 62
     336:	0f be       	out	0x3f, r0	; 63
     338:	8d be       	out	0x3d, r8	; 61
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	df 90       	pop	r13
     348:	cf 90       	pop	r12
     34a:	bf 90       	pop	r11
     34c:	af 90       	pop	r10
     34e:	9f 90       	pop	r9
     350:	8f 90       	pop	r8
     352:	7f 90       	pop	r7
     354:	6f 90       	pop	r6
     356:	5f 90       	pop	r5
     358:	4f 90       	pop	r4
     35a:	3f 90       	pop	r3
     35c:	08 95       	ret

0000035e <lcd_zToLCD>:
*************************************************************/
{
	//char D=0;

	//LCD_PORT = 1<< EN;
	PORTA|=1<< EN;
     35e:	dc 9a       	sbi	0x1b, 4	; 27
     360:	e7 e5       	ldi	r30, 0x57	; 87
     362:	f2 e0       	ldi	r31, 0x02	; 2
     364:	31 97       	sbiw	r30, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <lcd_zToLCD+0x6>
     368:	00 c0       	rjmp	.+0      	; 0x36a <lcd_zToLCD+0xc>
     36a:	00 00       	nop

	_delay_ms(WAIT_0);	

	PORTA&=~ (1<<RS);
     36c:	de 98       	cbi	0x1b, 6	; 27
	PORTB&=~(1<<DB4 | 1<<DB5 | 1<<DB6 | 1<<DB7);
     36e:	98 b3       	in	r25, 0x18	; 24
     370:	9b 71       	andi	r25, 0x1B	; 27
     372:	98 bb       	out	0x18, r25	; 24
	
	if (dataD & 0x01) PORTB|=1<<DB4;;
     374:	80 fd       	sbrc	r24, 0
     376:	c2 9a       	sbi	0x18, 2	; 24
	if (dataD & 0x02) PORTB|=1<<DB5;
     378:	81 fd       	sbrc	r24, 1
     37a:	c5 9a       	sbi	0x18, 5	; 24
	if (dataD & 0x04) PORTB|=1<<DB6;
     37c:	82 fd       	sbrc	r24, 2
     37e:	c6 9a       	sbi	0x18, 6	; 24
	if (dataD & 0x08) PORTB|=1<<DB7;
     380:	83 fd       	sbrc	r24, 3
     382:	c7 9a       	sbi	0x18, 7	; 24
	if (dataD & 0x10) PORTA|=1<<RS; 
     384:	84 fd       	sbrc	r24, 4
     386:	de 9a       	sbi	0x1b, 6	; 27

	//LCD_PORT &= ~(1<< EN);
	PORTA &= ~(1<< EN);
     388:	dc 98       	cbi	0x1b, 4	; 27
     38a:	87 e5       	ldi	r24, 0x57	; 87
     38c:	92 e0       	ldi	r25, 0x02	; 2
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <lcd_zToLCD+0x30>
     392:	00 c0       	rjmp	.+0      	; 0x394 <lcd_zToLCD+0x36>
     394:	00 00       	nop
     396:	08 95       	ret

00000398 <lcd_home>:
     398:	8f e5       	ldi	r24, 0x5F	; 95
     39a:	9a ee       	ldi	r25, 0xEA	; 234
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_home+0x4>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <lcd_home+0xa>
     3a2:	00 00       	nop
setzt den Adresszaehler des DD-RAM auf Adresse 0. Der Inhalt des DD-RAMS
bleibt unveraendert. Der Cursor wird auf die erste Position der ersten
Zeile gesetzt.
*************************************************************/
{
	_delay_ms(WAIT_2);	lcd_zToLCD(0x00);      	// LCD-Return-Home 1
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
     3aa:	8f e5       	ldi	r24, 0x5F	; 95
     3ac:	9a ee       	ldi	r25, 0xEA	; 234
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_home+0x16>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <lcd_home+0x1c>
     3b4:	00 00       	nop
	_delay_ms(WAIT_2);	lcd_zToLCD(0x02);       // LCD-Return-Home 2
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
     3bc:	08 95       	ret

000003be <lcd_init>:
*************************************************************/
{
	//LCD_DDR |= 1<<RS | 1<<RW | 1<<EN | 1<<VEE | 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
	//LCD_DDR |= 1<<RS | 1<<EN | 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;

	DDRA|= 1<<RS | 1<<EN ;
     3be:	8a b3       	in	r24, 0x1a	; 26
     3c0:	80 65       	ori	r24, 0x50	; 80
     3c2:	8a bb       	out	0x1a, r24	; 26
	DDRB|= 1<<DB7 | 1<<DB6 | 1<<DB5 | 1<<DB4;
     3c4:	87 b3       	in	r24, 0x17	; 23
     3c6:	84 6e       	ori	r24, 0xE4	; 228
     3c8:	87 bb       	out	0x17, r24	; 23
     3ca:	8f e5       	ldi	r24, 0x5F	; 95
     3cc:	9a ee       	ldi	r25, 0xEA	; 234
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <lcd_init+0x10>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <lcd_init+0x16>
     3d4:	00 00       	nop

	_delay_ms(20);
	lcd_zToLCD(0x03);       // Function Set A
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
     3dc:	8f e2       	ldi	r24, 0x2F	; 47
     3de:	95 e7       	ldi	r25, 0x75	; 117
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_init+0x22>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <lcd_init+0x28>
     3e6:	00 00       	nop
	_delay_ms(10);
	lcd_zToLCD(0x43);       // Function Set B
     3e8:	83 e4       	ldi	r24, 0x43	; 67
     3ea:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
     3ee:	87 eb       	ldi	r24, 0xB7	; 183
     3f0:	9b e0       	ldi	r25, 0x0B	; 11
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <lcd_init+0x34>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <lcd_init+0x3a>
     3f8:	00 00       	nop
	_delay_ms(1);	
	lcd_zToLCD(0x03);       // Function Set C
     3fa:	83 e0       	ldi	r24, 0x03	; 3
     3fc:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>

	lcd_zToLCD(0x02);       // Function Set D
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
	
	lcd_zToLCD(0x02);       // Funktion Set High Byte
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
	lcd_zToLCD(0x08);       // Funktion Set Low Byte
     40c:	88 e0       	ldi	r24, 0x08	; 8
     40e:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
	
	lcd_zToLCD(0x00);       // Display On High Byte
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
	lcd_zToLCD(0x0C);       // Display On Low Byte	
     418:	8c e0       	ldi	r24, 0x0C	; 12
     41a:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Display Clear High Byte
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
	lcd_zToLCD(0x01);       // Display Clear Low Byte	
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>

	lcd_zToLCD(0x00);       // Entry Mode Set High Byte
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
	lcd_zToLCD(0x06);       // Entry Mode Set Low Byte
     430:	86 e0       	ldi	r24, 0x06	; 6
     432:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
     436:	87 eb       	ldi	r24, 0xB7	; 183
     438:	9b e0       	ldi	r25, 0x0B	; 11
     43a:	01 97       	sbiw	r24, 0x01	; 1
     43c:	f1 f7       	brne	.-4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     440:	00 00       	nop
	_delay_ms(1);

	lcd_home();
     442:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_home>
	init_printf(NULL,my_putc);
     446:	6a e2       	ldi	r22, 0x2A	; 42
     448:	72 e0       	ldi	r23, 0x02	; 2
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <init_printf>
     452:	08 95       	ret

00000454 <my_putc>:
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
}

void my_putc ( void* p, char c)
{
     454:	cf 93       	push	r28
     456:	c6 2f       	mov	r28, r22
	//unsigned char Zeichen;
	char Zeichen;
	
	Zeichen = c;
	Zeichen>>=4;
     458:	86 2f       	mov	r24, r22
     45a:	82 95       	swap	r24
     45c:	8f 70       	andi	r24, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45e:	e7 e5       	ldi	r30, 0x57	; 87
     460:	f2 e0       	ldi	r31, 0x02	; 2
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <__stack+0x3>
     466:	00 c0       	rjmp	.+0      	; 0x468 <__stack+0x9>
     468:	00 00       	nop
	Zeichen|=0x10;
	_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe High Bytes
     46a:	80 61       	ori	r24, 0x10	; 16
     46c:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
	Zeichen = c;
	Zeichen&=0x0f;
     470:	8c 2f       	mov	r24, r28
     472:	8f 70       	andi	r24, 0x0F	; 15
     474:	e7 e5       	ldi	r30, 0x57	; 87
     476:	f2 e0       	ldi	r31, 0x02	; 2
     478:	31 97       	sbiw	r30, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <__stack+0x19>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <__stack+0x1f>
     47e:	00 00       	nop
	Zeichen|=0x10;
	_delay_us(200);       //Wartezeit 200us
	lcd_zToLCD(Zeichen);  //Zeichenausgabe Low Byte
     480:	80 61       	ori	r24, 0x10	; 16
     482:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <lcd_pos>:

Die 1. Zeile beginnt mit der DD-Adresse 0x00.
Die 2. Zeile beginnt mit der DD-Adresse 0x40.
*****************************************************************/
void lcd_pos(unsigned char zeile, unsigned char Pos)
{
     48a:	cf 93       	push	r28
     48c:	c6 2f       	mov	r28, r22
	unsigned char Zeichen;

	if (zeile) Pos+=0x40;	
     48e:	81 11       	cpse	r24, r1
     490:	c0 5c       	subi	r28, 0xC0	; 192
  	Zeichen=Pos;			//Ausgabe der DD-Ram-Adresse
	Zeichen>>=4;
     492:	8c 2f       	mov	r24, r28
     494:	82 95       	swap	r24
     496:	8f 70       	andi	r24, 0x0F	; 15
     498:	e7 e5       	ldi	r30, 0x57	; 87
     49a:	f2 e0       	ldi	r31, 0x02	; 2
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <lcd_pos+0x12>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <lcd_pos+0x18>
     4a2:	00 00       	nop
	Zeichen|=0x08;		
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe High Bytes
     4a4:	88 60       	ori	r24, 0x08	; 8
     4a6:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
     4aa:	87 e5       	ldi	r24, 0x57	; 87
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <lcd_pos+0x24>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <lcd_pos+0x2a>
     4b4:	00 00       	nop
	Zeichen=Pos;
	Zeichen&=0x0F;	
	_delay_us(200);         //Wartezeit 200us
	lcd_zToLCD(Zeichen);    //Zeichenausgabe Low Byte
     4b6:	8c 2f       	mov	r24, r28
     4b8:	8f 70       	andi	r24, 0x0F	; 15
     4ba:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_zToLCD>
}
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <ui2a>:
	va_end(va);
	}

static void putcp(void* p,char c)
	{
	*(*((char**)p))++ = c;
     4c2:	8f 92       	push	r8
     4c4:	9f 92       	push	r9
     4c6:	af 92       	push	r10
     4c8:	bf 92       	push	r11
     4ca:	cf 92       	push	r12
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	ec 01       	movw	r28, r24
     4dc:	8b 01       	movw	r16, r22
     4de:	5a 01       	movw	r10, r20
     4e0:	79 01       	movw	r14, r18
     4e2:	86 17       	cp	r24, r22
     4e4:	97 07       	cpc	r25, r23
     4e6:	a0 f0       	brcs	.+40     	; 0x510 <ui2a+0x4e>
     4e8:	e1 e0       	ldi	r30, 0x01	; 1
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	cf 01       	movw	r24, r30
     4ee:	80 9f       	mul	r24, r16
     4f0:	f0 01       	movw	r30, r0
     4f2:	81 9f       	mul	r24, r17
     4f4:	f0 0d       	add	r31, r0
     4f6:	90 9f       	mul	r25, r16
     4f8:	f0 0d       	add	r31, r0
     4fa:	11 24       	eor	r1, r1
     4fc:	ce 01       	movw	r24, r28
     4fe:	bf 01       	movw	r22, r30
     500:	0e 94 8e 08 	call	0x111c	; 0x111c <__udivmodhi4>
     504:	60 17       	cp	r22, r16
     506:	71 07       	cpc	r23, r17
     508:	88 f7       	brcc	.-30     	; 0x4ec <ui2a+0x2a>
     50a:	30 97       	sbiw	r30, 0x00	; 0
     50c:	19 f4       	brne	.+6      	; 0x514 <ui2a+0x52>
     50e:	37 c0       	rjmp	.+110    	; 0x57e <ui2a+0xbc>
     510:	e1 e0       	ldi	r30, 0x01	; 1
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	c1 2c       	mov	r12, r1
     516:	d1 2c       	mov	r13, r1
     518:	01 c0       	rjmp	.+2      	; 0x51c <ui2a+0x5a>
     51a:	7a 01       	movw	r14, r20
     51c:	ce 01       	movw	r24, r28
     51e:	bf 01       	movw	r22, r30
     520:	0e 94 8e 08 	call	0x111c	; 0x111c <__udivmodhi4>
     524:	36 2f       	mov	r19, r22
     526:	26 2f       	mov	r18, r22
     528:	86 2e       	mov	r8, r22
     52a:	97 2e       	mov	r9, r23
     52c:	c8 2f       	mov	r28, r24
     52e:	d9 2f       	mov	r29, r25
     530:	cf 01       	movw	r24, r30
     532:	b8 01       	movw	r22, r16
     534:	0e 94 8e 08 	call	0x111c	; 0x111c <__udivmodhi4>
     538:	fb 01       	movw	r30, r22
     53a:	c1 14       	cp	r12, r1
     53c:	d1 04       	cpc	r13, r1
     53e:	39 f4       	brne	.+14     	; 0x54e <ui2a+0x8c>
     540:	18 14       	cp	r1, r8
     542:	19 04       	cpc	r1, r9
     544:	24 f0       	brlt	.+8      	; 0x54e <ui2a+0x8c>
     546:	30 97       	sbiw	r30, 0x00	; 0
     548:	11 f1       	breq	.+68     	; 0x58e <ui2a+0xcc>
     54a:	a7 01       	movw	r20, r14
     54c:	e6 cf       	rjmp	.-52     	; 0x51a <ui2a+0x58>
     54e:	a7 01       	movw	r20, r14
     550:	4f 5f       	subi	r20, 0xFF	; 255
     552:	5f 4f       	sbci	r21, 0xFF	; 255
     554:	9a e0       	ldi	r25, 0x0A	; 10
     556:	89 16       	cp	r8, r25
     558:	91 04       	cpc	r9, r1
     55a:	2c f0       	brlt	.+10     	; 0x566 <ui2a+0xa4>
     55c:	a1 14       	cp	r10, r1
     55e:	b1 04       	cpc	r11, r1
     560:	21 f4       	brne	.+8      	; 0x56a <ui2a+0xa8>
     562:	87 e5       	ldi	r24, 0x57	; 87
     564:	03 c0       	rjmp	.+6      	; 0x56c <ui2a+0xaa>
     566:	80 e3       	ldi	r24, 0x30	; 48
     568:	01 c0       	rjmp	.+2      	; 0x56c <ui2a+0xaa>
     56a:	87 e3       	ldi	r24, 0x37	; 55
     56c:	38 0f       	add	r19, r24
     56e:	d7 01       	movw	r26, r14
     570:	3c 93       	st	X, r19
     572:	bf ef       	ldi	r27, 0xFF	; 255
     574:	cb 1a       	sub	r12, r27
     576:	db 0a       	sbc	r13, r27
     578:	30 97       	sbiw	r30, 0x00	; 0
     57a:	79 f6       	brne	.-98     	; 0x51a <ui2a+0x58>
     57c:	01 c0       	rjmp	.+2      	; 0x580 <ui2a+0xbe>
     57e:	a7 01       	movw	r20, r14
     580:	fa 01       	movw	r30, r20
     582:	10 82       	st	Z, r1
     584:	0c c0       	rjmp	.+24     	; 0x59e <ui2a+0xdc>
     586:	20 5d       	subi	r18, 0xD0	; 208
     588:	d7 01       	movw	r26, r14
     58a:	2c 93       	st	X, r18
     58c:	f9 cf       	rjmp	.-14     	; 0x580 <ui2a+0xbe>
     58e:	a7 01       	movw	r20, r14
     590:	4f 5f       	subi	r20, 0xFF	; 255
     592:	5f 4f       	sbci	r21, 0xFF	; 255
     594:	ba e0       	ldi	r27, 0x0A	; 10
     596:	8b 16       	cp	r8, r27
     598:	91 04       	cpc	r9, r1
     59a:	ac f3       	brlt	.-22     	; 0x586 <ui2a+0xc4>
     59c:	df cf       	rjmp	.-66     	; 0x55c <ui2a+0x9a>
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	cf 90       	pop	r12
     5ae:	bf 90       	pop	r11
     5b0:	af 90       	pop	r10
     5b2:	9f 90       	pop	r9
     5b4:	8f 90       	pop	r8
     5b6:	08 95       	ret

000005b8 <putchw>:
     5b8:	9f 92       	push	r9
     5ba:	af 92       	push	r10
     5bc:	bf 92       	push	r11
     5be:	cf 92       	push	r12
     5c0:	df 92       	push	r13
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	6c 01       	movw	r12, r24
     5d0:	5b 01       	movw	r10, r22
     5d2:	21 11       	cpse	r18, r1
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <putchw+0x26>
     5d6:	68 94       	set
     5d8:	99 24       	eor	r9, r9
     5da:	95 f8       	bld	r9, 5
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <putchw+0x2e>
     5de:	0f 2e       	mov	r0, r31
     5e0:	f0 e3       	ldi	r31, 0x30	; 48
     5e2:	9f 2e       	mov	r9, r31
     5e4:	f0 2d       	mov	r31, r0
     5e6:	78 01       	movw	r14, r16
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	e8 1a       	sub	r14, r24
     5ec:	f8 0a       	sbc	r15, r24
     5ee:	f8 01       	movw	r30, r16
     5f0:	60 81       	ld	r22, Z
     5f2:	66 23       	and	r22, r22
     5f4:	49 f1       	breq	.+82     	; 0x648 <putchw+0x90>
     5f6:	14 16       	cp	r1, r20
     5f8:	15 06       	cpc	r1, r21
     5fa:	64 f5       	brge	.+88     	; 0x654 <putchw+0x9c>
     5fc:	f7 01       	movw	r30, r14
     5fe:	ca 01       	movw	r24, r20
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	21 91       	ld	r18, Z+
     604:	22 23       	and	r18, r18
     606:	d1 f0       	breq	.+52     	; 0x63c <putchw+0x84>
     608:	ac 01       	movw	r20, r24
     60a:	89 2b       	or	r24, r25
     60c:	c1 f7       	brne	.-16     	; 0x5fe <putchw+0x46>
     60e:	22 c0       	rjmp	.+68     	; 0x654 <putchw+0x9c>
     610:	69 2d       	mov	r22, r9
     612:	c6 01       	movw	r24, r12
     614:	f5 01       	movw	r30, r10
     616:	09 95       	icall
     618:	21 97       	sbiw	r28, 0x01	; 1
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	18 16       	cp	r1, r24
     620:	19 06       	cpc	r1, r25
     622:	b4 f3       	brlt	.-20     	; 0x610 <putchw+0x58>
     624:	f8 01       	movw	r30, r16
     626:	60 81       	ld	r22, Z
     628:	66 23       	and	r22, r22
     62a:	b9 f0       	breq	.+46     	; 0x65a <putchw+0xa2>
     62c:	e7 01       	movw	r28, r14
     62e:	c6 01       	movw	r24, r12
     630:	f5 01       	movw	r30, r10
     632:	09 95       	icall
     634:	69 91       	ld	r22, Y+
     636:	61 11       	cpse	r22, r1
     638:	fa cf       	rjmp	.-12     	; 0x62e <putchw+0x76>
     63a:	0f c0       	rjmp	.+30     	; 0x65a <putchw+0xa2>
     63c:	ea 01       	movw	r28, r20
     63e:	22 97       	sbiw	r28, 0x02	; 2
     640:	18 16       	cp	r1, r24
     642:	19 06       	cpc	r1, r25
     644:	2c f3       	brlt	.-54     	; 0x610 <putchw+0x58>
     646:	f2 cf       	rjmp	.-28     	; 0x62c <putchw+0x74>
     648:	ea 01       	movw	r28, r20
     64a:	21 97       	sbiw	r28, 0x01	; 1
     64c:	14 16       	cp	r1, r20
     64e:	15 06       	cpc	r1, r21
     650:	fc f2       	brlt	.-66     	; 0x610 <putchw+0x58>
     652:	03 c0       	rjmp	.+6      	; 0x65a <putchw+0xa2>
     654:	f8 01       	movw	r30, r16
     656:	60 81       	ld	r22, Z
     658:	e9 cf       	rjmp	.-46     	; 0x62c <putchw+0x74>
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	bf 90       	pop	r11
     66c:	af 90       	pop	r10
     66e:	9f 90       	pop	r9
     670:	08 95       	ret

00000672 <tfp_format>:
	while ((ch= *bf++))
		putf(putp,ch);
	}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
	{
     672:	2f 92       	push	r2
     674:	3f 92       	push	r3
     676:	4f 92       	push	r4
     678:	5f 92       	push	r5
     67a:	6f 92       	push	r6
     67c:	7f 92       	push	r7
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	60 97       	sbiw	r28, 0x10	; 16
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	4c 01       	movw	r8, r24
     6a8:	5b 01       	movw	r10, r22
     6aa:	6a 01       	movw	r12, r20
     6ac:	89 01       	movw	r16, r18
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     6ae:	21 2c       	mov	r2, r1
     6b0:	9e 01       	movw	r18, r28
     6b2:	2f 5f       	subi	r18, 0xFF	; 255
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	3e 87       	std	Y+14, r19	; 0x0e
     6b8:	2d 87       	std	Y+13, r18	; 0x0d
     6ba:	51 2c       	mov	r5, r1
     6bc:	31 2c       	mov	r3, r1

static void i2a (int num, char * bf)
	{
	if (num<0) {
		num=-num;
		*bf++ = '-';
     6be:	ce 01       	movw	r24, r28
     6c0:	02 96       	adiw	r24, 0x02	; 2
     6c2:	98 8b       	std	Y+16, r25	; 0x10
     6c4:	8f 87       	std	Y+15, r24	; 0x0f
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     6c6:	eb c0       	rjmp	.+470    	; 0x89e <tfp_format+0x22c>
		if (ch!='%') 
     6c8:	65 32       	cpi	r22, 0x25	; 37
     6ca:	39 f0       	breq	.+14     	; 0x6da <tfp_format+0x68>
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     6cc:	9f ef       	ldi	r25, 0xFF	; 255
     6ce:	c9 1a       	sub	r12, r25
     6d0:	d9 0a       	sbc	r13, r25
		if (ch!='%') 
			putf(putp,ch);
     6d2:	c4 01       	movw	r24, r8
     6d4:	f5 01       	movw	r30, r10
     6d6:	09 95       	icall
     6d8:	e2 c0       	rjmp	.+452    	; 0x89e <tfp_format+0x22c>
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
     6da:	f6 01       	movw	r30, r12
     6dc:	81 81       	ldd	r24, Z+1	; 0x01
			if (ch=='0') {
     6de:	80 33       	cpi	r24, 0x30	; 48
     6e0:	29 f0       	breq	.+10     	; 0x6ec <tfp_format+0x7a>
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
     6e2:	f2 e0       	ldi	r31, 0x02	; 2
     6e4:	cf 0e       	add	r12, r31
     6e6:	d1 1c       	adc	r13, r1

	while ((ch=*(fmt++))) {
		if (ch!='%') 
			putf(putp,ch);
		else {
			char lz=0;
     6e8:	41 2c       	mov	r4, r1
     6ea:	08 c0       	rjmp	.+16     	; 0x6fc <tfp_format+0x8a>
			char lng=0;
#endif
			int w=0;
			ch=*(fmt++);
			if (ch=='0') {
				ch=*(fmt++);
     6ec:	f6 01       	movw	r30, r12
     6ee:	82 81       	ldd	r24, Z+2	; 0x02
     6f0:	96 01       	movw	r18, r12
     6f2:	2d 5f       	subi	r18, 0xFD	; 253
     6f4:	3f 4f       	sbci	r19, 0xFF	; 255
     6f6:	69 01       	movw	r12, r18
				lz=1;
     6f8:	44 24       	eor	r4, r4
     6fa:	43 94       	inc	r4
				}
			if (ch>='0' && ch<='9') {
     6fc:	90 ed       	ldi	r25, 0xD0	; 208
     6fe:	98 0f       	add	r25, r24
     700:	9a 30       	cpi	r25, 0x0A	; 10
     702:	a0 f5       	brcc	.+104    	; 0x76c <tfp_format+0xfa>
     704:	a6 01       	movw	r20, r12
     706:	e5 2c       	mov	r14, r5
     708:	f3 2c       	mov	r15, r3
     70a:	11 c0       	rjmp	.+34     	; 0x72e <tfp_format+0xbc>
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
		num=num*base+digit;
     70c:	c7 01       	movw	r24, r14
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	ee 0c       	add	r14, r14
     714:	ff 1c       	adc	r15, r15
     716:	ee 0c       	add	r14, r14
     718:	ff 1c       	adc	r15, r15
     71a:	ee 0c       	add	r14, r14
     71c:	ff 1c       	adc	r15, r15
     71e:	e8 0e       	add	r14, r24
     720:	f9 1e       	adc	r15, r25
     722:	e2 0e       	add	r14, r18
     724:	f3 1e       	adc	r15, r19
		ch=*p++;
     726:	f6 01       	movw	r30, r12
     728:	80 81       	ld	r24, Z
     72a:	4f 5f       	subi	r20, 0xFF	; 255
     72c:	5f 4f       	sbci	r21, 0xFF	; 255
     72e:	6a 01       	movw	r12, r20
	ui2a(num,10,0,bf);
	}

static int a2d(char ch)
	{
	if (ch>='0' && ch<='9') 
     730:	90 ed       	ldi	r25, 0xD0	; 208
     732:	98 0f       	add	r25, r24
     734:	9a 30       	cpi	r25, 0x0A	; 10
     736:	28 f4       	brcc	.+10     	; 0x742 <tfp_format+0xd0>
		return ch-'0';
     738:	28 2f       	mov	r18, r24
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	20 53       	subi	r18, 0x30	; 48
     73e:	31 09       	sbc	r19, r1
     740:	11 c0       	rjmp	.+34     	; 0x764 <tfp_format+0xf2>
	else if (ch>='a' && ch<='f')
     742:	9f e9       	ldi	r25, 0x9F	; 159
     744:	98 0f       	add	r25, r24
     746:	96 30       	cpi	r25, 0x06	; 6
     748:	28 f4       	brcc	.+10     	; 0x754 <tfp_format+0xe2>
		return ch-'a'+10;
     74a:	28 2f       	mov	r18, r24
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	27 55       	subi	r18, 0x57	; 87
     750:	31 09       	sbc	r19, r1
     752:	08 c0       	rjmp	.+16     	; 0x764 <tfp_format+0xf2>
	else if (ch>='A' && ch<='F')
     754:	9f eb       	ldi	r25, 0xBF	; 191
     756:	98 0f       	add	r25, r24
     758:	96 30       	cpi	r25, 0x06	; 6
     75a:	50 f4       	brcc	.+20     	; 0x770 <tfp_format+0xfe>
		return ch-'A'+10;
     75c:	28 2f       	mov	r18, r24
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	27 53       	subi	r18, 0x37	; 55
     762:	31 09       	sbc	r19, r1
	{
	char* p= *src;
	int num=0;
	int digit;
	while ((digit=a2d(ch))>=0) {
		if (digit>base) break;
     764:	2b 30       	cpi	r18, 0x0B	; 11
     766:	31 05       	cpc	r19, r1
     768:	88 f2       	brcs	.-94     	; 0x70c <tfp_format+0x9a>
     76a:	02 c0       	rjmp	.+4      	; 0x770 <tfp_format+0xfe>
		else {
			char lz=0;
#ifdef 	PRINTF_LONG_SUPPORT
			char lng=0;
#endif
			int w=0;
     76c:	e5 2c       	mov	r14, r5
     76e:	f3 2c       	mov	r15, r3
			if (ch=='l') {
				ch=*(fmt++);
				lng=1;
			}
#endif
			switch (ch) {
     770:	83 36       	cpi	r24, 0x63	; 99
     772:	09 f4       	brne	.+2      	; 0x776 <tfp_format+0x104>
     774:	76 c0       	rjmp	.+236    	; 0x862 <tfp_format+0x1f0>
     776:	50 f4       	brcc	.+20     	; 0x78c <tfp_format+0x11a>
     778:	85 32       	cpi	r24, 0x25	; 37
     77a:	09 f4       	brne	.+2      	; 0x77e <tfp_format+0x10c>
     77c:	8c c0       	rjmp	.+280    	; 0x896 <tfp_format+0x224>
     77e:	88 35       	cpi	r24, 0x58	; 88
     780:	09 f4       	brne	.+2      	; 0x784 <tfp_format+0x112>
     782:	50 c0       	rjmp	.+160    	; 0x824 <tfp_format+0x1b2>
     784:	88 23       	and	r24, r24
     786:	09 f4       	brne	.+2      	; 0x78a <tfp_format+0x118>
     788:	8e c0       	rjmp	.+284    	; 0x8a6 <tfp_format+0x234>
     78a:	89 c0       	rjmp	.+274    	; 0x89e <tfp_format+0x22c>
     78c:	83 37       	cpi	r24, 0x73	; 115
     78e:	09 f4       	brne	.+2      	; 0x792 <tfp_format+0x120>
     790:	73 c0       	rjmp	.+230    	; 0x878 <tfp_format+0x206>
     792:	18 f4       	brcc	.+6      	; 0x79a <tfp_format+0x128>
     794:	84 36       	cpi	r24, 0x64	; 100
     796:	11 f1       	breq	.+68     	; 0x7dc <tfp_format+0x16a>
     798:	82 c0       	rjmp	.+260    	; 0x89e <tfp_format+0x22c>
     79a:	85 37       	cpi	r24, 0x75	; 117
     79c:	21 f0       	breq	.+8      	; 0x7a6 <tfp_format+0x134>
     79e:	88 37       	cpi	r24, 0x78	; 120
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <tfp_format+0x132>
     7a2:	40 c0       	rjmp	.+128    	; 0x824 <tfp_format+0x1b2>
     7a4:	7c c0       	rjmp	.+248    	; 0x89e <tfp_format+0x22c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
     7a6:	38 01       	movw	r6, r16
     7a8:	f2 e0       	ldi	r31, 0x02	; 2
     7aa:	6f 0e       	add	r6, r31
     7ac:	71 1c       	adc	r7, r1
     7ae:	9e 01       	movw	r18, r28
     7b0:	2f 5f       	subi	r18, 0xFF	; 255
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	45 2d       	mov	r20, r5
     7b6:	53 2d       	mov	r21, r3
     7b8:	6a e0       	ldi	r22, 0x0A	; 10
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	f8 01       	movw	r30, r16
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <ui2a>
					putchw(putp,putf,w,lz,bf);
     7c6:	8e 01       	movw	r16, r28
     7c8:	0f 5f       	subi	r16, 0xFF	; 255
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	24 2d       	mov	r18, r4
     7ce:	a7 01       	movw	r20, r14
     7d0:	b5 01       	movw	r22, r10
     7d2:	c4 01       	movw	r24, r8
     7d4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),10,0,bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),10,0,bf);
     7d8:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
     7da:	61 c0       	rjmp	.+194    	; 0x89e <tfp_format+0x22c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
     7dc:	38 01       	movw	r6, r16
     7de:	f2 e0       	ldi	r31, 0x02	; 2
     7e0:	6f 0e       	add	r6, r31
     7e2:	71 1c       	adc	r7, r1
     7e4:	f8 01       	movw	r30, r16
     7e6:	80 81       	ld	r24, Z
     7e8:	91 81       	ldd	r25, Z+1	; 0x01
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
     7ea:	99 23       	and	r25, r25
     7ec:	44 f4       	brge	.+16     	; 0x7fe <tfp_format+0x18c>
		num=-num;
     7ee:	91 95       	neg	r25
     7f0:	81 95       	neg	r24
     7f2:	91 09       	sbc	r25, r1
		*bf++ = '-';
     7f4:	fd e2       	ldi	r31, 0x2D	; 45
     7f6:	f9 83       	std	Y+1, r31	; 0x01
     7f8:	2f 85       	ldd	r18, Y+15	; 0x0f
     7fa:	38 89       	ldd	r19, Y+16	; 0x10
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <tfp_format+0x190>
	*bf=0;
	}

static void i2a (int num, char * bf)
	{
	if (num<0) {
     7fe:	2d 85       	ldd	r18, Y+13	; 0x0d
     800:	3e 85       	ldd	r19, Y+14	; 0x0e
		num=-num;
		*bf++ = '-';
		}
	ui2a(num,10,0,bf);
     802:	45 2d       	mov	r20, r5
     804:	53 2d       	mov	r21, r3
     806:	6a e0       	ldi	r22, 0x0A	; 10
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <ui2a>
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
					putchw(putp,putf,w,lz,bf);
     80e:	8e 01       	movw	r16, r28
     810:	0f 5f       	subi	r16, 0xFF	; 255
     812:	1f 4f       	sbci	r17, 0xFF	; 255
     814:	24 2d       	mov	r18, r4
     816:	a7 01       	movw	r20, r14
     818:	b5 01       	movw	r22, r10
     81a:	c4 01       	movw	r24, r8
     81c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						li2a(va_arg(va, unsigned long int),bf);
					else
#endif
					i2a(va_arg(va, int),bf);
     820:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
     822:	3d c0       	rjmp	.+122    	; 0x89e <tfp_format+0x22c>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     824:	38 01       	movw	r6, r16
     826:	22 e0       	ldi	r18, 0x02	; 2
     828:	62 0e       	add	r6, r18
     82a:	71 1c       	adc	r7, r1
     82c:	41 e0       	ldi	r20, 0x01	; 1
     82e:	52 2d       	mov	r21, r2
     830:	88 35       	cpi	r24, 0x58	; 88
     832:	11 f0       	breq	.+4      	; 0x838 <tfp_format+0x1c6>
     834:	45 2d       	mov	r20, r5
     836:	53 2d       	mov	r21, r3
     838:	9e 01       	movw	r18, r28
     83a:	2f 5f       	subi	r18, 0xFF	; 255
     83c:	3f 4f       	sbci	r19, 0xFF	; 255
     83e:	60 e1       	ldi	r22, 0x10	; 16
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	f8 01       	movw	r30, r16
     844:	80 81       	ld	r24, Z
     846:	91 81       	ldd	r25, Z+1	; 0x01
     848:	0e 94 61 02 	call	0x4c2	; 0x4c2 <ui2a>
					putchw(putp,putf,w,lz,bf);
     84c:	8e 01       	movw	r16, r28
     84e:	0f 5f       	subi	r16, 0xFF	; 255
     850:	1f 4f       	sbci	r17, 0xFF	; 255
     852:	24 2d       	mov	r18, r4
     854:	a7 01       	movw	r20, r14
     856:	b5 01       	movw	r22, r10
     858:	c4 01       	movw	r24, r8
     85a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <putchw>
#ifdef 	PRINTF_LONG_SUPPORT
					if (lng)
						uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
					else
#endif
					ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
     85e:	83 01       	movw	r16, r6
					putchw(putp,putf,w,lz,bf);
					break;
     860:	1e c0       	rjmp	.+60     	; 0x89e <tfp_format+0x22c>
				case 'c' : 
					putf(putp,(char)(va_arg(va, int)));
     862:	78 01       	movw	r14, r16
     864:	f2 e0       	ldi	r31, 0x02	; 2
     866:	ef 0e       	add	r14, r31
     868:	f1 1c       	adc	r15, r1
     86a:	f8 01       	movw	r30, r16
     86c:	60 81       	ld	r22, Z
     86e:	c4 01       	movw	r24, r8
     870:	f5 01       	movw	r30, r10
     872:	09 95       	icall
     874:	87 01       	movw	r16, r14
					break;
     876:	13 c0       	rjmp	.+38     	; 0x89e <tfp_format+0x22c>
				case 's' : 
					putchw(putp,putf,w,0,va_arg(va, char*));
     878:	38 01       	movw	r6, r16
     87a:	f2 e0       	ldi	r31, 0x02	; 2
     87c:	6f 0e       	add	r6, r31
     87e:	71 1c       	adc	r7, r1
     880:	f8 01       	movw	r30, r16
     882:	00 81       	ld	r16, Z
     884:	11 81       	ldd	r17, Z+1	; 0x01
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	a7 01       	movw	r20, r14
     88a:	b5 01       	movw	r22, r10
     88c:	c4 01       	movw	r24, r8
     88e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <putchw>
     892:	83 01       	movw	r16, r6
					break;
     894:	04 c0       	rjmp	.+8      	; 0x89e <tfp_format+0x22c>
				case '%' :
					putf(putp,ch);
     896:	65 e2       	ldi	r22, 0x25	; 37
     898:	c4 01       	movw	r24, r8
     89a:	f5 01       	movw	r30, r10
     89c:	09 95       	icall
	char bf[12];
    
	char ch;


	while ((ch=*(fmt++))) {
     89e:	f6 01       	movw	r30, r12
     8a0:	60 81       	ld	r22, Z
     8a2:	61 11       	cpse	r22, r1
     8a4:	11 cf       	rjmp	.-478    	; 0x6c8 <tfp_format+0x56>
					break;
				}
			}
		}
	abort:;
	}
     8a6:	60 96       	adiw	r28, 0x10	; 16
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	cf 90       	pop	r12
     8c2:	bf 90       	pop	r11
     8c4:	af 90       	pop	r10
     8c6:	9f 90       	pop	r9
     8c8:	8f 90       	pop	r8
     8ca:	7f 90       	pop	r7
     8cc:	6f 90       	pop	r6
     8ce:	5f 90       	pop	r5
     8d0:	4f 90       	pop	r4
     8d2:	3f 90       	pop	r3
     8d4:	2f 90       	pop	r2
     8d6:	08 95       	ret

000008d8 <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
	{
	stdout_putf=putf;
     8d8:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <stdout_putf+0x1>
     8dc:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <stdout_putf>
	stdout_putp=putp;
     8e0:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
     8e4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
     8e8:	08 95       	ret

000008ea <tfp_printf>:
	}

void tfp_printf(char *fmt, ...)
	{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	9e 01       	movw	r18, r28
     8f4:	2b 5f       	subi	r18, 0xFB	; 251
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	f9 01       	movw	r30, r18
     8fa:	41 91       	ld	r20, Z+
     8fc:	51 91       	ld	r21, Z+
     8fe:	9f 01       	movw	r18, r30
	va_list va;
	va_start(va,fmt);
	tfp_format(stdout_putp,stdout_putf,fmt,va);
     900:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <stdout_putf>
     904:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <stdout_putf+0x1>
     908:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
     90c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
     910:	0e 94 39 03 	call	0x672	; 0x672 <tfp_format>
	va_end(va);
	}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <promer>:

//	+---------------------------------------------------------------+
//	|					EEPROM Konfiguration						|
//	+---------------------------------------------------------------+
void promer(unsigned char buffer[])
{
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	ce 51       	subi	r28, 0x1E	; 30
     924:	d1 40       	sbci	r29, 0x01	; 1
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	8c 01       	movw	r16, r24
	unsigned char fail = 0;
	
	unsigned char modus = 0;
	unsigned char loop = 0;

	display(buffer, 0, 1);			// Daten ([PROM]) auf Display ausgeben
     932:	41 e0       	ldi	r20, 0x01	; 1
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display>
	uart_setstring(buffer, 1);		// Daten ([PROM]) auf Konsole ausgeben
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	c8 01       	movw	r24, r16
     93e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
							{
								rom_block(eeFAIL, mem, sizeof(eeFAIL));		// [FAIL] Kommando von EEPROM in lokalen Speicher laden
								uart_setstring(mem, 1);						// [FAIL] Kommando über UART senden
								
								loop = 0;									// Loop Variable Rücksetzten
								OUTPUT = 0x05;								// Fehler in Kommandosequenz anzeigen
     942:	0f 2e       	mov	r0, r31
     944:	f5 e0       	ldi	r31, 0x05	; 5
     946:	df 2e       	mov	r13, r31
     948:	f0 2d       	mov	r31, r0
     94a:	7e 01       	movw	r14, r28
     94c:	86 e2       	ldi	r24, 0x26	; 38
     94e:	e8 0e       	add	r14, r24
     950:	f1 1c       	adc	r15, r1
     952:	62 c0       	rjmp	.+196    	; 0xa18 <promer+0xfe>
							modus = 10;										// EEPROM Lesemodus aktiv			
							loop++;											// Loop Variable inkrementieren
						}
						else
						{
							rom_block(eeWRITE, mem, sizeof(eeWRITE));		// [SAVE] Kommando von EEPROM in lokalen Speicher laden
     954:	47 e0       	ldi	r20, 0x07	; 7
     956:	be 01       	movw	r22, r28
     958:	65 5f       	subi	r22, 0xF5	; 245
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	8e e0       	ldi	r24, 0x0E	; 14
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
							
							if(!memcmp(cmd, mem, sizeof(eeREAD) - 1))	{
     964:	46 e0       	ldi	r20, 0x06	; 6
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	be 01       	movw	r22, r28
     96a:	65 5f       	subi	r22, 0xF5	; 245
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	0e 94 2f 09 	call	0x125e	; 0x125e <memcmp>
     976:	89 2b       	or	r24, r25
     978:	09 f4       	brne	.+2      	; 0x97c <promer+0x62>
     97a:	9d c0       	rjmp	.+314    	; 0xab6 <promer+0x19c>
								modus = 20;									// EEPROM Schreibmodus aktiv
								loop++;										// Loop Variable inkrementieren
							}
							else
							{
								rom_block(eeFAIL, mem, sizeof(eeFAIL));		// [FAIL] Kommando von EEPROM in lokalen Speicher laden
     97c:	47 e0       	ldi	r20, 0x07	; 7
     97e:	be 01       	movw	r22, r28
     980:	65 5f       	subi	r22, 0xF5	; 245
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	86 e4       	ldi	r24, 0x46	; 70
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
								uart_setstring(mem, 1);						// [FAIL] Kommando über UART senden
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	ce 01       	movw	r24, r28
     990:	0b 96       	adiw	r24, 0x0b	; 11
     992:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
								
								loop = 0;									// Loop Variable Rücksetzten
								OUTPUT = 0x05;								// Fehler in Kommandosequenz anzeigen
     996:	d5 ba       	out	0x15, r13	; 21
     998:	3f c0       	rjmp	.+126    	; 0xa18 <promer+0xfe>
								else
								{
									i2c_eeprom_read_block(addr, word, &data[0], datasize);		// Block aus EEPROM lesen
									
									for(unsigned char i=0; i < datasize; i++)
										uart_setchar(data[i]);									// Block über UART senden
     99a:	f8 01       	movw	r30, r16
     99c:	81 91       	ld	r24, Z+
     99e:	8f 01       	movw	r16, r30
     9a0:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>
								}
								else
								{
									i2c_eeprom_read_block(addr, word, &data[0], datasize);		// Block aus EEPROM lesen
									
									for(unsigned char i=0; i < datasize; i++)
     9a4:	e0 16       	cp	r14, r16
     9a6:	f1 06       	cpc	r15, r17
     9a8:	c1 f7       	brne	.-16     	; 0x99a <promer+0x80>
										uart_setchar(data[i]);									// Block über UART senden
								}
								
								rom_block(eeDONE, mem, sizeof(eeDONE));			// [DONE] Kommando von EEPROM in lokalen Speicher laden
     9aa:	47 e0       	ldi	r20, 0x07	; 7
     9ac:	be 01       	movw	r22, r28
     9ae:	65 5f       	subi	r22, 0xF5	; 245
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	8d e4       	ldi	r24, 0x4D	; 77
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
								uart_setstring(mem, 1);							// [DONE] Kommando über UART Senden
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	ce 01       	movw	r24, r28
     9be:	0b 96       	adiw	r24, 0x0b	; 11
     9c0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
     9c4:	76 c0       	rjmp	.+236    	; 0xab2 <promer+0x198>
									fail = i2c_eeprom_write_byte(addr, word, data[0]);	// Byte in EEPROM schreiben
								}
								else
								{
									for(unsigned char i=0; i < datasize; i++)
										uart_fetchchar(&data[i]);
     9c6:	c8 01       	movw	r24, r16
     9c8:	0e 94 11 08 	call	0x1022	; 0x1022 <uart_fetchchar>
     9cc:	0f 5f       	subi	r16, 0xFF	; 255
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
									uart_fetchchar(&data[0]);							// Byte über UART empfangen
									fail = i2c_eeprom_write_byte(addr, word, data[0]);	// Byte in EEPROM schreiben
								}
								else
								{
									for(unsigned char i=0; i < datasize; i++)
     9d0:	e0 16       	cp	r14, r16
     9d2:	f1 06       	cpc	r15, r17
     9d4:	c1 f7       	brne	.-16     	; 0x9c6 <promer+0xac>
										uart_fetchchar(&data[i]);
									
									fail = i2c_eeprom_write_block(addr, word, &data[0], datasize);
     9d6:	27 e0       	ldi	r18, 0x07	; 7
     9d8:	ae 01       	movw	r20, r28
     9da:	41 5e       	subi	r20, 0xE1	; 225
     9dc:	5f 4f       	sbci	r21, 0xFF	; 255
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	80 ea       	ldi	r24, 0xA0	; 160
     9e2:	0e 94 19 01 	call	0x232	; 0x232 <i2c_eeprom_write_block>
								}
								//i2c_eeprom_read_block(addr, word, &data[0], datasize);
								
								if(fail == 0xFF)
     9e6:	8f 3f       	cpi	r24, 0xFF	; 255
     9e8:	49 f4       	brne	.+18     	; 0x9fc <promer+0xe2>
									rom_block(eeDONE, mem, sizeof(eeDONE));		// [DONE] Kommando von EEPROM in lokalen Speicher laden
     9ea:	47 e0       	ldi	r20, 0x07	; 7
     9ec:	be 01       	movw	r22, r28
     9ee:	65 5f       	subi	r22, 0xF5	; 245
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	8d e4       	ldi	r24, 0x4D	; 77
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
     9fa:	08 c0       	rjmp	.+16     	; 0xa0c <promer+0xf2>
								else
									rom_block(eeFAIL, mem, sizeof(eeFAIL));		// [FAIL] Kommando von EEPROM in lokalen Speicher laden
     9fc:	47 e0       	ldi	r20, 0x07	; 7
     9fe:	be 01       	movw	r22, r28
     a00:	65 5f       	subi	r22, 0xF5	; 245
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	86 e4       	ldi	r24, 0x46	; 70
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
								uart_setstring(mem, 1);							// [DONE]/[FAIL] Kommando über UART Senden
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	ce 01       	movw	r24, r28
     a10:	0b 96       	adiw	r24, 0x0b	; 11
     a12:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
     a16:	4d c0       	rjmp	.+154    	; 0xab2 <promer+0x198>
						datasize = 0;
						
			break;
			
			// Initialisierungsfall (Startbedingung)
			default	:	OUTPUT = 0x00;									// Ausgabe PORTC (LEDs) auf LOW
     a18:	15 ba       	out	0x15, r1	; 21
						rom_block(eeMODE0, mem, sizeof(eeMODE0));		// [PROM] Kommando von EEPROM in lokalen Speicher laden
     a1a:	47 e0       	ldi	r20, 0x07	; 7
     a1c:	be 01       	movw	r22, r28
     a1e:	65 5f       	subi	r22, 0xF5	; 245
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	82 e6       	ldi	r24, 0x62	; 98
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
						uart_getcmd(cmd);								// Warten bis Kommando über UART empfangen
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	0e 94 56 08 	call	0x10ac	; 0x10ac <uart_getcmd>
						
						// Überprüfen ob empfangene Daten gleich dem erwarteten Kommando
						if(!memcmp(cmd, mem, sizeof(eeMODE0) - 1))	{
     a32:	46 e0       	ldi	r20, 0x06	; 6
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	be 01       	movw	r22, r28
     a38:	65 5f       	subi	r22, 0xF5	; 245
     a3a:	7f 4f       	sbci	r23, 0xFF	; 255
     a3c:	ce 01       	movw	r24, r28
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	0e 94 2f 09 	call	0x125e	; 0x125e <memcmp>
     a44:	89 2b       	or	r24, r25
     a46:	29 f5       	brne	.+74     	; 0xa92 <promer+0x178>
							rom_block(eeDONE, mem, sizeof(eeDONE));		// [DONE] Kommando von EEPROM in lokalen Speicher laden
     a48:	47 e0       	ldi	r20, 0x07	; 7
     a4a:	be 01       	movw	r22, r28
     a4c:	65 5f       	subi	r22, 0xF5	; 245
     a4e:	7f 4f       	sbci	r23, 0xFF	; 255
     a50:	8d e4       	ldi	r24, 0x4D	; 77
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
							uart_setstring(mem, 1);						// [DONE] Kommando über UART senden
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	ce 01       	movw	r24, r28
     a5c:	0b 96       	adiw	r24, 0x0b	; 11
     a5e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
							OUTPUT = 0x04;									// Fehler in Kommandosequenz anzeigen
						}
			break;
			
			// Modusabfrage (Lesen/Schreiben)
			case 3	:	rom_block(eeREAD, mem, sizeof(eeREAD));				// [READ] Kommando von EEPROM in lokalen Speicher laden
     a62:	47 e0       	ldi	r20, 0x07	; 7
     a64:	be 01       	movw	r22, r28
     a66:	65 5f       	subi	r22, 0xF5	; 245
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	85 e1       	ldi	r24, 0x15	; 21
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
						uart_getcmd(cmd);									// Warten bis Kommando über UART empfangen
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 56 08 	call	0x10ac	; 0x10ac <uart_getcmd>
			
						// Überprüfen ob empfangene Daten gleich dem erwarteten Kommando
						if(!memcmp(cmd, mem, sizeof(eeREAD) - 1))	{
     a7a:	46 e0       	ldi	r20, 0x06	; 6
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	be 01       	movw	r22, r28
     a80:	65 5f       	subi	r22, 0xF5	; 245
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 2f 09 	call	0x125e	; 0x125e <memcmp>
     a8c:	89 2b       	or	r24, r25
     a8e:	a9 f1       	breq	.+106    	; 0xafa <promer+0x1e0>
     a90:	61 cf       	rjmp	.-318    	; 0x954 <promer+0x3a>
							// !!!!!!!!!!!!!!!!!!!!!!!!!!
						}
						// Falsches kommando empfangen
						else
						{
							rom_block(eeFAIL, mem, sizeof(eeFAIL));		// [FAIL] Kommando von EEPROM in lokalen Speicher laden
     a92:	47 e0       	ldi	r20, 0x07	; 7
     a94:	be 01       	movw	r22, r28
     a96:	65 5f       	subi	r22, 0xF5	; 245
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	86 e4       	ldi	r24, 0x46	; 70
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
							uart_setstring(mem, 1);						// [FAIL] Kommando über UART senden
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	ce 01       	movw	r24, r28
     aa6:	0b 96       	adiw	r24, 0x0b	; 11
     aa8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
							
							loop = 0;									// Loop Variable Rücksetzten
							OUTPUT = 0x01;								// Fehler in Kommandosequenz anzeigen
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	85 bb       	out	0x15, r24	; 21
     ab0:	b3 cf       	rjmp	.-154    	; 0xa18 <promer+0xfe>
							OUTPUT = 0x08;									// Fehler in Kommandosequenz anzeigen
						}
						
						// Rücksetzten der Variablen
						for(unsigned i=0; i < sizeof(unsigned char); i++)
							data[i] = 0x00;
     ab2:	1f 8e       	std	Y+31, r1	; 0x1f
     ab4:	b1 cf       	rjmp	.-158    	; 0xa18 <promer+0xfe>
							}
						}
			break;
			
			// Abfrage der Datengröße
			case 4	:	rom_block(eeSIZE, mem, sizeof(eeSIZE));				// {SIZE} Kommando von EEPROM in lokalen Speicher laden
     ab6:	47 e0       	ldi	r20, 0x07	; 7
     ab8:	be 01       	movw	r22, r28
     aba:	65 5f       	subi	r22, 0xF5	; 245
     abc:	7f 4f       	sbci	r23, 0xFF	; 255
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
						uart_setstring(mem, 1);								// {SIZE} Kommando über UART Senden
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	ce 01       	movw	r24, r28
     aca:	0b 96       	adiw	r24, 0x0b	; 11
     acc:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
						uart_getarg(arg);									// {.} Größe (max. 1 Byte empfangen 0-255)
     ad0:	ce 01       	movw	r24, r28
     ad2:	45 96       	adiw	r24, 0x15	; 21
     ad4:	0e 94 19 08 	call	0x1032	; 0x1032 <uart_getarg>
								uart_setstring(mem, 1);							// [DONE] Kommando über UART Senden
							}
							// Überprüfen ob Schreibmodus aktiv
							else if(modus == 20)
							{
								rom_block(eeGETDATA, mem, sizeof(eeGETDATA));	// {XGET} Kommando von EEPROM in lokalen Speicher laden
     ad8:	47 e0       	ldi	r20, 0x07	; 7
     ada:	be 01       	movw	r22, r28
     adc:	65 5f       	subi	r22, 0xF5	; 245
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	88 e3       	ldi	r24, 0x38	; 56
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
								uart_setstring(mem, 1);							// {XGET} Kommando über UART Senden
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	ce 01       	movw	r24, r28
     aec:	0b 96       	adiw	r24, 0x0b	; 11
     aee:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
     af2:	8e 01       	movw	r16, r28
     af4:	01 5e       	subi	r16, 0xE1	; 225
     af6:	1f 4f       	sbci	r17, 0xFF	; 255
     af8:	66 cf       	rjmp	.-308    	; 0x9c6 <promer+0xac>
							}
						}
			break;
			
			// Abfrage der Datengröße
			case 4	:	rom_block(eeSIZE, mem, sizeof(eeSIZE));				// {SIZE} Kommando von EEPROM in lokalen Speicher laden
     afa:	47 e0       	ldi	r20, 0x07	; 7
     afc:	be 01       	movw	r22, r28
     afe:	65 5f       	subi	r22, 0xF5	; 245
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
						uart_setstring(mem, 1);								// {SIZE} Kommando über UART Senden
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	ce 01       	movw	r24, r28
     b0e:	0b 96       	adiw	r24, 0x0b	; 11
     b10:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
						uart_getarg(arg);									// {.} Größe (max. 1 Byte empfangen 0-255)
     b14:	ce 01       	movw	r24, r28
     b16:	45 96       	adiw	r24, 0x15	; 21
     b18:	0e 94 19 08 	call	0x1032	; 0x1032 <uart_getarg>
						if(datasize > 0)
						{
							// Überprüfen ob Lesemodus aktiv
							if(modus == 10)
							{
								rom_block(eeSETDATA, mem, sizeof(eeSETDATA));	// [XSET] Kommando von EEPROM in lokalen Speicher laden
     b1c:	47 e0       	ldi	r20, 0x07	; 7
     b1e:	be 01       	movw	r22, r28
     b20:	65 5f       	subi	r22, 0xF5	; 245
     b22:	7f 4f       	sbci	r23, 0xFF	; 255
     b24:	8f e3       	ldi	r24, 0x3F	; 63
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
								uart_setstring(mem, 1);							// [XSET] Kommando über UART Senden
     b2c:	61 e0       	ldi	r22, 0x01	; 1
     b2e:	ce 01       	movw	r24, r28
     b30:	0b 96       	adiw	r24, 0x0b	; 11
     b32:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
									i2c_eeprom_read_byte(addr, word, &data[0]);		// Byte aus EEPROM lesen
									uart_setchar(data[0]);							// Byte über UART senden	
								}
								else
								{
									i2c_eeprom_read_block(addr, word, &data[0], datasize);		// Block aus EEPROM lesen
     b36:	27 e0       	ldi	r18, 0x07	; 7
     b38:	ae 01       	movw	r20, r28
     b3a:	41 5e       	subi	r20, 0xE1	; 225
     b3c:	5f 4f       	sbci	r21, 0xFF	; 255
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	80 ea       	ldi	r24, 0xA0	; 160
     b42:	0e 94 73 00 	call	0xe6	; 0xe6 <i2c_eeprom_read_block>
     b46:	8e 01       	movw	r16, r28
     b48:	01 5e       	subi	r16, 0xE1	; 225
     b4a:	1f 4f       	sbci	r17, 0xFF	; 255
     b4c:	26 cf       	rjmp	.-436    	; 0x99a <promer+0x80>

00000b4e <display>:

//	+---------------------------------------------------------------+
//	|					Programmier Routine							|
//	+---------------------------------------------------------------+
void program(unsigned char transfer, unsigned long long datasize)
{
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	18 2f       	mov	r17, r24
     b58:	09 2f       	mov	r16, r25
     b5a:	d6 2f       	mov	r29, r22
     b5c:	c4 2f       	mov	r28, r20
     b5e:	84 2f       	mov	r24, r20
     b60:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_pos>
     b64:	80 e6       	ldi	r24, 0x60	; 96
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	0e 94 75 04 	call	0x8ea	; 0x8ea <tfp_printf>
     b70:	6d 2f       	mov	r22, r29
     b72:	8c 2f       	mov	r24, r28
     b74:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_pos>
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	8f e6       	ldi	r24, 0x6F	; 111
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	9f 93       	push	r25
     b82:	8f 93       	push	r24
     b84:	0e 94 75 04 	call	0x8ea	; 0x8ea <tfp_printf>
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	08 95       	ret

00000b9e <getmode>:
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	2a 97       	sbiw	r28, 0x0a	; 10
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	c8 99       	sbic	0x19, 0	; 25
     bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <getmode+0x32>
     bb6:	47 e0       	ldi	r20, 0x07	; 7
     bb8:	be 01       	movw	r22, r28
     bba:	6f 5f       	subi	r22, 0xFF	; 255
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255
     bbe:	82 e6       	ldi	r24, 0x62	; 98
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
     bc6:	ce 01       	movw	r24, r28
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 8d 04 	call	0x91a	; 0x91a <promer>
     bce:	3f c0       	rjmp	.+126    	; 0xc4e <getmode+0xb0>
     bd0:	c9 99       	sbic	0x19, 1	; 25
     bd2:	14 c0       	rjmp	.+40     	; 0xbfc <getmode+0x5e>
     bd4:	47 e0       	ldi	r20, 0x07	; 7
     bd6:	be 01       	movw	r22, r28
     bd8:	6f 5f       	subi	r22, 0xFF	; 255
     bda:	7f 4f       	sbci	r23, 0xFF	; 255
     bdc:	8b e5       	ldi	r24, 0x5B	; 91
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	ce 01       	movw	r24, r28
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display>
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
     bfa:	ec cf       	rjmp	.-40     	; 0xbd4 <getmode+0x36>
     bfc:	ca 99       	sbic	0x19, 2	; 25
     bfe:	14 c0       	rjmp	.+40     	; 0xc28 <getmode+0x8a>
     c00:	47 e0       	ldi	r20, 0x07	; 7
     c02:	be 01       	movw	r22, r28
     c04:	6f 5f       	subi	r22, 0xFF	; 255
     c06:	7f 4f       	sbci	r23, 0xFF	; 255
     c08:	84 e5       	ldi	r24, 0x54	; 84
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	ce 01       	movw	r24, r28
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display>
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	ce 01       	movw	r24, r28
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
     c26:	ec cf       	rjmp	.-40     	; 0xc00 <getmode+0x62>
     c28:	48 e0       	ldi	r20, 0x08	; 8
     c2a:	be 01       	movw	r22, r28
     c2c:	6f 5f       	subi	r22, 0xFF	; 255
     c2e:	7f 4f       	sbci	r23, 0xFF	; 255
     c30:	89 e6       	ldi	r24, 0x69	; 105
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
     c38:	41 e0       	ldi	r20, 0x01	; 1
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display>
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	ce 01       	movw	r24, r28
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
     c4e:	2a 96       	adiw	r28, 0x0a	; 10
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <wait>:
//	+---------------------------------------------------------------+
//	|				Einstellbare Wartefunktion						|
//	+---------------------------------------------------------------+
void wait(unsigned int cycle, unsigned char type)
{
	for(unsigned int i=0; i < cycle; i++)
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	91 f0       	breq	.+36     	; 0xc88 <wait+0x28>
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
		switch(type)
     c68:	61 30       	cpi	r22, 0x01	; 1
     c6a:	19 f4       	brne	.+6      	; 0xc72 <wait+0x12>
     c6c:	44 e0       	ldi	r20, 0x04	; 4
     c6e:	4a 95       	dec	r20
     c70:	f1 f7       	brne	.-4      	; 0xc6e <wait+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c72:	e7 eb       	ldi	r30, 0xB7	; 183
     c74:	fb e0       	ldi	r31, 0x0B	; 11
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <wait+0x16>
     c7a:	00 c0       	rjmp	.+0      	; 0xc7c <wait+0x1c>
     c7c:	00 00       	nop
//	+---------------------------------------------------------------+
//	|				Einstellbare Wartefunktion						|
//	+---------------------------------------------------------------+
void wait(unsigned int cycle, unsigned char type)
{
	for(unsigned int i=0; i < cycle; i++)
     c7e:	2f 5f       	subi	r18, 0xFF	; 255
     c80:	3f 4f       	sbci	r19, 0xFF	; 255
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	81 f7       	brne	.-32     	; 0xc68 <wait+0x8>
     c88:	08 95       	ret

00000c8a <blink>:

//	+---------------------------------------------------------------+
//	|						Blink Funktion							|
//	+---------------------------------------------------------------+
void blink(volatile unsigned char *port, unsigned char ticks, unsigned int delay)
{
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	8c 01       	movw	r16, r24
     c98:	d6 2f       	mov	r29, r22
     c9a:	7a 01       	movw	r14, r20
	*port = 0x00;
     c9c:	fc 01       	movw	r30, r24
     c9e:	10 82       	st	Z, r1

	for(unsigned char i=0; i < ticks; i++)
     ca0:	66 23       	and	r22, r22
     ca2:	61 f0       	breq	.+24     	; 0xcbc <blink+0x32>
     ca4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*port = ~(*port);
     ca6:	f8 01       	movw	r30, r16
     ca8:	80 81       	ld	r24, Z
     caa:	80 95       	com	r24
     cac:	80 83       	st	Z, r24
		wait(delay, 0);
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	c7 01       	movw	r24, r14
     cb2:	0e 94 30 06 	call	0xc60	; 0xc60 <wait>
//	+---------------------------------------------------------------+
void blink(volatile unsigned char *port, unsigned char ticks, unsigned int delay)
{
	*port = 0x00;

	for(unsigned char i=0; i < ticks; i++)
     cb6:	cf 5f       	subi	r28, 0xFF	; 255
     cb8:	dc 13       	cpse	r29, r28
     cba:	f5 cf       	rjmp	.-22     	; 0xca6 <blink+0x1c>
	{
		*port = ~(*port);
		wait(delay, 0);
	}
	
	*port = 0x00;
     cbc:	f8 01       	movw	r30, r16
     cbe:	10 82       	st	Z, r1
}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	08 95       	ret

00000cce <load>:

//	+---------------------------------------------------------------+
//	|					Ladebalken Funktion							|
//	+---------------------------------------------------------------+
void load(volatile unsigned char *port, unsigned char pos, unsigned int delay)
{	
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
		*port |= 0x01 | (*port<<1);
     cd4:	98 81       	ld	r25, Y
     cd6:	88 81       	ld	r24, Y
     cd8:	29 2f       	mov	r18, r25
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	21 60       	ori	r18, 0x01	; 1
     ce2:	28 2b       	or	r18, r24
     ce4:	28 83       	st	Y, r18
		
		if(delay > 0)
     ce6:	41 15       	cp	r20, r1
     ce8:	51 05       	cpc	r21, r1
     cea:	21 f0       	breq	.+8      	; 0xcf4 <load+0x26>
			wait(delay, 0);
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	ca 01       	movw	r24, r20
     cf0:	0e 94 30 06 	call	0xc60	; 0xc60 <wait>
			
		if(*port == 0xFF)
     cf4:	88 81       	ld	r24, Y
     cf6:	8f 3f       	cpi	r24, 0xFF	; 255
     cf8:	09 f4       	brne	.+2      	; 0xcfc <load+0x2e>
			*port = 0x00;
     cfa:	18 82       	st	Y, r1
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <system_init>:

//	+---------------------------------------------------------------+
//	|					System Initialisierung						|
//	+---------------------------------------------------------------+
void system_init()
{
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	2a 97       	sbiw	r28, 0x0a	; 10
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
	unsigned char buffer[10];
	
	DDROUT = HIGH;	// Datenrichtungsregister des Ausgabeports einstellen
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	84 bb       	out	0x14, r24	; 20
	DDRIN = LOW;	// Datenrichtungsregister des Eingabeports einstellen
     d1a:	1a ba       	out	0x1a, r1	; 26
	INPULL = HIGH;	// Pullup Widerstände an Eingabeport aktivieren
     d1c:	8b bb       	out	0x1b, r24	; 27
	OUTPUT = LOW;	// Ausgabe Port rücksetzten
     d1e:	15 ba       	out	0x15, r1	; 21

	// System aktiv und in STARTPHASE
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     d20:	4a ef       	ldi	r20, 0xFA	; 250
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	85 e3       	ldi	r24, 0x35	; 53
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 67 06 	call	0xcce	; 0xcce <load>

	// UART Initialisierung
	uart_init(8, 0, 1);			// UART Initialisierung
     d2e:	41 e0       	ldi	r20, 0x01	; 1
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	88 e0       	ldi	r24, 0x08	; 8
     d34:	0e 94 ad 07 	call	0xf5a	; 0xf5a <uart_init>
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     d38:	4a ef       	ldi	r20, 0xFA	; 250
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	85 e3       	ldi	r24, 0x35	; 53
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 67 06 	call	0xcce	; 0xcce <load>
	rom_block(eeSTART, buffer, sizeof(eeSTART));
     d46:	46 e0       	ldi	r20, 0x06	; 6
     d48:	be 01       	movw	r22, r28
     d4a:	6f 5f       	subi	r22, 0xFF	; 255
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	81 e7       	ldi	r24, 0x71	; 113
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     d56:	4a ef       	ldi	r20, 0xFA	; 250
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	85 e3       	ldi	r24, 0x35	; 53
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 67 06 	call	0xcce	; 0xcce <load>
	uart_setstring(buffer, 1);	// Initialisierung auf Konsole ausgeben
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	ce 01       	movw	r24, r28
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     d6e:	4a ef       	ldi	r20, 0xFA	; 250
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	85 e3       	ldi	r24, 0x35	; 53
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 67 06 	call	0xcce	; 0xcce <load>

	// I2C Initialisierung
	i2c_init();					// I2C Bus Initialisieren
     d7c:	0e 94 56 00 	call	0xac	; 0xac <i2c_init>

	// LCD Initialisierung
	lcd_init();					// LCD Initialisierung
     d80:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_init>
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     d84:	4a ef       	ldi	r20, 0xFA	; 250
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	85 e3       	ldi	r24, 0x35	; 53
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 67 06 	call	0xcce	; 0xcce <load>
	display(buffer, 0,0);		// Initialisierung auf Display ausgeben
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display>
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
     d9e:	4a ef       	ldi	r20, 0xFA	; 250
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	61 e0       	ldi	r22, 0x01	; 1
     da4:	85 e3       	ldi	r24, 0x35	; 53
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 67 06 	call	0xcce	; 0xcce <load>
	display(buffer, 0,1);		// Initialisierung auf Display ausgeben
	uart_setstring(buffer, 1);	// Initialisierung auf Konsole ausgeben
	load(&OUTPUT, 1, 250);		// Ladebalken erhöhen
	blink(&OUTPUT, 10, 500);
#else
	blink(&OUTPUT, 10, 100);
     dac:	44 e6       	ldi	r20, 0x64	; 100
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	6a e0       	ldi	r22, 0x0A	; 10
     db2:	85 e3       	ldi	r24, 0x35	; 53
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 45 06 	call	0xc8a	; 0xc8a <blink>
#endif

	// UART / LCD Initialisierungs Ausgabe
	rom_block(eeTITLE, buffer, sizeof(eeTITLE));
     dba:	48 e0       	ldi	r20, 0x08	; 8
     dbc:	be 01       	movw	r22, r28
     dbe:	6f 5f       	subi	r22, 0xFF	; 255
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	87 e8       	ldi	r24, 0x87	; 135
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
	display(buffer, 0,0);								// Daten auf Display ausgeben
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display>
	uart_setstring(buffer, 1);							// Daten auf Konsole ausgeben
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	ce 01       	movw	r24, r28
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
	rom_block(eeVERSION, buffer, sizeof(eeVERSION));
     de0:	48 e0       	ldi	r20, 0x08	; 8
     de2:	be 01       	movw	r22, r28
     de4:	6f 5f       	subi	r22, 0xFF	; 255
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	8f e7       	ldi	r24, 0x7F	; 127
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 4f 00 	call	0x9e	; 0x9e <rom_block>
	display(buffer, 0,1);								// Daten auf Display ausgeben
     df0:	41 e0       	ldi	r20, 0x01	; 1
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	ce 01       	movw	r24, r28
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display>
	uart_setstring(buffer, 1);							// Daten auf Konsole ausgeben
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	ce 01       	movw	r24, r28
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart_setstring>
}
     e06:	2a 96       	adiw	r28, 0x0a	; 10
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <percent>:

//	+---------------------------------------------------------------+
//	|					Display Prozentanzeige						|
//	+---------------------------------------------------------------+
unsigned char percent(unsigned long long number, unsigned long long size)
{
     e18:	2f 92       	push	r2
     e1a:	3f 92       	push	r3
     e1c:	4f 92       	push	r4
     e1e:	5f 92       	push	r5
     e20:	6f 92       	push	r6
     e22:	7f 92       	push	r7
     e24:	8f 92       	push	r8
     e26:	9f 92       	push	r9
     e28:	af 92       	push	r10
     e2a:	bf 92       	push	r11
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <percent+0x26>
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <percent+0x28>
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	2a 2c       	mov	r2, r10
     e46:	3b 2c       	mov	r3, r11
     e48:	4c 2c       	mov	r4, r12
     e4a:	5d 2c       	mov	r5, r13
     e4c:	6e 2c       	mov	r6, r14
     e4e:	7f 2c       	mov	r7, r15
     e50:	09 83       	std	Y+1, r16	; 0x01
     e52:	1a 83       	std	Y+2, r17	; 0x02
	// Ausrechnen der Prozentwerte
	unsigned char percentage = (number * 100UL/size);
     e54:	02 e0       	ldi	r16, 0x02	; 2
     e56:	0e 94 01 09 	call	0x1202	; 0x1202 <__ashldi3>
     e5a:	82 2e       	mov	r8, r18
     e5c:	93 2e       	mov	r9, r19
     e5e:	4c 83       	std	Y+4, r20	; 0x04
     e60:	5b 83       	std	Y+3, r21	; 0x03
     e62:	b6 2f       	mov	r27, r22
     e64:	a7 2f       	mov	r26, r23
     e66:	f8 2f       	mov	r31, r24
     e68:	e9 2f       	mov	r30, r25
     e6a:	0e 94 01 09 	call	0x1202	; 0x1202 <__ashldi3>
     e6e:	a2 2e       	mov	r10, r18
     e70:	b3 2e       	mov	r11, r19
     e72:	c4 2e       	mov	r12, r20
     e74:	d5 2e       	mov	r13, r21
     e76:	e6 2e       	mov	r14, r22
     e78:	f7 2e       	mov	r15, r23
     e7a:	08 2f       	mov	r16, r24
     e7c:	19 2f       	mov	r17, r25
     e7e:	28 2d       	mov	r18, r8
     e80:	39 2d       	mov	r19, r9
     e82:	4c 81       	ldd	r20, Y+4	; 0x04
     e84:	5b 81       	ldd	r21, Y+3	; 0x03
     e86:	6b 2f       	mov	r22, r27
     e88:	7a 2f       	mov	r23, r26
     e8a:	8f 2f       	mov	r24, r31
     e8c:	9e 2f       	mov	r25, r30
     e8e:	0e 94 1a 09 	call	0x1234	; 0x1234 <__adddi3>
     e92:	82 2e       	mov	r8, r18
     e94:	93 2e       	mov	r9, r19
     e96:	4c 83       	std	Y+4, r20	; 0x04
     e98:	5b 83       	std	Y+3, r21	; 0x03
     e9a:	b6 2f       	mov	r27, r22
     e9c:	a7 2f       	mov	r26, r23
     e9e:	f8 2f       	mov	r31, r24
     ea0:	e9 2f       	mov	r30, r25
     ea2:	02 e0       	ldi	r16, 0x02	; 2
     ea4:	0e 94 01 09 	call	0x1202	; 0x1202 <__ashldi3>
     ea8:	a2 2e       	mov	r10, r18
     eaa:	b3 2e       	mov	r11, r19
     eac:	c4 2e       	mov	r12, r20
     eae:	d5 2e       	mov	r13, r21
     eb0:	e6 2e       	mov	r14, r22
     eb2:	f7 2e       	mov	r15, r23
     eb4:	08 2f       	mov	r16, r24
     eb6:	19 2f       	mov	r17, r25
     eb8:	28 2d       	mov	r18, r8
     eba:	39 2d       	mov	r19, r9
     ebc:	4c 81       	ldd	r20, Y+4	; 0x04
     ebe:	5b 81       	ldd	r21, Y+3	; 0x03
     ec0:	6b 2f       	mov	r22, r27
     ec2:	7a 2f       	mov	r23, r26
     ec4:	8f 2f       	mov	r24, r31
     ec6:	9e 2f       	mov	r25, r30
     ec8:	0e 94 1a 09 	call	0x1234	; 0x1234 <__adddi3>
     ecc:	a2 2c       	mov	r10, r2
     ece:	b3 2c       	mov	r11, r3
     ed0:	c4 2c       	mov	r12, r4
     ed2:	d5 2c       	mov	r13, r5
     ed4:	e6 2c       	mov	r14, r6
     ed6:	f7 2c       	mov	r15, r7
     ed8:	09 81       	ldd	r16, Y+1	; 0x01
     eda:	1a 81       	ldd	r17, Y+2	; 0x02
     edc:	0e 94 a4 08 	call	0x1148	; 0x1148 <__udivdi3>
     ee0:	29 83       	std	Y+1, r18	; 0x01
	
	lcd_pos(1, 0);			// Positionszeiger auf Zeile, Spalte
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_pos>
	printf("        ");		// Zeile Leeren
     eea:	80 e6       	ldi	r24, 0x60	; 96
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	9f 93       	push	r25
     ef0:	8f 93       	push	r24
     ef2:	0e 94 75 04 	call	0x8ea	; 0x8ea <tfp_printf>
	lcd_pos(1, 0);			// Positionszeiger auf Zeile, Spalte
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_pos>
	printf("P=%u%s", percentage, "%");	// String auf Display ausgeben
     efe:	89 e6       	ldi	r24, 0x69	; 105
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9f 93       	push	r25
     f04:	8f 93       	push	r24
     f06:	1f 92       	push	r1
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	8f 93       	push	r24
     f0c:	8b e6       	ldi	r24, 0x6B	; 107
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9f 93       	push	r25
     f12:	8f 93       	push	r24
     f14:	0e 94 75 04 	call	0x8ea	; 0x8ea <tfp_printf>
	
	return percentage;
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
}
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	9f 90       	pop	r9
     f42:	8f 90       	pop	r8
     f44:	7f 90       	pop	r7
     f46:	6f 90       	pop	r6
     f48:	5f 90       	pop	r5
     f4a:	4f 90       	pop	r4
     f4c:	3f 90       	pop	r3
     f4e:	2f 90       	pop	r2
     f50:	08 95       	ret

00000f52 <uart_setchar>:
	if(UCSRA & (1<<RXC))	{				// Überprüfen ob Daten in Empfangsbuffer
		*dataaddr = UDR;					// Daten auf in Variable der Adresse address schreiben
		return 0xFF;						// Wenn neue Daten vorhanden Status 0xFF
	}
	return 0x00;							// Wenn keine neuen Daten vorhanden Status 0x00
}
     f52:	5d 9b       	sbis	0x0b, 5	; 11
     f54:	fe cf       	rjmp	.-4      	; 0xf52 <uart_setchar>
     f56:	8c b9       	out	0x0c, r24	; 12
     f58:	08 95       	ret

00000f5a <uart_init>:
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	9b b9       	out	0x0b, r25	; 11
     f5e:	10 bc       	out	0x20, r1	; 32
     f60:	9a e1       	ldi	r25, 0x1A	; 26
     f62:	99 b9       	out	0x09, r25	; 9
     f64:	86 33       	cpi	r24, 0x36	; 54
     f66:	49 f0       	breq	.+18     	; 0xf7a <uart_init+0x20>
     f68:	18 f4       	brcc	.+6      	; 0xf70 <uart_init+0x16>
     f6a:	85 33       	cpi	r24, 0x35	; 53
     f6c:	71 f0       	breq	.+28     	; 0xf8a <uart_init+0x30>
     f6e:	0b c0       	rjmp	.+22     	; 0xf86 <uart_init+0x2c>
     f70:	87 33       	cpi	r24, 0x37	; 55
     f72:	29 f0       	breq	.+10     	; 0xf7e <uart_init+0x24>
     f74:	89 33       	cpi	r24, 0x39	; 57
     f76:	29 f0       	breq	.+10     	; 0xf82 <uart_init+0x28>
     f78:	06 c0       	rjmp	.+12     	; 0xf86 <uart_init+0x2c>
     f7a:	82 e8       	ldi	r24, 0x82	; 130
     f7c:	07 c0       	rjmp	.+14     	; 0xf8c <uart_init+0x32>
     f7e:	84 e8       	ldi	r24, 0x84	; 132
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <uart_init+0x32>
     f82:	86 e8       	ldi	r24, 0x86	; 134
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <uart_init+0x32>
     f86:	86 e8       	ldi	r24, 0x86	; 134
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <uart_init+0x32>
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	8f 7c       	andi	r24, 0xCF	; 207
     f8e:	65 34       	cpi	r22, 0x45	; 69
     f90:	19 f0       	breq	.+6      	; 0xf98 <uart_init+0x3e>
     f92:	6f 34       	cpi	r22, 0x4F	; 79
     f94:	19 f0       	breq	.+6      	; 0xf9c <uart_init+0x42>
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <uart_init+0x44>
     f98:	80 62       	ori	r24, 0x20	; 32
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <uart_init+0x44>
     f9c:	80 63       	ori	r24, 0x30	; 48
     f9e:	42 33       	cpi	r20, 0x32	; 50
     fa0:	11 f4       	brne	.+4      	; 0xfa6 <uart_init+0x4c>
     fa2:	88 60       	ori	r24, 0x08	; 8
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <uart_init+0x4e>
     fa6:	87 7f       	andi	r24, 0xF7	; 247
     fa8:	80 bd       	out	0x20, r24	; 32
     faa:	88 e1       	ldi	r24, 0x18	; 24
     fac:	8a b9       	out	0x0a, r24	; 10
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>
     fb4:	08 95       	ret

00000fb6 <uart_setstring>:
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
     fbe:	16 2f       	mov	r17, r22
     fc0:	88 81       	ld	r24, Y
     fc2:	88 23       	and	r24, r24
     fc4:	31 f0       	breq	.+12     	; 0xfd2 <uart_setstring+0x1c>
     fc6:	21 96       	adiw	r28, 0x01	; 1
     fc8:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>
     fcc:	89 91       	ld	r24, Y+
     fce:	81 11       	cpse	r24, r1
     fd0:	fb cf       	rjmp	.-10     	; 0xfc8 <uart_setstring+0x12>
     fd2:	11 30       	cpi	r17, 0x01	; 1
     fd4:	51 f0       	breq	.+20     	; 0xfea <uart_setstring+0x34>
     fd6:	28 f0       	brcs	.+10     	; 0xfe2 <uart_setstring+0x2c>
     fd8:	12 30       	cpi	r17, 0x02	; 2
     fda:	71 f0       	breq	.+28     	; 0xff8 <uart_setstring+0x42>
     fdc:	13 30       	cpi	r17, 0x03	; 3
     fde:	81 f0       	breq	.+32     	; 0x1000 <uart_setstring+0x4a>
     fe0:	13 c0       	rjmp	.+38     	; 0x1008 <uart_setstring+0x52>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>
     fe8:	12 c0       	rjmp	.+36     	; 0x100e <uart_setstring+0x58>
     fea:	8a e0       	ldi	r24, 0x0A	; 10
     fec:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>
     ff0:	8d e0       	ldi	r24, 0x0D	; 13
     ff2:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>
     ff6:	0b c0       	rjmp	.+22     	; 0x100e <uart_setstring+0x58>
     ff8:	89 e0       	ldi	r24, 0x09	; 9
     ffa:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>
     ffe:	07 c0       	rjmp	.+14     	; 0x100e <uart_setstring+0x58>
    1000:	80 e2       	ldi	r24, 0x20	; 32
    1002:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>
    1006:	03 c0       	rjmp	.+6      	; 0x100e <uart_setstring+0x58>
    1008:	8b e1       	ldi	r24, 0x1B	; 27
    100a:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	08 95       	ret

00001016 <uart_getchar>:
    1016:	5f 9b       	sbis	0x0b, 7	; 11
    1018:	03 c0       	rjmp	.+6      	; 0x1020 <uart_getchar+0xa>
    101a:	2c b1       	in	r18, 0x0c	; 12
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18
    1020:	08 95       	ret

00001022 <uart_fetchchar>:

//	+---------------------------------------------------------------+
//	|					UART Zeichen abholen						|
//	+---------------------------------------------------------------+
void uart_fetchchar(unsigned char *dataaddr)	{
    1022:	fc 01       	movw	r30, r24
	while(!(UCSRA & (1<<RXC)));				// Warten bis neues Zeichen verfügbar
    1024:	5f 9b       	sbis	0x0b, 7	; 11
    1026:	fe cf       	rjmp	.-4      	; 0x1024 <uart_fetchchar+0x2>
		*dataaddr = UDR;					// Daten auf in Variable der Adresse address schreiben
    1028:	8c b1       	in	r24, 0x0c	; 12
    102a:	80 83       	st	Z, r24
	uart_setchar(*dataaddr);
    102c:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>
    1030:	08 95       	ret

00001032 <uart_getarg>:

//	+---------------------------------------------------------------+
//	|					UART Argument empfangen						|
//	+---------------------------------------------------------------+
void uart_getarg(unsigned char arg[])
{
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	1f 92       	push	r1
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	6c 01       	movw	r12, r24
	unsigned char data = 0;
    104a:	19 82       	std	Y+1, r1	; 0x01
	{
		uart_getchar(&data);
		
		if(data == '{')
		{
			arg[loop] = data;	// Empfangenes Zeichen auf Buffer legen
    104c:	0b e7       	ldi	r16, 0x7B	; 123
	unsigned char cancel = 0x00;
	
	// Loop bis Datensatz beginnt
	while(1)
	{
		uart_getchar(&data);
    104e:	ce 01       	movw	r24, r28
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_getchar>
		
		if(data == '{')
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	8b 37       	cpi	r24, 0x7B	; 123
    105a:	d9 f4       	brne	.+54     	; 0x1092 <uart_getarg+0x60>
		{
			arg[loop] = data;	// Empfangenes Zeichen auf Buffer legen
    105c:	f6 01       	movw	r30, r12
    105e:	01 93       	st	Z+, r16
    1060:	7f 01       	movw	r14, r30
			loop++;					// Arrayzeiger erhöhen
		
			uart_setchar(data);
    1062:	80 2f       	mov	r24, r16
    1064:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>
		uart_getchar(&data);
		
		if(data == '{')
		{
			arg[loop] = data;	// Empfangenes Zeichen auf Buffer legen
			loop++;					// Arrayzeiger erhöhen
    1068:	11 e0       	ldi	r17, 0x01	; 1
		
			uart_setchar(data);
			
			do
			{
				uart_fetchchar(&data);	// Warten bis Zeichen verfügbar
    106a:	ce 01       	movw	r24, r28
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	0e 94 11 08 	call	0x1022	; 0x1022 <uart_fetchchar>
				arg[loop] = data;	// Zeichen in Array schreiben
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	f7 01       	movw	r30, r14
    1076:	81 93       	st	Z+, r24
    1078:	7f 01       	movw	r14, r30
				loop++;					// Arrayzeiger erhöhen
    107a:	1f 5f       	subi	r17, 0xFF	; 255
				
				// Überprüfen ob Loop Zähler >= (Arraygröße - 1)
				if(loop >= (unsigned char)(MAXCMDSIZE))
    107c:	18 30       	cpi	r17, 0x08	; 8
    107e:	61 f0       	breq	.+24     	; 0x1098 <uart_getarg+0x66>
				{
					cancel = 0xFF;		// Programmabbruchflag aktivieren
					break;				// Schleifenabbruch initiieren
				}
			} while (data != '}');		// Schleife solange durchlaufen bis Endzeichen erreicht
    1080:	8d 37       	cpi	r24, 0x7D	; 125
    1082:	99 f7       	brne	.-26     	; 0x106a <uart_getarg+0x38>
		
		// CANCEL
		if(cancel == 0xFF)
			break;
		
		arg[loop] = '\0';	// Array Endstring hinzufügen
    1084:	f6 01       	movw	r30, r12
    1086:	e1 0f       	add	r30, r17
    1088:	f1 1d       	adc	r31, r1
    108a:	10 82       	st	Z, r1
		
		if(loop > 0)
    108c:	11 23       	and	r17, r17
    108e:	f9 f2       	breq	.-66     	; 0x104e <uart_getarg+0x1c>
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <uart_getarg+0x66>
		
		// CANCEL
		if(cancel == 0xFF)
			break;
		
		arg[loop] = '\0';	// Array Endstring hinzufügen
    1092:	f6 01       	movw	r30, r12
    1094:	10 82       	st	Z, r1
    1096:	db cf       	rjmp	.-74     	; 0x104e <uart_getarg+0x1c>
		{
			break;
			arg[loop] = '\0';	// Array Endstring hinzufügen
		}
	}
}
    1098:	0f 90       	pop	r0
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	cf 90       	pop	r12
    10aa:	08 95       	ret

000010ac <uart_getcmd>:

//	+---------------------------------------------------------------+
//	|					UART Kommando empfangen						|
//	+---------------------------------------------------------------+
void uart_getcmd(unsigned char cmd[])
{
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	1f 92       	push	r1
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	c8 2e       	mov	r12, r24
    10c4:	d9 2e       	mov	r13, r25
	unsigned char data = 0;
    10c6:	19 82       	std	Y+1, r1	; 0x01
		uart_getchar(&data);

		if(data == '[')
		{
			
			cmd[loop] = data;	// Empfangenes Zeichen auf Buffer legen
    10c8:	0b e5       	ldi	r16, 0x5B	; 91
	
	// Loop bis Datensatz beginnt
	while(1)
	{
		
		uart_getchar(&data);
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_getchar>

		if(data == '[')
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	8b 35       	cpi	r24, 0x5B	; 91
    10d6:	c9 f7       	brne	.-14     	; 0x10ca <uart_getcmd+0x1e>
		{
			
			cmd[loop] = data;	// Empfangenes Zeichen auf Buffer legen
    10d8:	ec 2c       	mov	r14, r12
    10da:	fd 2c       	mov	r15, r13
    10dc:	f7 01       	movw	r30, r14
    10de:	01 93       	st	Z+, r16
    10e0:	7f 01       	movw	r14, r30
			loop++;				// Arrayzeiger erhöhen
			
			uart_setchar(data);
    10e2:	80 2f       	mov	r24, r16
    10e4:	0e 94 a9 07 	call	0xf52	; 0xf52 <uart_setchar>

		if(data == '[')
		{
			
			cmd[loop] = data;	// Empfangenes Zeichen auf Buffer legen
			loop++;				// Arrayzeiger erhöhen
    10e8:	11 e0       	ldi	r17, 0x01	; 1
			
			uart_setchar(data);
			
			do
			{
				uart_fetchchar(&data);	// Warten bis Zeichen verfügbar
    10ea:	ce 01       	movw	r24, r28
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	0e 94 11 08 	call	0x1022	; 0x1022 <uart_fetchchar>
				cmd[loop] = data;		// Zeichen in Array schreiben
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	f7 01       	movw	r30, r14
    10f6:	81 93       	st	Z+, r24
    10f8:	7f 01       	movw	r14, r30
				loop++;					// Arrayzeiger erhöhen
    10fa:	1f 5f       	subi	r17, 0xFF	; 255
				
				// Überprüfen ob Loop Zähler >= (Arraygröße - 1)
				if(loop >= (unsigned char)(MAXCMDSIZE))
    10fc:	18 30       	cpi	r17, 0x08	; 8
    10fe:	21 f0       	breq	.+8      	; 0x1108 <uart_getcmd+0x5c>
				{
					cancel = 0xFF;		// Programmabbruchflag aktivieren
					break;				// Schleifenabbruch initiieren
				}
			} while (data != ']');		// Schleife solange durchlaufen bis Endzeichen erreicht
    1100:	8d 35       	cpi	r24, 0x5D	; 93
    1102:	99 f7       	brne	.-26     	; 0x10ea <uart_getcmd+0x3e>
		
		// CANCEL
		if(cancel == 0xFF)
			break;
			
		if(loop > 0)
    1104:	11 23       	and	r17, r17
    1106:	09 f3       	breq	.-62     	; 0x10ca <uart_getcmd+0x1e>
		{
			break;
			cmd[loop] = '\0';	// Array Endstring hinzufügen
		}
	}
    1108:	0f 90       	pop	r0
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	08 95       	ret

0000111c <__udivmodhi4>:
    111c:	aa 1b       	sub	r26, r26
    111e:	bb 1b       	sub	r27, r27
    1120:	51 e1       	ldi	r21, 0x11	; 17
    1122:	07 c0       	rjmp	.+14     	; 0x1132 <__udivmodhi4_ep>

00001124 <__udivmodhi4_loop>:
    1124:	aa 1f       	adc	r26, r26
    1126:	bb 1f       	adc	r27, r27
    1128:	a6 17       	cp	r26, r22
    112a:	b7 07       	cpc	r27, r23
    112c:	10 f0       	brcs	.+4      	; 0x1132 <__udivmodhi4_ep>
    112e:	a6 1b       	sub	r26, r22
    1130:	b7 0b       	sbc	r27, r23

00001132 <__udivmodhi4_ep>:
    1132:	88 1f       	adc	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	5a 95       	dec	r21
    1138:	a9 f7       	brne	.-22     	; 0x1124 <__udivmodhi4_loop>
    113a:	80 95       	com	r24
    113c:	90 95       	com	r25
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	08 95       	ret

00001144 <__umoddi3>:
    1144:	68 94       	set
    1146:	01 c0       	rjmp	.+2      	; 0x114a <__udivdi3_umoddi3>

00001148 <__udivdi3>:
    1148:	e8 94       	clt

0000114a <__udivdi3_umoddi3>:
    114a:	8f 92       	push	r8
    114c:	9f 92       	push	r9
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	0e 94 b0 08 	call	0x1160	; 0x1160 <__udivmod64>
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	9f 90       	pop	r9
    115c:	8f 90       	pop	r8
    115e:	08 95       	ret

00001160 <__udivmod64>:
    1160:	88 24       	eor	r8, r8
    1162:	99 24       	eor	r9, r9
    1164:	f4 01       	movw	r30, r8
    1166:	e4 01       	movw	r28, r8
    1168:	b0 e4       	ldi	r27, 0x40	; 64
    116a:	9f 93       	push	r25
    116c:	aa 27       	eor	r26, r26
    116e:	9a 15       	cp	r25, r10
    1170:	8b 04       	cpc	r8, r11
    1172:	9c 04       	cpc	r9, r12
    1174:	ed 05       	cpc	r30, r13
    1176:	fe 05       	cpc	r31, r14
    1178:	cf 05       	cpc	r28, r15
    117a:	d0 07       	cpc	r29, r16
    117c:	a1 07       	cpc	r26, r17
    117e:	98 f4       	brcc	.+38     	; 0x11a6 <__udivmod64+0x46>
    1180:	ad 2f       	mov	r26, r29
    1182:	dc 2f       	mov	r29, r28
    1184:	cf 2f       	mov	r28, r31
    1186:	fe 2f       	mov	r31, r30
    1188:	e9 2d       	mov	r30, r9
    118a:	98 2c       	mov	r9, r8
    118c:	89 2e       	mov	r8, r25
    118e:	98 2f       	mov	r25, r24
    1190:	87 2f       	mov	r24, r23
    1192:	76 2f       	mov	r23, r22
    1194:	65 2f       	mov	r22, r21
    1196:	54 2f       	mov	r21, r20
    1198:	43 2f       	mov	r20, r19
    119a:	32 2f       	mov	r19, r18
    119c:	22 27       	eor	r18, r18
    119e:	b8 50       	subi	r27, 0x08	; 8
    11a0:	31 f7       	brne	.-52     	; 0x116e <__udivmod64+0xe>
    11a2:	bf 91       	pop	r27
    11a4:	27 c0       	rjmp	.+78     	; 0x11f4 <__udivmod64+0x94>
    11a6:	1b 2e       	mov	r1, r27
    11a8:	bf 91       	pop	r27
    11aa:	bb 27       	eor	r27, r27
    11ac:	22 0f       	add	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	44 1f       	adc	r20, r20
    11b2:	55 1f       	adc	r21, r21
    11b4:	66 1f       	adc	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	88 1f       	adc	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	88 1c       	adc	r8, r8
    11be:	99 1c       	adc	r9, r9
    11c0:	ee 1f       	adc	r30, r30
    11c2:	ff 1f       	adc	r31, r31
    11c4:	cc 1f       	adc	r28, r28
    11c6:	dd 1f       	adc	r29, r29
    11c8:	aa 1f       	adc	r26, r26
    11ca:	bb 1f       	adc	r27, r27
    11cc:	8a 14       	cp	r8, r10
    11ce:	9b 04       	cpc	r9, r11
    11d0:	ec 05       	cpc	r30, r12
    11d2:	fd 05       	cpc	r31, r13
    11d4:	ce 05       	cpc	r28, r14
    11d6:	df 05       	cpc	r29, r15
    11d8:	a0 07       	cpc	r26, r16
    11da:	b1 07       	cpc	r27, r17
    11dc:	48 f0       	brcs	.+18     	; 0x11f0 <__udivmod64+0x90>
    11de:	8a 18       	sub	r8, r10
    11e0:	9b 08       	sbc	r9, r11
    11e2:	ec 09       	sbc	r30, r12
    11e4:	fd 09       	sbc	r31, r13
    11e6:	ce 09       	sbc	r28, r14
    11e8:	df 09       	sbc	r29, r15
    11ea:	a0 0b       	sbc	r26, r16
    11ec:	b1 0b       	sbc	r27, r17
    11ee:	21 60       	ori	r18, 0x01	; 1
    11f0:	1a 94       	dec	r1
    11f2:	e1 f6       	brne	.-72     	; 0x11ac <__udivmod64+0x4c>
    11f4:	2e f4       	brtc	.+10     	; 0x1200 <__udivmod64+0xa0>
    11f6:	94 01       	movw	r18, r8
    11f8:	af 01       	movw	r20, r30
    11fa:	be 01       	movw	r22, r28
    11fc:	cd 01       	movw	r24, r26
    11fe:	00 0c       	add	r0, r0
    1200:	08 95       	ret

00001202 <__ashldi3>:
    1202:	0f 93       	push	r16
    1204:	08 30       	cpi	r16, 0x08	; 8
    1206:	90 f0       	brcs	.+36     	; 0x122c <__ashldi3+0x2a>
    1208:	98 2f       	mov	r25, r24
    120a:	87 2f       	mov	r24, r23
    120c:	76 2f       	mov	r23, r22
    120e:	65 2f       	mov	r22, r21
    1210:	54 2f       	mov	r21, r20
    1212:	43 2f       	mov	r20, r19
    1214:	32 2f       	mov	r19, r18
    1216:	22 27       	eor	r18, r18
    1218:	08 50       	subi	r16, 0x08	; 8
    121a:	f4 cf       	rjmp	.-24     	; 0x1204 <__ashldi3+0x2>
    121c:	22 0f       	add	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	44 1f       	adc	r20, r20
    1222:	55 1f       	adc	r21, r21
    1224:	66 1f       	adc	r22, r22
    1226:	77 1f       	adc	r23, r23
    1228:	88 1f       	adc	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 95       	dec	r16
    122e:	b2 f7       	brpl	.-20     	; 0x121c <__ashldi3+0x1a>
    1230:	0f 91       	pop	r16
    1232:	08 95       	ret

00001234 <__adddi3>:
    1234:	2a 0d       	add	r18, r10
    1236:	3b 1d       	adc	r19, r11
    1238:	4c 1d       	adc	r20, r12
    123a:	5d 1d       	adc	r21, r13
    123c:	6e 1d       	adc	r22, r14
    123e:	7f 1d       	adc	r23, r15
    1240:	80 1f       	adc	r24, r16
    1242:	91 1f       	adc	r25, r17
    1244:	08 95       	ret

00001246 <__adddi3_s8>:
    1246:	00 24       	eor	r0, r0
    1248:	a7 fd       	sbrc	r26, 7
    124a:	00 94       	com	r0
    124c:	2a 0f       	add	r18, r26
    124e:	30 1d       	adc	r19, r0
    1250:	40 1d       	adc	r20, r0
    1252:	50 1d       	adc	r21, r0
    1254:	60 1d       	adc	r22, r0
    1256:	70 1d       	adc	r23, r0
    1258:	80 1d       	adc	r24, r0
    125a:	90 1d       	adc	r25, r0
    125c:	08 95       	ret

0000125e <memcmp>:
    125e:	fb 01       	movw	r30, r22
    1260:	dc 01       	movw	r26, r24
    1262:	04 c0       	rjmp	.+8      	; 0x126c <memcmp+0xe>
    1264:	8d 91       	ld	r24, X+
    1266:	01 90       	ld	r0, Z+
    1268:	80 19       	sub	r24, r0
    126a:	21 f4       	brne	.+8      	; 0x1274 <memcmp+0x16>
    126c:	41 50       	subi	r20, 0x01	; 1
    126e:	50 40       	sbci	r21, 0x00	; 0
    1270:	c8 f7       	brcc	.-14     	; 0x1264 <memcmp+0x6>
    1272:	88 1b       	sub	r24, r24
    1274:	99 0b       	sbc	r25, r25
    1276:	08 95       	ret

00001278 <eeprom_read_block>:
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22

0000127c <eeprom_read_blraw>:
    127c:	fc 01       	movw	r30, r24
    127e:	e1 99       	sbic	0x1c, 1	; 28
    1280:	fe cf       	rjmp	.-4      	; 0x127e <eeprom_read_blraw+0x2>
    1282:	06 c0       	rjmp	.+12     	; 0x1290 <eeprom_read_blraw+0x14>
    1284:	ff bb       	out	0x1f, r31	; 31
    1286:	ee bb       	out	0x1e, r30	; 30
    1288:	e0 9a       	sbi	0x1c, 0	; 28
    128a:	31 96       	adiw	r30, 0x01	; 1
    128c:	0d b2       	in	r0, 0x1d	; 29
    128e:	0d 92       	st	X+, r0
    1290:	41 50       	subi	r20, 0x01	; 1
    1292:	50 40       	sbci	r21, 0x00	; 0
    1294:	b8 f7       	brcc	.-18     	; 0x1284 <eeprom_read_blraw+0x8>
    1296:	08 95       	ret

00001298 <_exit>:
    1298:	f8 94       	cli

0000129a <__stop_program>:
    129a:	ff cf       	rjmp	.-2      	; 0x129a <__stop_program>
